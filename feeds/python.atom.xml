<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>mx's Blog</title><link href="/" rel="alternate"></link><link href="/feeds/python.atom.xml" rel="self"></link><id>/</id><updated>2014-07-22T00:00:00+02:00</updated><entry><title>IPython上手学习笔记</title><link href="/IPython%E4%B8%8A%E6%89%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html" rel="alternate"></link><updated>2014-07-22T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:,2014-07-22:IPython上手学习笔记.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.packtpub.com/learning-ipython-for-interactive-computing-and-data-visualization/book"&gt;Learning IPython for Interactive Computing and Data Visualization&lt;/a&gt;这本书的前两章的笔记, 这本书还被放在了IPython官网上, 虽然只有一百页多一点点, 但是讲的内容却很丰富, 介绍了IPython, numpy, pandas以及并行计算等方面. &lt;/p&gt;
&lt;p&gt;(在开始系统学IPython之前简单使用过IPython, 那时候我还是更喜欢bpython的代码提示功能...)&lt;/p&gt;
&lt;h1&gt;ch1: 10 IPython essentials&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在任何变量后面加问号&lt;code&gt;?&lt;/code&gt;或者双问号&lt;code&gt;??&lt;/code&gt;, 将会输出详细的信息(按&lt;code&gt;q&lt;/code&gt;退出), &lt;code&gt;??&lt;/code&gt;的信息更加详细些&lt;/li&gt;
&lt;li&gt;Tab Completion: 没啥好说的 没有bpython做的好 也凑合吧...&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_, __, ___&lt;/code&gt;保存最近三次的输出;  &lt;code&gt;_i, __i, ___i&lt;/code&gt;保存最近三次的输入(作为字符串保存)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;magic commands&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在IPython里面可以使用一些标准unix命令, 比如&lt;code&gt;cd&lt;/code&gt;, &lt;code&gt;pwd,ls&lt;/code&gt;等... &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个太好了 否则还要&lt;code&gt;import os&lt;/code&gt;, 然后再什么&lt;code&gt;os.chdir('...')&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其实这些unix命令是IPython的&lt;strong&gt;magic commands&lt;/strong&gt;, 这些magic commands一般用&lt;code&gt;%&lt;/code&gt;作为前缀.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是由于默认IPython开启了&lt;strong&gt;automagic system&lt;/strong&gt;, 上面那些命令可以不用加前缀了(或者使用Tab自动给加上前缀)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%run&lt;/code&gt; 命令, 运行一个.py脚本, 但是好处是, 与运行完了以后这个.py文件里的变量都可以在Ipython里继续访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%timeit&lt;/code&gt; 命令, 可以用来做基准测试(&lt;em&gt;benchmarking&lt;/em&gt;), 测试一个命令(或者一个函数)的运行时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;%timeit [x*x for x in range(1000)]&lt;/span&gt;
&lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;56.5&lt;/span&gt; µ&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;

&lt;span class="c"&gt;%timeit [x*x for x in xrange(1000)]&lt;/span&gt;
&lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;51.7&lt;/span&gt; µ&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%debug&lt;/code&gt; 命令: 当有exception的时候, 在console里输入&lt;code&gt;%debug&lt;/code&gt;即可打开debugger. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在debugger里, 输入&lt;code&gt;u,d&lt;/code&gt;(up, down)查看stack, 输入&lt;code&gt;q&lt;/code&gt;退出debugger&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;%debug&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="n"&gt;c374156862&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="n"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt;
      &lt;span class="mi"&gt;3&lt;/span&gt; 
&lt;span class="n"&gt;ipdb&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;
&lt;span class="o"&gt;***&lt;/span&gt; &lt;span class="n"&gt;Oldest&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;
&lt;span class="n"&gt;ipdb&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="o"&gt;***&lt;/span&gt; &lt;span class="n"&gt;Newest&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt;
&lt;span class="n"&gt;ipdb&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用%pdb开启自动pdb模式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;%pdb&lt;br /&gt;
Automatic pdb calling has been turned ON&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;%pylab&lt;/code&gt; 命令, 大杀器, 看一下都import了什么:&lt;/p&gt;
&lt;p&gt;%pylab makes the following imports::
    import numpy
    import matplotlib
    from matplotlib import pylab, mlab, pyplot
    np = numpy
    plt = pyplot
    from IPython.display import display
    from IPython.core.pylabtools import figsize, getfigs
    from pylab import *
    from numpy import *&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;画图的时候可以不用非要加&lt;code&gt;plt.&lt;/code&gt;前缀了, 直接&lt;code&gt;plot()&lt;/code&gt;即可. 图像化出来的时候, 画图窗口并没有block, 可以动态(&lt;em&gt;interactively&lt;/em&gt;)画图.&lt;/p&gt;
&lt;p&gt;另外, qtconsole和notebook一样, 指定了&lt;code&gt;inline&lt;/code&gt;选项以后可以直接在窗口里画图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="IPython上手学习笔记/pasted_image004.png" /&gt;&lt;/p&gt;
&lt;p&gt;后来发现inline的图片貌似不能放大看, 所以有时候还是单独一个窗口比较好, 换到非inline模式只需要再输入以下%pylab, 加上选项qt:
&lt;code&gt;%pylab qt&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;IPython Notebook&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;(重头戏)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个可以在浏览器里(!!)使用IPython, 并且可以使用多行编辑后再一并执行. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The Notebook brings the functionality of IPython into the browser for multiline textediting features, interactive session reproducibility, and so on.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在shell/cmd窗口里启动ipython的时候加上notebook:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ipython notebook&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;看到浏览器打开了, 很神奇: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="IPython上手学习笔记/pasted_image.png" /&gt;&lt;/p&gt;
&lt;p&gt;新建一个notebook, 用用看: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="IPython上手学习笔记/pasted_image001.png" /&gt;&lt;/p&gt;
&lt;p&gt;使用的过程中渐渐理解了为什么书里说可以用来做"&lt;em&gt;multiline textediting features, interactive session reproducibility&lt;/em&gt;"... 因为这不只是个编程的东西, 还可以作为一个笔记本 — 而且是一个交互式的笔记本! &lt;/p&gt;
&lt;p&gt;(&lt;em&gt;注: 更多关于notebook的介绍在下面第二章的内容里.&lt;/em&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码,或者段落, 按照cell(格子)进行组织, 一个cell里面的内容可以是code, 但是也同样可以是markdown的段落, 或者是一个标题(heading).&lt;/li&gt;
&lt;li&gt;在一个代码的cell里, 写入多行代码, 就像在编辑器里写python程序一样, 按回车只会换行, 不会运行程序.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;写了一段程序代码以后, 按&lt;code&gt;ctrl+Enter&lt;/code&gt;运行程序, 运行结果也是一个作为cell. 
(&lt;strong&gt;注&lt;/strong&gt;: 在qtconsole里面相反, 如果要输入多行程序的话, 按&lt;code&gt;Ctrl+Enter&lt;/code&gt;换行(按一一次ctrl+enter即可进入多行编辑模式), 写了几行代码以后要运行的话, 就按两次回车, 或者按&lt;code&gt;Shift+Enter&lt;/code&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;...还有好多快捷键, 按Esc以后再按h就可以看到... 这个还分编辑模式和命令模式呢... 真不能小看了IPython了!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="IPython上手学习笔记/pasted_image002.png" /&gt;&lt;/p&gt;
&lt;h2&gt;customizing IPython&lt;/h2&gt;
&lt;p&gt;保存自己的IPython配置文件, 只需要在shell/cmd里输入ipython profile create&lt;code&gt;,&lt;/code&gt; 配置文件存储在 &lt;code&gt;~.ipython&lt;/code&gt; 或者 &lt;code&gt;~/.config/ipython&lt;/code&gt;目录里.&lt;/p&gt;
&lt;h1&gt;ch2: Interavtive Work with IPython&lt;/h1&gt;
&lt;p&gt;IPython可以实现&lt;strong&gt;shell(OS)和python的交互&lt;/strong&gt;. 这样做一些unix shell的操作的时候可以不必退出console了.&lt;/p&gt;
&lt;h2&gt;navigating the file system&lt;/h2&gt;
&lt;p&gt;例子: 完成下载压缩包, 解压缩, 以及打开解压后的文件这些操作...&lt;/p&gt;
&lt;p&gt;在py变量前面加入$, 可以把这个变量共享给OS或者magic command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样就在当前目录下建立一个'data'文件夹 — 这可比py的命令好记多了啊... &lt;code&gt;%mkdir&lt;/code&gt;的原理其实是给了shell命令一个别名(&lt;code&gt;alias&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;然后, &lt;code&gt;%bookmark&lt;/code&gt;可以把当前的目录加入收藏夹 下次cd的时候方便直接跳到这里来:&lt;/p&gt;
&lt;p&gt;ex.
&lt;code&gt;%bookmark bm&lt;/code&gt;
那么以后可以直接用 &lt;code&gt;cd bm&lt;/code&gt; 跳到这个目录下. &lt;code&gt;%bookmark -l&lt;/code&gt; 可以列出收藏夹的目录内容.&lt;/p&gt;
&lt;p&gt;然后发现原来IPython连文件名都是可以提示的啊!... &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0&amp;lt;TAB&amp;gt;&lt;/span&gt;
&lt;span class="s1"&gt;0.circles 0.edges&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Accessing system shell with IPython&lt;/h2&gt;
&lt;p&gt;在IPython里调用系统的命令, 不用再使用&lt;code&gt;sys.exec('...')&lt;/code&gt;之类冗长的方式了, 只需要在系统的命令前面加上一个感叹号&lt;code&gt;!&lt;/code&gt;即可...&lt;/p&gt;
&lt;p&gt;shell返回的结果可以作为一个string的列表保存在一个python variable里.&lt;/p&gt;
&lt;p&gt;ex. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="n"&gt;edges&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;1912.&lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;107.&lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;[...]&lt;/span&gt;
    &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mf"&gt;3980.&lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(当然 上面这一行只能在unix系统下运行, 因为Windows的cmd没有ls 和 grep命令)&lt;/p&gt;
&lt;p&gt;还可以把一条比较长的命令作为alias保存起来, 用&lt;code&gt;%alias&lt;/code&gt;命令... (这个应该一般用不到)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%alias largest ls -1sSh | grep %s&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;The Extended Python Console&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%history&lt;/code&gt; 或者 &lt;code&gt;%hist&lt;/code&gt; , 显示之前的记录, 有一些参数可用...&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%store&lt;/code&gt; 把python变量的内容保存下来, 以后的session可以用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%paste&lt;/code&gt; 导入并执行剪贴板里面的内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%run&lt;/code&gt; 之前讲过了, 运行py文件, 运行后py文件里的变量可以在console里访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%edit&lt;/code&gt; 打开系统的文件编辑器, 并且在关闭这个编辑器时自动运行程序&lt;/li&gt;
&lt;li&gt;介绍了一个包 networkx, 可以用来分析复杂网络(graph)的....&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;debug&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;debug加入断点: &lt;code&gt;%run -d -b29 script.py&lt;/code&gt; 运行script.py 并且在29行的时候暂停, 当输入&lt;code&gt;c&lt;/code&gt;的时候再继续运行.&lt;/li&gt;
&lt;li&gt;一些pdb(debugging环境)里常用的命令:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;u/d&lt;/code&gt; for going up/down into the call stack&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; to step into the next statement&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; to continue execution until the next line in the current function&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; to continue execution until the current function returns&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; to continue execution until the next breakpoint or exception&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; to evaluate and print any expression&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; to obtain the arguments of the current functions&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;!&lt;/code&gt; prefix to execute any Python command within the debugger&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;benchmarking("基准测试")&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%timeit fun()&lt;/code&gt; 测试一个&lt;strong&gt;函数&lt;/strong&gt;的执行速度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%run -t&lt;/code&gt;和&lt;code&gt;%timeit&lt;/code&gt;效果类似, 作用是测试一个py脚本&lt;strong&gt;文件&lt;/strong&gt;的执行速度&lt;/li&gt;
&lt;li&gt;更精细的运行时间测试, 可以用&lt;strong&gt;profile模块&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The profiler outputs details about calls of every Python function used directly or indirectly in this script.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;@@...好高级!!! 这样的话就更容易发现程序运行的瓶颈在哪里了!
方法是使用 &lt;code&gt;%run -p&lt;/code&gt; 或者 &lt;code&gt;%prun&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Using the IPython notebook&lt;/h2&gt;
&lt;p&gt;这个notebook的功能实在是很NB... 不仅可以加入代码/markdown段落, 还可以加入图片和视频... notebook的格式为.ipybn文件, 用JSON存储数据.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;输入 &lt;code&gt;ipython notebook&lt;/code&gt;(或者在ipython里输入&lt;code&gt;!ipython notebook&lt;/code&gt;)以后, 会在8888端口建立一个web server, 访问 &lt;a href="http://localhost:8888/"&gt;http://localhost:8888/&lt;/a&gt; 就可以看到上面的那个截图, 或者称之为&lt;strong&gt;notebook dashboard.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;cell magics&lt;/strong&gt;的作用域是整个cell(多行), 而magic command的作用域是一行, cell magics的前缀是两个百分号&lt;code&gt;%%&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从一个py文件直接建立一个notebook, 只需要把文件拖入dashboard即可, 然后notebook也可以保存为文件. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑了Markdown以后, 还是&lt;code&gt;Ctrl+Enter/Shift+Enter&lt;/code&gt; , 即可成为格式化的文本, 再双击就可以编辑!!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;让plot的图片直接嵌入在notebook里面: 使用&lt;code&gt;ipython notebook --pylab inline&lt;/code&gt;, 或者在notebook里面输入&lt;code&gt;%pylab inline&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="IPython上手学习笔记/pasted_image003.png" /&gt;&lt;/p&gt;
&lt;h3&gt;notebook的一些快捷键&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Esc从编辑模式(edit mode)退出到命令模式(command mode)&lt;/li&gt;
&lt;li&gt;Enter从命令模式到编辑模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;(编辑模式下)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ctrl+Enter: 运行程序/markdown代码&lt;/li&gt;
&lt;li&gt;shift+Enter: 运行程序, 并自动跳到下一个cell&lt;/li&gt;
&lt;li&gt;alt+Enter: 运行程序, 并自动在后面新建一个cell在&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;(命令模式下)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;c: 复制一个cell&lt;/li&gt;
&lt;li&gt;x: 剪切一个cell&lt;/li&gt;
&lt;li&gt;v: 粘贴cell&lt;/li&gt;
&lt;li&gt;a: 在当前cell上面(&lt;strong&gt;a&lt;/strong&gt;bove)新建一个cell&lt;/li&gt;
&lt;li&gt;b: 在当前cell下面(&lt;strong&gt;b&lt;/strong&gt;elow)新建一个cell&lt;/li&gt;
&lt;li&gt;m: 让当前cell变成一个markdown的cell&lt;/li&gt;
&lt;li&gt;y: 让当前cell变成code的cell&lt;/li&gt;
&lt;li&gt;1,2,3...: n级标题&lt;/li&gt;
&lt;li&gt;j,k: 上下移动选中的cell, vim风格..&lt;/li&gt;
&lt;li&gt;dd(d按两下): 删除一个cell(vim 风格...)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;......爽到爆!!&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>python pickle 的一个小问题</title><link href="/python%20pickle%20%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98.html" rel="alternate"></link><updated>2014-07-15T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:,2014-07-15:python pickle 的一个小问题.html</id><summary type="html">&lt;p&gt;python的pickle/unpickle机制可以非常方便的保存一些计算的中间结果, 这一点java虽然也可以做到, 但是java里面的包的名字实在是长的让人记不住...&lt;/p&gt;
&lt;p&gt;不过今天在使用pickle的时候遇到了一个很奇怪的问题. &lt;/p&gt;
&lt;p&gt;是这样的, 原本写了一个程序&lt;code&gt;main.py&lt;/code&gt;, 这个程序里进行了一些计算并且pickle下了这些内容, 后来我觉得一个程序main.py写这么多实在太长了, 于是就把那些辅助函数以及class的定义通通放进了一个&lt;code&gt;util.py&lt;/code&gt;文件里. 并且在main.py的第一行写上: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;from util import *&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;按理说这应该没有问题, 和一个main文件时运行的效果相同的, 但是当我运行的时候却显示util.py里面这行unpickle的语句有错误:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;airport_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;airport_info.dict&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
    &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;module&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Airport&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中&lt;code&gt;Airport&lt;/code&gt;是我定义的一个类, 本来在main.py里面, 后来被我移动到了util.py里面...&lt;/p&gt;
&lt;p&gt;感觉很奇怪, 于是去&lt;a href="https://bbs.sjtu.edu.cn/frame2.html"&gt;水源&lt;/a&gt;求助, 果然fcfarseer学长就很快给了&lt;a href="https://bbs.sjtu.edu.cn/bbscon,board,Script,file,M.1405431916.A.html"&gt;回复&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在pickle一個對象的時候，pickle會記住這個對象的class是定義在哪個python
源文件裏，然後再unpickle的時候，pickle會自動import那個源文件以獲得class的定義。&lt;/p&gt;
&lt;p&gt;所以如果定義class的文件在這期間改過的話，就會拋出類似的錯誤。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以问题出在这里(我的理解): 原先我把数据pickle进文件的时候, &lt;code&gt;Airport这个class是定义在了main.py里面, 所以当我在util.py里面load数据的时候, pickle发现原来的main.py里面已经没有了 Airport这个class, 于是就出现了Error...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解决办法也不难, 只需要在&lt;code&gt;util.py&lt;/code&gt;里面再生成一下那些要load的数据文件, 之后再次unpickle的时候就会去&lt;code&gt;util.py&lt;/code&gt;而不是&lt;code&gt;main.py&lt;/code&gt;里找class的定义, 也就没有问题了!&lt;/p&gt;
&lt;p&gt;今天碰到的这个问题不是那么evident, 所以特地记一下.&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>A byte of Python 笔记</title><link href="/byte_of_python%E7%AC%94%E8%AE%B0.html" rel="alternate"></link><updated>2014-04-10T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:,2014-04-10:byte_of_python笔记.html</id><summary type="html">&lt;p&gt;据说这本书是最好的入门读物, 况且只有100来页 (减掉前面后面那些扯淡的 不到100页...)&lt;/p&gt;
&lt;p&gt;那就用这本书过一下py的基本知识点吧! 看完以后收获不少, 把py涉及的很大一部分都讲到了. 这本书已经是够压缩的了, 不过我还是边看边自己再压缩了一遍(写在zim笔记里). &lt;/p&gt;
&lt;p&gt;我看的是1.20版本, 2004年的, 因为这个版本针对的是py2.x, 作者主页上现在的版本针对的是py3. 另外感觉没必要看中文翻译版, 因为这里用的英语比较简单, 而且有的时候中文翻译反而不如原文表达的恰当.&lt;/p&gt;
&lt;h1&gt;preface+ch1+ch2&lt;/h1&gt;
&lt;p&gt;扯淡...&lt;/p&gt;
&lt;h1&gt;ch3. First Steps&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There are two ways of using Python to run your program - using the interactive interpreter prompt or using a source file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anything to the right of the # symbol is a comment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;the shebang line&lt;/strong&gt; - whenever the first two characters of the source file are &lt;code&gt;#!&lt;/code&gt; followed by the location of a program, this tells your Linux/Unix system that this program should be run with this interpreter when you execute the program.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Note that you can always run the program on any platform by specifying the interpreter directly on the command line such as the command python helloworld.py .)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use the built-in help functionality.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;or example, run &lt;code&gt;help(str)&lt;/code&gt; - this displays the help for the str class which is used to store all text (strings) that you use in your program.&lt;/p&gt;
&lt;h1&gt;ch4. The Basics&lt;/h1&gt;
&lt;h2&gt;Literal Constants&lt;/h2&gt;
&lt;p&gt;It is called a literal because it is literal - you use its value literally. ex. number 2, or string "hello".&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;number&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Numbers in Python are of four types - integers, long integers, floating point and complex numbers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-Examples of floating point numbers (or floats for short) are 3.23 and 52.3E-4. The E notation indicates powers of 10. In this case, 52.3E-4 means 52.3 * 10-4.
-Examples of complex numbers are (-5+4j) and (2.3 - 4.6j)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;string&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;string可以用Single/Double/Triple Quotes括起来&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;escape sequence&lt;/em&gt;: \', \n, \t, 以及在行末作为续行符号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;raw string&lt;/strong&gt;: to specify some strings where no special processing such as escape sequences are handled, then what you need is to specify a raw string by prefixing r or R to the string. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. &lt;code&gt;r"Newlines are indicated by \n"&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unicode text:  prefix u or U. For example, &lt;code&gt;u"This is a Unicode string."&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember to use Unicode strings when you are dealing with text files, especially when you know that the file will contain text written in languages other than English.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Strings are immutable:  once you have created a string, you cannot change it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;String literal concatenation: If you place two string literals side by side, they are automatically concatenated by Python. For example, '&lt;code&gt;What\'s' 'your name?&lt;/code&gt;' is automatically converted in to &lt;code&gt;"What's your name?".&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note for Regular Expression Users: Always use raw strings when dealing with regular expressions. Otherwise, a lot of backwhacking may be required. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Variables&lt;/h2&gt;
&lt;p&gt;顾名思义就是可以可以变的量...
Unlike literal constants, you need some method of accessing these variables &lt;em&gt;and hence you give them names&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identifier(标示符)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Identifiers&lt;/strong&gt; are names given to identify something. 
The first character of the identifier must be a letter of the alphabet (upper or lowercase) &lt;em&gt;or an underscore ('_')&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python refers to anything used in a program as an object.
Python is &lt;strong&gt;strongly object-oriented&lt;/strong&gt; in the sense that everything is an object &lt;em&gt;including numbers, strings and even functions&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Variables are used by just assigning them a value. No declaration or data type definition is needed/used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Logical and Physical Lines: Implicitly, Python encourages the use of a single statement per line which makes code more readable. If you want to specify more than one logical line on a single physical line, then you have to explicitly specify this using a semicolon (;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;explicit line joining: ex. 续行符\;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;implicit line joining: ex. 括号...&lt;/p&gt;
&lt;h2&gt;Indentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Leading whitespace (spaces and tabs) at the beginning of the logical line is used to determine the indentation level of the logical line, which in turn is used to determine the grouping of statements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This means that statements which go together must have the same indentation. Each such set of state- ments is called a &lt;em&gt;block&lt;/em&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not use a mixture of tabs and spaces for the indentation as it does not work across different platforms properly. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ch5. Operators and Expressions&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;expressions&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An expression can be broken down into &lt;em&gt;operators&lt;/em&gt; and &lt;em&gt;operands&lt;/em&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一些oprators: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;**, //, &amp;lt;&amp;lt;, &amp;gt;&amp;gt;, &amp;amp;, |, ^, ~, not, and, or&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Operator Precedence: 优先级的一个表...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Associativity: &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Operators are usually associated from left to right i.e. operators with same precedence are evaluated in a left to right manner. For example, &lt;code&gt;2 + 3 + 4&lt;/code&gt; is evaluated as &lt;code&gt;(2 + 3) + 4&lt;/code&gt;. Some operators like assignment operators have right to left associativity i.e. &lt;code&gt;a = b = c&lt;/code&gt; is treated as &lt;code&gt;a = (b = c)&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;ch6. Control Flow&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;if&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;if-elif-else&lt;/code&gt; statement: This makes the program easier and reduces the amount of indentation required. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There is &lt;em&gt;no switch statement in Python:&lt;/em&gt; You can use an if..elif..else statement to do the same thing (and in some cases, use a dictionary to do it quickly)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;while&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember that you can have &lt;em&gt;an &lt;strong&gt;&lt;em&gt;else&lt;/em&gt;&lt;/strong&gt; clause for the while loop&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-The &lt;code&gt;for..in&lt;/code&gt; statement is another looping statement which &lt;em&gt;iterates&lt;/em&gt; over a sequence of objects i.e. go
through each item in a sequence, a &lt;em&gt;sequence&lt;/em&gt; is just an ordered collection of items.
-optional &lt;strong&gt;else&lt;/strong&gt; part  also.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;break&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to break out of a loop statement i.e. stop the execution of a looping statement, even if the loop condition has not become False or the sequence of items has been completely iterated over.
-An important note is that if you break out of a for or while loop, &lt;em&gt;any corresponding loop else block is &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; executed.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;continue&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;used to tell Python to skip the rest of the statements in the current loop block and to continue to the &lt;em&gt;next iteration&lt;/em&gt; of the loop.&lt;/p&gt;
&lt;h1&gt;ch7. Functions&lt;/h1&gt;
&lt;p&gt;Functions are reusable pieces of programs. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;def func_name()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parameters:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note the terminology used - the names given in the function definition are called &lt;em&gt;parameters(行参)&lt;/em&gt; whereas the values you supply in the function call are called &lt;em&gt;arguments(实参)&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;scope&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;local variables:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All variables have the &lt;strong&gt;scope&lt;/strong&gt; of the block they are declared in starting from the point of definition of the name.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;global variables&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to assign a value to a name defined outside the function, then you have to tell Python that the name is not local, but it is global. We do this using the &lt;code&gt;global&lt;/code&gt; statement. &lt;/p&gt;
&lt;h2&gt;Default Argument Values&lt;/h2&gt;
&lt;p&gt;Default Argument Values默认参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can specify default argument values for parameters by following the parameter name in the function definition with the assignment operator (=) followed by the default value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note that the default argument value should be &lt;em&gt;immutable.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;you cannot have a parameter with a default argument value &lt;em&gt;before&lt;/em&gt; a parameter without a default argument value in the order of parameters declared in the function parameter list.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is because the values are &lt;em&gt;assigned to the parameters by position&lt;/em&gt;. For example, &lt;code&gt;def func(a, b=5)&lt;/code&gt; is valid, but &lt;code&gt;def func(a=5, b)&lt;/code&gt; is not valid.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keyword Arguments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have some functions with many parameters and you want to specify only some of them, then you can give values for such parameters by naming them - this is called keyword arguments - we &lt;em&gt;use the name (keyword) instead of the position&lt;/em&gt; to specify the arguments to the function.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;return&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;used to &lt;em&gt;return&lt;/em&gt; from a function i.e. break out of the function. We can optionally return a value from the function as well.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;return None&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-a return statement without a value is equivalent to &lt;code&gt;return None&lt;/code&gt;. None is a special type in Python that represents nothingness. For example, it is used to indicate that a variable has no value if it has a value of None.
-Every function implicitly contains a return None statement at the end unless you have written your own return statement.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pass&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the &lt;code&gt;pass&lt;/code&gt; statement is used in Python to indicate an empty block of statements.&lt;/p&gt;
&lt;h2&gt;DocStrings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;A string on the first logical line of a function&lt;/em&gt; is the &lt;strong&gt;docstring&lt;/strong&gt; for that function (also apply to modules and classes). &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;func.__doc__&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The convention: a multi-line string where the first line starts with a capital letter and ends with a dot. Then the second line is blank followed by any detailed explanation starting from the third line. &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ch8. Modules&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;A module is basically &lt;strong&gt;a file&lt;/strong&gt;&lt;em&gt; containing all your functions and variables that you have defined&lt;/em&gt;. &lt;/li&gt;
&lt;li&gt;To reuse the module in other programs, the filename of the module must have a .py extension.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ex. sys module&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When Python executes the &lt;code&gt;import sys&lt;/code&gt; statement, it looks for the sys.py module in one of the directores listed in its &lt;code&gt;sys.path&lt;/code&gt; variable. If the file is found, then the statements in the main block of that module is run and then the module is made available for you to use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;sys.argv&lt;/code&gt; variable is a list of strings, contains the list of command line arguments i.e. the arguments passed to your program using the command line. 即程序执行时传给的参数列表.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;sys.path&lt;/code&gt; contains &lt;em&gt;the list of directory names where modules are imported&lt;/em&gt; from. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Observe that the first string in sys.path is empty - this empty string indicates that &lt;em&gt;the current directory&lt;/em&gt; is also part of the sys.path which is same as the &lt;code&gt;PYTHONPATH&lt;/code&gt; environment variable. This means that you can directly import modules located in the current directory. Otherwise, you will have to place your module in one of the directories listed in sys.path .&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Byte-compiled .pyc files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Importing a module is a relatively costly affair.
This .pyc file is useful when you import the module the next time from a different program - it will be much faster since part of the processing required in importing a module is already done. Also, these byte-compiled files are platform-independent. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;from..import &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to directly import the &lt;code&gt;argv&lt;/code&gt; variable into your program (to avoid typing the &lt;code&gt;sys.&lt;/code&gt; everytime for it), then you can use the &lt;code&gt;from sys import argv&lt;/code&gt; statement.
not recommended...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__name__&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Every Python module has it's &lt;code&gt;__name__&lt;/code&gt; defined and if this is '&lt;code&gt;__main__&lt;/code&gt;', it implies that the module is being run standalone by the user and we can do corresponding appropriate actions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every Python program is also a module. You just have to make sure it has a .py extension. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;dir() function&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can use the built-in dir function to &lt;em&gt;list the identifiers&lt;/em&gt; that a module defines. The identifiers are the &lt;strong&gt;functions, classes, variables and imported modules&lt;/strong&gt; defined in that module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you supply a module name to the dir() function, it returns the list of the names defined in that module. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;When no argument is applied to it, it returns the list of names defined in the current module.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ch9. Data Structures&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Data structures are structures which can hold some data together. In other words, they are used to store a collection of related data.&lt;/li&gt;
&lt;li&gt;3 built-in data structures in Python - &lt;strong&gt;list, tuple and dictionary&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;List [a,b,c]&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;a data structure that holds an ordered collection of items. &lt;/li&gt;
&lt;li&gt;a &lt;em&gt;mutable&lt;/em&gt; data type&lt;/li&gt;
&lt;li&gt;you can add any kind of object to a list including numbers and even other lists.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;indexing &lt;/em&gt;operator: &lt;code&gt;a_list[1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;len(a_list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a_list.append()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for..in&lt;/code&gt; loop to iterate through the items of the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a_list.sort()&lt;/code&gt;: this method affects the list itself and does not return a modified list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;del a_list[0]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Tuple (a,b,c)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Tuples are just like lists except that they are &lt;strong&gt;immutable&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Tuples are usually used in cases where a statement or a user-defined function can safely assume that the collection of values (i.e. the tuple of values) used will not change.&lt;/li&gt;
&lt;li&gt;can contain another tuple, another list......&lt;/li&gt;
&lt;li&gt;singleton: &lt;code&gt;t=(2,)&lt;/code&gt;(comma is necessary!)&lt;/li&gt;
&lt;li&gt;empth: t=()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;indexing: a_touple[0]&lt;/li&gt;
&lt;li&gt;len(a_tuple)&lt;/li&gt;
&lt;li&gt;used for output format:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;print '%s is %d years old' % (name, age)&lt;/code&gt;&lt;/p&gt;
&lt;h2 k1:v1_="k1:v1," k2:v2="k2:v2"&gt;Dictionary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;key-value mapping&lt;/li&gt;
&lt;li&gt;you can use only immutable objects (like strings) for the keys of a dictionary but you can use either immutable or mutable objects for the values of the dictionary. (This basically translates to say that you should use only simple objects for keys.)&lt;/li&gt;
&lt;li&gt;一个dict中的keys不必同样type, values也是! &lt;/li&gt;
&lt;li&gt;key/value pairs in a dictionary are &lt;em&gt;not ordered&lt;/em&gt; in any manner.&lt;/li&gt;
&lt;li&gt;instances/objects of the dict class.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;adding key-value pair by indexing: &lt;code&gt;dic[key]=val&lt;/code&gt;&lt;em&gt;(overwrite if key already exists!)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;deleting: &lt;code&gt;del dic[key]&lt;/code&gt;&lt;em&gt;(KeyError if key doesn't exist!)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dic.items()&lt;/code&gt;&lt;em&gt;返回一个list of tuples&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;dic.items()
[(k1,v1), (k2,v2)]
for k,v in dic.items:
    print k, v&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dic.keys()&lt;/code&gt;&lt;em&gt;返回keys的list&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;test: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the &lt;code&gt;in&lt;/code&gt; operator: &lt;code&gt;if akey in dic&lt;/code&gt;
or even the &lt;code&gt;has_key&lt;/code&gt; method of the dict class: &lt;code&gt;if dic.has_key(k)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Sequences&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lists, tuples and strings are examples of sequences&lt;/li&gt;
&lt;li&gt;Two of the main features of a sequence is the &lt;strong&gt;indexing&lt;/strong&gt; operation which allows us to fetch a particular item in the sequence directly and the &lt;strong&gt;slicing&lt;/strong&gt; operation which allows us to retrieve a slice of the sequence i.e. a part of the sequence.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The great thing about sequences is that you can access tuples, lists and strings all in the same way!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;indexing(seq can be List or Tuple or String):&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;seq&lt;code&gt;[2], seq[-1]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;slicing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;seq&lt;code&gt;[1:3]&lt;/code&gt; &lt;em&gt;(from 1 to 2!)&lt;/em&gt;
&lt;code&gt;seq[:]&lt;/code&gt; &lt;em&gt;(a whole copy of the list)&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What you need to remember is that if you want to make a copy of a list or such kinds of sequences or complex objects (not simple objects such as integers), then you have to use the slicing operation(&lt;code&gt;list[:]&lt;/code&gt;) to make a copy.&lt;/li&gt;
&lt;li&gt;If you just assign the variable name to another name, both of them will refer to the same object and this could lead to all sorts of trouble if you are not careful.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;String&lt;/h2&gt;
&lt;p&gt;methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;str.startswith('a')&lt;/code&gt; &lt;em&gt;return boolean&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str.find(substr)&lt;/code&gt; &lt;em&gt;return index of subster or -1 if not found&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;substr in str&lt;/code&gt; &lt;em&gt;return boolean&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str.join(strseq)&lt;/code&gt; &lt;em&gt;use str as delimiter to joint the items in strseq&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ch10. Problem Solving - Writing a Python Script&lt;/h1&gt;
&lt;p&gt;"a program which creates a backup of all my important files"&lt;/p&gt;
&lt;h2&gt;1st version&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Run the command using the &lt;code&gt;os.system&lt;/code&gt; function which runs the command as if it was run from the system i.e. in the shell - it returns 0 if the command was successfully, else it returns an error number.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;swaroop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;byte&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;swaroop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;target_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;backup&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;target_dir&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;zip_command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;zip -qr &amp;#39;%s&amp;#39; %s&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zip_command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Successful&lt;/span&gt; &lt;span class="n"&gt;backup&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;
&lt;span class="nl"&gt;else:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Backup&lt;/span&gt; &lt;span class="n"&gt;FAILED&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2nd version&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;using the time as the name of the file within a directory with the current date as a directory within the main backup directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;os.sep&lt;/code&gt; variable - this gives the directory separator according to your operating system i.e. it will be '/' in Linux, Unix, it will be '\' in Windows and ':' in Mac OS.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3rd version&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;attaching a user-supplied comment to the name of the zip archive.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Enter&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;entered&lt;/span&gt;
    &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="nl"&gt;else:&lt;/span&gt;
    &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
    &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;More Refinements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;allow extra files and directories to be passed to the script at the command line. We will get these from the sys.argv list and we can add them to our source list using the extend method provided by the list class.&lt;/li&gt;
&lt;li&gt;use of the tar command instead of the zip command. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One advantage is that when you use the tar command along with gzip, the backup is much faster and the backup created is also much smaller. If I need to use this archive in Windows, then WinZip handles such .tar.gz files easily as well.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tar = 'tar -cvzf %s %s -X /home/swaroop/excludes.txt' % (target, ' '.join(srcdir))&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The most preferred way of creating such kind of archives would be using the zipfile or tarfile module respectively.&lt;/li&gt;
&lt;li&gt;"Software is grown, not built"&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ch11. Object-Oriented Programming&lt;/h1&gt;
&lt;h2&gt;fields, methods&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;class: &lt;strong&gt;fields&lt;/strong&gt;, &lt;strong&gt;methods&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Fields are of two types - they can belong to each instance/object of the class or they can belong to the class itself. They are called &lt;strong&gt;instance variables&lt;/strong&gt; and &lt;strong&gt;class variables&lt;/strong&gt; respectively.&lt;/li&gt;
&lt;li&gt;ou must refer to the variables and methods of the same object using the &lt;code&gt;self&lt;/code&gt; variable only. This is called an &lt;em&gt;attribute reference&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;we refer to the class variable as &lt;code&gt;ClassName.var&lt;/code&gt; and not as &lt;code&gt;self.var&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;self&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Class methods have only one specific difference from ordinary functions - &lt;em&gt;they must have an extra first name that has to be added to the beginning of the parameter list&lt;/em&gt;, but you do do not give a value for this parameter when you call the method, Python will provide it. &lt;/li&gt;
&lt;li&gt;create an object/instance of this class using the name of the class followed by a pair of parentheses.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The &lt;strong&gt;init&lt;/strong&gt; method&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;__init__()&lt;/code&gt; method is run as soon as an object of a class is instantiated. The method is useful to do any initialization you want to do with your object. &lt;/li&gt;
&lt;li&gt;analogous to a constructor in C++, C# or Java.&lt;/li&gt;
&lt;li&gt;the same, __&lt;code&gt;del__()&lt;/code&gt; method: run when the object is no longer in use and there is no guarantee when that method will be run. If you want to explicitly do this, you just have to use the del statement.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;All class members (including the data members) are &lt;strong&gt;&lt;em&gt;public&lt;/em&gt;&lt;/strong&gt; and all the methods are &lt;strong&gt;&lt;em&gt;virtual&lt;/em&gt;&lt;/strong&gt; in Python.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;One exception: If you use data members with names using the double underscore prefix such as &lt;code&gt;__privatevar&lt;/code&gt;, Python uses name-mangling to effectively make it a private variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Inheritance&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ex:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Teacher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SchoolMember&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="err"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Represents&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;teacher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;salary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;SchoolMember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;salary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salary&lt;/span&gt;
        &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Initialized&lt;/span&gt; &lt;span class="n"&gt;Teacher&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To use inheritance, we specify the base class names in a &lt;strong&gt;tuple&lt;/strong&gt; following the class name in the class definition. --&lt;em&gt;multiple inheritance.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;__init__&lt;/code&gt; method of the base class is explicitly called using the &lt;code&gt;self&lt;/code&gt; variable so that we can initialize the base class part of the object. This is very important to remember - &lt;em&gt;Python does not automatically call the constructor of the base class, you have to explicitly call it yourself.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ch12. Input/Output&lt;/h1&gt;
&lt;h2&gt;Files&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;open and use files for reading or writing by creating an object of the &lt;code&gt;file&lt;/code&gt; class and using its &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;readline&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt; methods appropriately to read from or write to the file. Then finally, when you are finished with the file, you call the &lt;code&gt;close&lt;/code&gt; method to tell Python that we are done using the file.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;poem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;riting&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;poem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;write&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;close&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;poem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;specified&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;ead&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;assumed&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;returns&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;complete&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;including&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;newline&lt;/span&gt; &lt;span class="n"&gt;character&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Zero&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;indicates&lt;/span&gt; &lt;span class="n"&gt;EOF&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Notice&lt;/span&gt; &lt;span class="n"&gt;comma&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;avoid&lt;/span&gt; &lt;span class="n"&gt;automatic&lt;/span&gt; &lt;span class="n"&gt;newline&lt;/span&gt; &lt;span class="n"&gt;added&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;close&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Pickle&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Python provides a standard module called &lt;/em&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;em&gt; using which you can store any Python object in a file and then get it back later intact. This is called storing the object persistently.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;There is another module called &lt;code&gt;cPickle&lt;/code&gt; which functions exactly same as the &lt;code&gt;pickle&lt;/code&gt; module except that it is written in the C language and is (upto 1000 times) faster. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pickling &amp;amp; unpickling:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cPickle&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shoplistfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shoplist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shoplistfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;storedlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;storedlist&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To store an object in a file, first we open a file object in write mode and store the object into the open file by calling the &lt;code&gt;dump&lt;/code&gt; function of the pickle module. This process is called &lt;em&gt;pickling&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Next, we retrieve the object using the &lt;code&gt;load&lt;/code&gt; function of the pickle module which returns the object. This process is called &lt;em&gt;unpickling&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ch13. Exceptions&lt;/h1&gt;
&lt;h2&gt;Try..Except&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We can handle exceptions using the &lt;code&gt;try..except&lt;/code&gt; statement. We basically put our usual statements within the try-block and put all our error handlers in the except-block.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ex&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;
&lt;span class="nl"&gt;try:&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Enter&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;except&lt;/span&gt; &lt;span class="n"&gt;EOFError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;\&lt;/span&gt;&lt;span class="n"&gt;nWhy&lt;/span&gt; &lt;span class="n"&gt;did&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;EOF&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;me&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;
&lt;span class="nl"&gt;except:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;\&lt;/span&gt;&lt;span class="n"&gt;nSome&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt; &lt;span class="n"&gt;occurred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;exiting&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;except&lt;/code&gt; clause can handle a single specified error or exception, or a parenthesized list of errors/exceptions. If no names of errors or exceptions are supplied, it will handle all errors and exceptions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;If any error or exception is not handled, then the default Python handler is called which just stops the execution of the program and prints a message.&lt;/li&gt;
&lt;li&gt;You can also have an &lt;code&gt;else&lt;/code&gt; clause associated with a &lt;code&gt;try..catch&lt;/code&gt; block. The &lt;code&gt;else&lt;/code&gt; clause is executed if no exception occurs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Raising Exceptions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;using the &lt;code&gt;raise&lt;/code&gt; statement. &lt;/li&gt;
&lt;li&gt;You also have to specify the name of the error/exception and the exception object that is to be thrown along with the exception. &lt;/li&gt;
&lt;li&gt;The error or exception that you can arise should be class which directly or indirectly is a derived class of the &lt;code&gt;Error&lt;/code&gt; or &lt;code&gt;Exception&lt;/code&gt; class respectively.&lt;/li&gt;
&lt;li&gt;ex.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;ShortInputException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;defined&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;atleast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;
        &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atleast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;atleast&lt;/span&gt;

&lt;span class="nl"&gt;try:&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Enter&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ShortInputException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;  &lt;span class="n"&gt;specify&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;thrown&lt;/span&gt;

&lt;span class="n"&gt;except&lt;/span&gt; &lt;span class="n"&gt;EOFError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;\&lt;/span&gt;&lt;span class="n"&gt;nWhy&lt;/span&gt; &lt;span class="n"&gt;did&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;EOF&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;me&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ShortInputException&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;ShortInputException&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
                &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;expecting&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;least&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atleast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nl"&gt;else:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;raised&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Try..Finally&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What if you were reading a file and you wanted to close the file &lt;em&gt;whether or not an exception was raised&lt;/em&gt;?&lt;/li&gt;
&lt;li&gt;before the program exits, the finally clause is executed and the file is closed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ch14. The Python Standard Library&lt;/h1&gt;
&lt;h2&gt;sys module&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sys.argv&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;there is always at least one item in the &lt;code&gt;sys.argv&lt;/code&gt; list which is the name of the current program being run and is available as &lt;code&gt;sys.argv[0]&lt;/code&gt; . Other command line arguments follow this item.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sys.exit&lt;/code&gt; : to exit the running program.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;os module&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;os.getcwd()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;gets the current working directory i.e. the path of the directory from which the curent Python script is working.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;os.listdir()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.remove()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.system()&lt;/code&gt;: run a shell command.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.linesep&lt;/code&gt;: string gives the line terminator used in the current platform. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.path.split()&lt;/code&gt;: returns the directory name and file name of the path.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.path.isfile()&lt;/code&gt; and &lt;code&gt;os.path.isdir()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ch15. More Python&lt;/h1&gt;
&lt;h2&gt;Special Methods&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Generally, special methods are used to mimic certain behavior. &lt;/li&gt;
&lt;li&gt;For example, if you want to use the &lt;code&gt;x[key]&lt;/code&gt; indexing operation for your class (just like you use for lists and tuples) then just implement the &lt;code&gt;__getitem__()&lt;/code&gt; method and your job is done.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__init__(self, ...)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__del__(self)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__str__(self)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Called when we use the &lt;code&gt;print&lt;/code&gt; statement with the object or when &lt;code&gt;str()&lt;/code&gt; is used.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__lt__(self, other)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Called when the &lt;em&gt;less than&lt;/em&gt; operator ( &amp;lt; ) is used. Similarly, there are special methods for all the operators (+, &amp;gt;, etc.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__getitem__(self, key)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Called when x[key] indexing operation is used.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__len__(self)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Called when the built-in &lt;code&gt;len()&lt;/code&gt; function is used for the sequence object.&lt;/p&gt;
&lt;h2&gt;List Comprehension&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;used to derive a new list from an existing list.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ex&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;listone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;listtwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;listone&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Here, we derive a new list by specifying the manipulation to be done (2*i) when some condition is satisfied (if i &amp;gt; 2).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Receiving Tuples and Lists in Functions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;receiving parameters to a function as a &lt;em&gt;tuple&lt;/em&gt; or a &lt;em&gt;dictionary&lt;/em&gt; using the &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;**&lt;/code&gt; prefix respectively. &lt;/li&gt;
&lt;li&gt;This is useful when taking variable number of arguments in the function.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;def powersum(power, *args):...&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Due to the * prefix on the args variable, all extra arguments passed to the function are stored in args as a tuple. If a ** prefix had been used instead, the extra parameters would be considered to be key/value pairs of a dictionary.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lambda Forms&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;lambda&lt;/code&gt; statement is used to create new function objects and then return them &lt;em&gt;at runtime&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;ex. &lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;make_repeater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="n"&gt;twice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_repeater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;twice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;twice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
    &lt;span class="n"&gt;wordword&lt;/span&gt;
    &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;lambda&lt;/code&gt; statement is used to create &lt;em&gt;the function object&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Essentially, &lt;em&gt;the lambda takes a parameter followed by a single expression only which becomes the body of the function and the value of this expression is returned by the new function.&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;Note that even a print statement cannot be used inside a lambda form, only &lt;em&gt;expressions&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The exec and eval statements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;exec&lt;/code&gt; statement is used to execute Python statements which are stored in a string or file.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;eval&lt;/code&gt; statement is used to evaluate valid Python expressions which are stored in a string. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The assert statement&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;to assert that something is true. &lt;/li&gt;
&lt;li&gt;For example, if you are very sure that you will have at least one element in a list you are using and want to check this, and raise an error if it is not true, then assert statement is ideal in this situation. &lt;/li&gt;
&lt;li&gt;When the assert statement fails, an AssertionError is raised.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The repr function or Backticks(`)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;to obtain a canonical string representation of the object.&lt;/li&gt;
&lt;li&gt;you will have &lt;code&gt;eval(repr(object)) == object&lt;/code&gt; most of the time.&lt;/li&gt;
&lt;li&gt;Basically, the repr function or the backticks are used to obtain a printable representation of the object.&lt;/li&gt;
&lt;li&gt;can control what your objects return for the repr function by defining the __&lt;code&gt;repr__&lt;/code&gt; method in your class.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category></entry><entry><title>水源PPP板图片下载器</title><link href="/%E6%B0%B4%E6%BA%90PPP%E6%9D%BF%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD%E5%99%A8.html" rel="alternate"></link><updated>2012-06-07T20:14:00+02:00</updated><author><name>mx</name></author><id>tag:,2012-06-07:水源PPP板图片下载器.html</id><summary type="html">&lt;p&gt;这个其实是三月份的时候做的, 当时刚刚学会用urllib和正则表达式做一些爬虫, 于是结合人民群众的需要, 写了个小脚本(福利~) &lt;/p&gt;
&lt;p&gt;不过现在我还只是会照葫芦画瓢那样用urllib, 没什么长进...&lt;/p&gt;
&lt;p&gt;github地址: &lt;a href="https://github.com/X-Wei/yssy_ppp_pic_downloader"&gt;https://github.com/X-Wei/yssy_ppp_pic_downloader&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;p&gt;功能就是下载水源ppperson板里帖子的图片, 并且每个帖子一个文件夹放好. 通过修改main函数可以选择下载最近一页的帖子还是下载全部帖子(或者最近几页的帖子)&lt;/p&gt;
&lt;p&gt;原理很简单, 分析网页的html代码, 用正则表达式找出图片的地址然后下载到本地. 当时我已经写了两三个简单的爬虫, 所以这个写得蛮快, 而且只用50行就搞定了...&lt;/p&gt;
&lt;p&gt;不会用多线程, 只能一张一张下载, 帖子数目实在太多了, 我让它跑了一晚上, 第二天跑完, 下载了8个G的图, 几千个文件夹(囧)......&lt;/p&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;p&gt;不过还是遇到了一些问题, 比较老的帖子会有些图片404, 这时或者这个帖子对应的文件夹为空, 或者里面的图片其实不是图片, 而是出错信息的html代码(虽然看后缀是个图片). 我需要把那些不是图片的文件删掉, 而且要删掉所有的空文件夹. &lt;/p&gt;
&lt;p&gt;删除不是图片的文件(其实应该是删除纯文本文件), 在水源发贴问, 用shell命令(perl)做到了(虽然不明白为什么这样写...):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find yssy_ppp/ -type f | perl -ne 'chomp;unlink "$_" if -T $_'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;关于删除空目录, 发现&lt;code&gt;rmdir&lt;/code&gt;命令就已经可以了, 会删除空文件夹, 非空文件夹不会删除(虽然会显示警告).&lt;/p&gt;
&lt;p&gt;python里面调用shell命令只需要:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;os.system("shell_command")&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;所以, 只需要在程序的最后加上两行:
    os.system('''find yssy_ppp/ -type f | perl -ne 'chomp;unlink "$&lt;em&gt;" if -T $&lt;/em&gt;' ''')
    os.system('rmdir yssy_ppp/*')&lt;/p&gt;
&lt;p&gt;虽然终端里运行时最后会因为那个&lt;code&gt;rmdir&lt;/code&gt;命令出一堆警告, 但是既然功能实现了就懒得改了...&lt;/p&gt;
&lt;p&gt;3.&lt;/p&gt;
&lt;p&gt;还写(改写)过一个人人相册下载的脚本, 不过需要改进, 不知毕业前能不能搞定......&lt;/p&gt;</summary><category term="git"></category><category term="python"></category><category term="shell"></category></entry><entry><title>github上两个比较有用的小项目</title><link href="/github%E4%B8%8A%E4%B8%A4%E4%B8%AA%E6%AF%94%E8%BE%83%E6%9C%89%E7%94%A8%E7%9A%84%E5%B0%8F%E9%A1%B9%E7%9B%AE.html" rel="alternate"></link><updated>2012-05-31T00:00:00+02:00</updated><author><name>mx</name></author><id>tag:,2012-05-31:github上两个比较有用的小项目.html</id><summary type="html">&lt;p&gt;github上的好东西不少, 最近发现了两个比较有用的python程序, 这俩功能都是我比较想要的, 有需求就会有牛人去实现~&lt;/p&gt;
&lt;h1&gt;1. 视频下载器youku-lixian&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/iambus/youku-lixian"&gt;https://github.com/iambus/youku-lixian&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可不止支持下载优酷的视频奥, 土豆, 奇艺, 新浪, 酷6...... 通吃~&lt;/p&gt;
&lt;p&gt;而且每个都只是一个小小的py文件, 直接就可以运行, 比起什么优酷客户端, 奇艺客户端小多了! 太赞了!~&lt;/p&gt;
&lt;h1&gt;2. 115网盘自动摇奖&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/2698830"&gt;https://gist.github.com/2698830&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个功能我曾经想要实现, 但是关于网络通信方面知道的太少了, 搞了一通也没有成功. 现在有人把它共享出来, 代码居然还不到100行, 强大啊~&lt;/p&gt;</summary><category term="git"></category><category term="python"></category></entry></feed>