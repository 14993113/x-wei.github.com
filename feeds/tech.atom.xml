<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>mx's Blog</title><link href="http://x-wei.github.io" rel="alternate"></link><link href="http://x-wei.github.io/feeds/tech.atom.xml" rel="self"></link><id>http://x-wei.github.io</id><updated>2015-10-05T00:00:00+02:00</updated><entry><title>Mindmap of algorithms &amp; data structures</title><link href="http://x-wei.github.io/algo-ds-mindmap.html" rel="alternate"></link><updated>2015-10-05T00:00:00+02:00</updated><author><name>mx</name></author><id>http://x-wei.github.io/algo-ds-mindmap.html</id><summary type="html">&lt;p&gt;Here is a mindmap of the common algorithms and data structures, it can give an overview of the algorithmic terms. This mindmap is drawn using &lt;a href="http://www.xmind.net/"&gt;xmind&lt;/a&gt;.   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="algo-ds-mindmap/Algo%20%26%20DS.png" /&gt;   &lt;/p&gt;
&lt;p&gt;I shell update its content later on. And maybe write some blog entries on some of the items.   &lt;/p&gt;</summary><category term="algorithm"></category></entry><entry><title>numpy: list, array, matrix小结</title><link href="http://x-wei.github.io/list_array_matrix.html" rel="alternate"></link><updated>2015-09-09T00:00:00+02:00</updated><author><name>mx</name></author><id>http://x-wei.github.io/list_array_matrix.html</id><summary type="html">&lt;p&gt;python科学计算包的基础是numpy, 里面的array类型经常遇到. 一开始可能把这个array和python内建的列表(list)混淆, 这里简单总结一下列表(list), 多维数组(np.ndarray)和矩阵(np.matrix)的区别.    &lt;/p&gt;
&lt;h2&gt;list列表&lt;/h2&gt;
&lt;p&gt;列表属于python的三种基本集合类型之一, 其他两种是元组(tuple)和字典(dict). tuple和list区别主要在于是不是mutable的.    &lt;/p&gt;
&lt;p&gt;list和java里的数组不同之处在于, python的list可以包含任意类型的对象, 一个list里可以包含int, string或者其他任何对象, 另外list是可变长度的(list有&lt;code&gt;append&lt;/code&gt;, &lt;code&gt;extend&lt;/code&gt;和&lt;code&gt;pop&lt;/code&gt;等方法).   &lt;/p&gt;
&lt;p&gt;所以, python内建的所谓"列表"其实是功能很强大的数组, 类比一下可以说它对应于java里面的&lt;code&gt;ArrayList&amp;lt;Object&amp;gt;&lt;/code&gt; .    &lt;/p&gt;
&lt;h2&gt;ndarray多维数组&lt;/h2&gt;
&lt;p&gt;ndarray是numpy的基石, 其实它更像一个java里面的标准数组: 所有元素有一个相同数据类型(dtype), 不过大小不是固定的.    &lt;/p&gt;
&lt;p&gt;ndarray对于大计算量的性能非常好, 所以list要做运算的时候一定要先转为array(&lt;code&gt;np.array(_a_list_)&lt;/code&gt;).    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ndarray带有一些非常实用的&lt;a href="http://docs.scipy.org/doc/numpy/reference/arrays.ndarray.html"&gt;函数&lt;/a&gt;, 列举几个常用的: &lt;code&gt;sum, cumsum, argmax, reshape, T, ...&lt;/code&gt;   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ndarray有&lt;a href="http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html#arrays-indexing"&gt;fancy indexing&lt;/a&gt;, 非常实用, 比如: &lt;code&gt;a[a&amp;gt;3]&lt;/code&gt; 返回数组里大于3的元素   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ndarray之间的乘法: 如果用乘法运算符&lt;code&gt;*&lt;/code&gt;的话, 返回的是每个位置元素相乘(类似matlab里面的&lt;code&gt;.*&lt;/code&gt;), 想要矩阵相乘需要用&lt;code&gt;dot()&lt;/code&gt;.   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常见矩阵的生成: &lt;code&gt;ones, zeros, eye, diag, ...&lt;/code&gt;   &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;matrix矩阵&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;matrix是ndarray的子类&lt;/em&gt;, 所以前面ndarray那些优点都保留了.    &lt;/p&gt;
&lt;p&gt;同时, matrix全部都是二维的, 并且加入了一些更符合直觉的函数, 比如对于matrix对象而言, 乘号运算符得到的是矩阵乘法的结果. 另外&lt;code&gt;mat.I&lt;/code&gt;就是逆矩阵...   &lt;/p&gt;
&lt;p&gt;不过应用最多的还是ndarray类型.    &lt;/p&gt;
&lt;p&gt;参考资料:  &lt;br /&gt;
&lt;a href="http://docs.scipy.org/doc/numpy/reference/index.html"&gt;http://docs.scipy.org/doc/numpy/reference/index.html&lt;/a&gt; &lt;br /&gt;
&lt;a href="http://math.mad.free.fr/depot/numpy/base.html"&gt;http://math.mad.free.fr/depot/numpy/base.html&lt;/a&gt; &lt;br /&gt;
&lt;a href="http://stackoverflow.com/questions/4151128/what-are-the-differences-between-numpy-arrays-and-matrices-which-one-should-i-u"&gt;http://stackoverflow.com/questions/4151128/what-are-the-differences-between-numpy-arrays-and-matrices-which-one-should-i-u&lt;/a&gt;   &lt;/p&gt;</summary><category term="python"></category></entry><entry><title>Scrapy 上手笔记</title><link href="http://x-wei.github.io/Scrapy%20%E4%B8%8A%E6%89%8B%E7%AC%94%E8%AE%B0.html" rel="alternate"></link><updated>2015-04-19T00:00:00+02:00</updated><author><name>mx</name></author><id>http://x-wei.github.io/Scrapy 上手笔记.html</id><summary type="html">&lt;p&gt;Scrapy是用来爬取数据的很流行的包, 这里小记一下. 以前几天做的&lt;a href="https://github.com/X-Wei/OneArticleCrawler"&gt;一个爬虫&lt;/a&gt;为例子, 这个爬虫把韩寒一个app的前九百多期的文章抓了下来. &lt;/p&gt;
&lt;h2&gt;I. installation&lt;/h2&gt;
&lt;p&gt;scrapy的安装参考: &lt;a href="http://scrapy-chs.readthedocs.org/zh_CN/latest/topics/ubuntu.html"&gt;http://scrapy-chs.readthedocs.org/zh_CN/latest/topics/ubuntu.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(直接pip安装的好像缺少什么包)&lt;/p&gt;
&lt;h2&gt;II. prerequisite&lt;/h2&gt;
&lt;h3&gt;XPath&lt;/h3&gt;
&lt;p&gt;需要学习scrapy首先需要会XPath, 这是一种方便与在html/xml文档里查找所需元素的语句. 这个还是很好学的, 其实只需要花一刻钟时间看看w3school的&lt;a href="http://www.w3school.com.cn/xpath/"&gt;教程&lt;/a&gt;, 就可以掌握够用的知识进行下一步了. &lt;/p&gt;
&lt;p&gt;这里总结一下我觉得会用到的语句(不全, 不过经常用到): &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;//book&lt;/code&gt;    选取所有名字叫做book的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bookstore/book&lt;/code&gt; 选取bookstore的子元素中所有叫book的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;//title[@lang='eng']&lt;/code&gt; 选取lang属性为"eng"的所有title元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;//titile/text()&lt;/code&gt; 选取title元素的文字内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;descendant-or-self::text()&lt;/code&gt;: 选取自己或者所有后代节点的文字内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外还有个在线测试XPath语句的网站, 可以用这个测试XPath语句: &lt;/p&gt;
&lt;p&gt;&lt;a href="http://xpath.online-toolz.com/tools/xpath-editor.php"&gt;http://xpath.online-toolz.com/tools/xpath-editor.php&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;审查元素&lt;/h3&gt;
&lt;p&gt;再一个就是要用chrome的"审查元素"功能, 用这个功能可以看到想查找的网页内容对应在html文件的位置, 甚至可以直接右键复制想要的元素的XPath......(不过有时候并不是最合理的, 所以刚才XPath也不是白学...)&lt;/p&gt;
&lt;h2&gt;III. scrapy shell&lt;/h2&gt;
&lt;p&gt;网上的教程一般是从一个&lt;a href="http://doc.scrapy.org/en/latest/intro/tutorial.html"&gt;tutorial&lt;/a&gt;开始的, 介绍了一个小项目, 但是我觉得从scrapy shell开始应该更合理, 有时候甚至没必要建立一个工程, 在这个shell里就可以抓到想要的数据. &lt;/p&gt;
&lt;p&gt;启动的办法很简单: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中&lt;code&gt;url&lt;/code&gt;就写想要爬取的一个网址. &lt;/p&gt;
&lt;p&gt;这个shell简单说来, 就是一个测试爬虫的交互环境, 除了&lt;em&gt;多了一些特殊变量和函数&lt;/em&gt;, 就是一个普通的(i)python shell. &lt;/p&gt;
&lt;p&gt;先说两个scrapy shell多出来的变量: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;response&lt;/code&gt;: 把启动的&lt;code&gt;url&lt;/code&gt;抓取后得到的&lt;code&gt;Response&lt;/code&gt;对象, 比如 &lt;code&gt;response.body&lt;/code&gt;就包含了抓取来的html内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sel&lt;/code&gt;: 用刚刚抓取的内容建立的一个&lt;code&gt;Selector&lt;/code&gt;对象, 简单理解, Selector对象可以让我们执行XPath语句提取想要的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经常的用法就是用&lt;code&gt;response&lt;/code&gt;对象查看爬取的情况(&lt;code&gt;response.status&lt;/code&gt;), 用&lt;code&gt;sel&lt;/code&gt;对象测试XPath的正确:
&lt;code&gt;sel.xpath("xpath_statement").extract()&lt;/code&gt; 会在获取的response.body里用xpath查找并提取内容. &lt;/p&gt;
&lt;p&gt;再说两个scrapy shell添加的函数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fetch(request_or_url)&lt;/code&gt;: 修改请求或者网址, 这样scrapy shell会从新用这个request/url抓取数据, 相应的sel和response等对象也会自动更新. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;view(response)&lt;/code&gt;: 在浏览器里查看刚刚抓取的内容.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里举个例子, 抓取一个的文章标题: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;    &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;scrapy&lt;/span&gt; &lt;span class="nx"&gt;shell&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://wufazhuce.com/one/vol.921#articulo&amp;#39;&lt;/span&gt;
    &lt;span class="nx"&gt;......&lt;/span&gt;
    &lt;span class="k"&gt;In&lt;/span&gt; &lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;: response.status
    Out&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;: 200
    In &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;: sel.xpath(&amp;#39;//*&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tab-articulo&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;/div/h2/text()&amp;#39;).extract()
    &lt;span class="nt"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;:1: ScrapyDeprecationWarning: &amp;quot;sel&amp;quot; shortcut is deprecated. Use &amp;quot;response.xpath()&amp;quot;, &amp;quot;response.css()&amp;quot; or &amp;quot;response.selector&amp;quot; instead
    Out&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;: &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n\t\t\t\t\t\t\u78b0\u4e0d\u5f97\u7684\u4eba\t\t\t&lt;/span&gt;&lt;span class="s1"&gt;  &lt;/span&gt;&lt;span class="se"&gt;\t\t&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
    In &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;: print sel.xpath(&amp;#39;//*&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tab-articulo&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;/div/h2/text()&amp;#39;).extract()&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;

                            碰不得的人
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;scrapy shell的完整文档在: 
&lt;a href="http://doc.scrapy.org/en/latest/topics/shell.html"&gt;http://doc.scrapy.org/en/latest/topics/shell.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;IV. scrapy project&lt;/h2&gt;
&lt;p&gt;接下来说建立scrapy工程, 这个按照tutorial走就好了. 
建立工程: 
&lt;code&gt;scrapy startproject my_proj&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;会新建一个my_proj文件夹, 里面的结构是: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt; 
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;my_proj&lt;/span&gt;
    &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;
    &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;my_proj&lt;/span&gt;
        &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
        &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
        &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;pipelines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
        &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
        &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;spiders&lt;/span&gt;
            &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;要修改的文件主要有两个: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;items.py&lt;/code&gt; 定义要抓取的数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spiders/xxx.py&lt;/code&gt; 定义自己的爬虫&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1. 自定义爬虫&lt;/h3&gt;
&lt;p&gt;先定义爬虫, 在spiders文件夹里面, 新建一个python文件, 这里定义一个&lt;code&gt;scrapy.spider.Spider&lt;/code&gt;的子类: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OneSpider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spider&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Spider&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;one_spider&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;start_urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://wufazhuce.com/one/vol.&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;#articulo&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;924&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;title_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;//*[@id=&amp;quot;tab-articulo&amp;quot;]/div/h2/text()&amp;#39;&lt;/span&gt; 
        &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里, Spider子类一定需要定义三个东西: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;：　 是爬虫的名字, 一会爬取的时候需要&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start_urls&lt;/code&gt;:　启动时进行爬取的url列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parse()&lt;/code&gt; 方法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;爬虫启动的时候会把每一个start_urls里的网址下载, 生成的&lt;code&gt;Response&lt;/code&gt;对象会传入这个&lt;code&gt;parse()&lt;/code&gt;方法, 这个方法负责解析返回的&lt;code&gt;Response&lt;/code&gt;对象, 提取数据(生成item)以及生成需要进一步处理的URL的 Request 对象等...&lt;/p&gt;
&lt;h3&gt;2. 保存抓取的信息到item&lt;/h3&gt;
&lt;p&gt;刚才只是做到了抓取需要的信息, 还没有能够保存到文件里, 下面要将抓取的信息做成一个&lt;code&gt;Item&lt;/code&gt;保存.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;首先定义要保存的信息:&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;修改items.py文件, 里面定义一个&lt;code&gt;scrapy.Item&lt;/code&gt;的子类:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OnearticleItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# define the fields for your item here like:&lt;/span&gt;
    &lt;span class="n"&gt;vol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个文件很简单, 只是说明一下要抓取的信息, 他们都是&lt;code&gt;scrapy.Field()&lt;/code&gt;, 这个东西类似一个字典.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;然后在爬虫里保存item:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了保存抓取的内容, 在parse()方法里, 得到需要的数据以后, 新建一个&lt;code&gt;OnearticleItem&lt;/code&gt;, 把抓到的内容放进这个item里, 然后返回这个item即可. &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;nb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;\d+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;title_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;//*[@id=&amp;quot;tab-articulo&amp;quot;]/div/h2/text()&amp;#39;&lt;/span&gt; 
    &lt;span class="n"&gt;author_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;//*[@id=&amp;quot;tab-articulo&amp;quot;]/div/p/text()&amp;#39;&lt;/span&gt; 
    &lt;span class="n"&gt;content_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;//div[@class=&amp;quot;articulo-contenido&amp;quot;]/descendant-or-self::text()&amp;#39;&lt;/span&gt; 
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;nb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;
    &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OnearticleItem&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;vol&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nb&lt;/span&gt;
    &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
    &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;
    &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3. 运行爬虫&lt;/h3&gt;
&lt;p&gt;以上的文件修改好了以后, 只需&lt;em&gt;在命令行里&lt;/em&gt;启动爬虫即可, 这时候就用到了刚才定义的spider的&lt;code&gt;name&lt;/code&gt;属性:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$scrapy crawl one_spider -o one.csv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;大约几分钟功夫, 九百多篇文章就放到了one.csv文件里~&lt;/p&gt;</summary><category term="python"></category><category term="scrapy"></category></entry><entry><title>运筹的力量: 用线性规划解决Google 2014 HashCode问题</title><link href="http://x-wei.github.io/%E8%BF%90%E7%AD%B9%E7%9A%84%E5%8A%9B%E9%87%8F:%20%E7%94%A8%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92%E8%A7%A3%E5%86%B3Google%202014%20HashCode%E9%97%AE%E9%A2%98.html" rel="alternate"></link><updated>2015-02-02T00:00:00+01:00</updated><author><name>mx</name></author><id>http://x-wei.github.io/运筹的力量: 用线性规划解决Google 2014 HashCode问题.html</id><summary type="html">&lt;p&gt;INF580(programmation par contraintes) 大概是在X学到的最有用的一门课, 它让我能够用把运筹学(MAP557)里学到的东西和计算机结合起来: 用电脑的力量解决(大规模)运筹问题. &lt;/p&gt;
&lt;p&gt;这门课的projet是去年巴黎谷歌举行的一个比赛的题目: 最优化谷歌街景拍照小车的路线. 做这个projet的三周里, 我和Manu从一开始信心满满, 到中间一筹莫展, 再到后来柳暗花明, 以及最后乘胜追击终于在今晚得到了近乎完美的解答, 非常精彩, 这里特意一记.&lt;/p&gt;
&lt;h1&gt;问题描述&lt;/h1&gt;
&lt;p&gt;谷歌那次比赛的题目在这里(我们做的是Main Round的题目): &lt;a href="https://sites.google.com/site/hashcode2014/tasks"&gt;https://sites.google.com/site/hashcode2014/tasks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单来说, 就是已知巴黎的道路信息, 设法用八辆车(每辆车的行驶时间有限)从巴黎谷歌出发, 尽可能多的走遍巴黎的所有街道, 参赛者给出这些车的路线, 他们的分数就是这八辆车走过的街道的长度之和(重复走的街道不算分). &lt;/p&gt;
&lt;p&gt;去年四月份我们也参加了这个比赛, 不过当时纠结于如何设计每辆车的路线, 最后只是用了贪心算法, 再加上一点点的随机, 得到的结果并不好... 当时ENS的人包揽了前三名, 而且比赛后进一步把分数刷到了满分: 他们的路线可以把所有街道都跑遍. &lt;/p&gt;
&lt;p&gt;这学期学了INF580以后, 手里有了&lt;strong&gt;JaCoP&lt;/strong&gt;以及&lt;strong&gt;AMPL&lt;/strong&gt;等"重型武器", 我们经过一番努力也得到了满分, 而且用了几乎最少的时间. 代码放在了: &lt;a href="https://github.com/X-Wei/INF580_HashCode2014"&gt;https://github.com/X-Wei/INF580_HashCode2014&lt;/a&gt; (里面还有个pdf的报告, 比这篇博客里说的精炼).&lt;/p&gt;
&lt;h1&gt;I. 初步建模&lt;/h1&gt;
&lt;h2&gt;线性规划(LP)模型&lt;/h2&gt;
&lt;p&gt;站在一个更高的角度上考虑这个问题, 从一个线性规划的角度看, 给定一个图&lt;code&gt;G(V,E)&lt;/code&gt;, 目标是最大化走过的街道长度, 如果用对每条街道&lt;code&gt;e&lt;/code&gt;, 定义一个&lt;code&gt;x_e&lt;/code&gt;,: 当一条街被经过的时候使它为1, 否则为0, 那么目标函数就是一个x的线性组合(系数就是对应街道的长度). &lt;/p&gt;
&lt;p&gt;但是如果一条街被经过了大于一次, &lt;code&gt;x_e&lt;/code&gt;也只能是1, 所以再引入一个变量&lt;code&gt;y_e&lt;/code&gt;: 用来表示一条街被经过的&lt;strong&gt;次数&lt;/strong&gt;. 所以&lt;code&gt;x_e&lt;/code&gt;可以看成是&lt;code&gt;y_e&lt;/code&gt;的indicatrice函数: &lt;img alt="" src="./运筹的力量_用LP解决Google_2014_Hashcode/equation.png" /&gt;, 这一点可以通过增加线性约束: &lt;code&gt;x_e&amp;lt;=y_e&lt;/code&gt; 即可实现, 因为&lt;code&gt;x_e&lt;/code&gt;的取值范围是{0,1}. &lt;/p&gt;
&lt;p&gt;不过一条街可能从两个方向被经过(&lt;code&gt;G&lt;/code&gt;里面的边是有向的), 如果&lt;code&gt;e&lt;/code&gt;'代表反方向的&lt;code&gt;e&lt;/code&gt;, 那么还应该增加约束:  &lt;code&gt;x_e+x_e'&amp;lt;=1&lt;/code&gt; 就好了. &lt;/p&gt;
&lt;p&gt;接下来&lt;code&gt;y&lt;/code&gt;要满足的就是所有的&lt;code&gt;y&lt;/code&gt;要组成一个&lt;em&gt;路径(path)&lt;/em&gt;, 对于既不是起点又不是终点的一个节点&lt;code&gt;v&lt;/code&gt;, 还是很好写的, 类似flot: &lt;code&gt;sum(进入v的y_e) = sum(从v流出的y_e)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;对于起点&lt;code&gt;v_start&lt;/code&gt;来说, 其实也不难: &lt;code&gt;sum(进入v_start的y_e) = sum(从v-start流出的y_e)+1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;但是对于终点的话, 有个问题是我们不知道车会停在哪里! Manu太聪明了, 对每一个节点&lt;code&gt;v&lt;/code&gt;引入了另一个变量&lt;code&gt;f_v&lt;/code&gt;,取值范围也是{0,1}, 如果在节点&lt;code&gt;v&lt;/code&gt;停下来, 那么&lt;code&gt;f_v&lt;/code&gt;等于1, 否则就是0. 所以上面的约束可以写成: &lt;code&gt;sum(进入v的y) = sum(从v流出的y_e)+f_v&lt;/code&gt;. 另外别忘了只能停在一个节点, 所以再加约束: &lt;code&gt;sum(所有的f_v)=1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;以上的目标函数以及约束, 虽然数目庞大, 但是都是线性的, 所以是一个整数线性规划问题, 写成数学形式就是: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./运筹的力量_用LP解决Google_2014_Hashcode/pasted_image001.png" /&gt;&lt;/p&gt;
&lt;h2&gt;从solution得到路径&lt;/h2&gt;
&lt;p&gt;一旦上面那个线性规划问题解决了, 我们得到的将会是那些变量&lt;code&gt;x&lt;/code&gt;,&lt;code&gt;y&lt;/code&gt;,以及&lt;code&gt;f&lt;/code&gt;, 但是需要从中提取一条路径最后才能作为solution!! &lt;/p&gt;
&lt;p&gt;这个问题实际上可以归结为: 给定一个一笔画的曲线(其实就是那些&lt;code&gt;y&lt;/code&gt;: 可以想象把每条边都复制&lt;code&gt;y&lt;/code&gt;次, 得到的就是这么一个曲线了), 找出一个可以将其一笔画出来的路径(这条路径也叫"欧拉路径", 没"汉密尔顿路径"有名). 聪明的Manu很快想出来一个算法(我们叫它"Orsini算法"): 大意是当走到底没有走完的时候, 把那些错过的路径夹在原路径的中间就好了. &lt;/p&gt;
&lt;p&gt;算法描述如下: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;i) 从起点开始出发走, 把走过的边涂上颜色(以后不能再走), 只要还可以继续走(还有没有着色的边可走)就一直走下去, 一直到无路可走. (应该会停在&lt;code&gt;f=1&lt;/code&gt;的地方), 得到路径&lt;code&gt;p0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;ii)  如果所有边已经被走过了: &lt;strong&gt;over&lt;/strong&gt;. 如果没有: 找一个没有走过的边与&lt;code&gt;p0&lt;/code&gt;的交叉点: &lt;code&gt;v&lt;/code&gt;(如果找不到的话说明有问题: 后面就遇到这个问题了), 然后执行(iii)&lt;/p&gt;
&lt;p&gt;iii) 从&lt;code&gt;v&lt;/code&gt;出发, 在进行类似(i)的操作得到一条路径(应该是一个环), 然后把&lt;code&gt;p0&lt;/code&gt;从&lt;code&gt;v&lt;/code&gt;那里劈开, 把这个环塞到中间组成新的&lt;code&gt;p0&lt;/code&gt;, 然后再执行(ii).  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样就可以得到对应的路径了. &lt;/p&gt;
&lt;h2&gt;一开始的想法&lt;/h2&gt;
&lt;p&gt;以上的建模是针对一辆车的, 我们一开始的想法是: 对一辆车进行这个操作, 得到结果以后更新一下&lt;code&gt;G&lt;/code&gt;(把那些已经走过的街道的长度设为0, 然后再走下一辆车... 这样跑8次就能得到最优解了. &lt;/p&gt;
&lt;p&gt;一切看起来&lt;em&gt;似乎&lt;/em&gt;都非常完美......&lt;/p&gt;
&lt;h1&gt;II.遇到的问题&lt;/h1&gt;
&lt;h2&gt;计算能力问题&lt;/h2&gt;
&lt;p&gt;写好了AMPL的程序以后, 我们遇到的第一个问题是: 这么大的问题, 一般电脑算不出来(曾经用glpk让电脑跑了一夜, 还是没有得到结果). &lt;/p&gt;
&lt;p&gt;后来问老师, 老师说glpk并不是非常高效的求解器, 然后推荐给了我们一个非常给力的网站: &lt;a href="http://neos-server.org/neos/"&gt;NEOS&lt;/a&gt; ! 这个网站可以让人上传AMPL程序, 然后用它们的服务器跑, 而且使用的求解器也是商用的, 比开源求解器快的不是一个数量级(我们发现最快的求解器是&lt;em&gt;Gurobi&lt;/em&gt;, 十分给力). &lt;/p&gt;
&lt;p&gt;这样一来计算的问题就解决了, 但是我们很快发现一个更严重的问题, 是我们的建模里的一个严重缺陷...&lt;/p&gt;
&lt;h2&gt;subtour问题&lt;/h2&gt;
&lt;p&gt;我们兴冲冲的拿NEOS的结果跑Orsini算法的时候, 发现总是报错: 也就是在第二步, 程序无法找到一个和&lt;code&gt;p0&lt;/code&gt;有交叉点的边: &lt;em&gt;也就意味着我们的模型得到的路径并不是只有一个connected component!!! &lt;/em&gt;也就是说, 我们得到的解其实是一条从起点到某个终点的路径, 外加很多和这个路径没有交点的圈圈(subtour)!&lt;/p&gt;
&lt;p&gt;是啊, 这个问题很类似旅行商问题(TSP), 而TSP的困难之一 就是要解决subtour的话需要加入2^n个新的约束.... 2^10000个约束? impossible...&lt;/p&gt;
&lt;h1&gt;III. subtour问题的"解决"&lt;/h1&gt;
&lt;h2&gt;各种纠结&lt;/h2&gt;
&lt;p&gt;在一次PC上有一道题目介绍了TSP subtour问题的一种建模方式, "potentiel"建模, 可以防止加入2^n个约束: 为每个节点&lt;code&gt;v&lt;/code&gt;引入新的变量&lt;code&gt;u_v&lt;/code&gt;,&lt;code&gt;u_v&lt;/code&gt;代表了节点&lt;code&gt;v&lt;/code&gt;被访问的顺序, 约束做的非常巧妙, 是这样的: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./运筹的力量_用LP解决Google_2014_Hashcode/pasted_image002.png" /&gt;&lt;/p&gt;
&lt;p&gt;这样, 当&lt;code&gt;x_ij&lt;/code&gt;是1的时候, 就保证&lt;code&gt;u_j&lt;/code&gt;比&lt;code&gt;u_i&lt;/code&gt;大1, 而当&lt;code&gt;x_ij&lt;/code&gt;是0的时候, 这个约束则非常松弛, 几乎相当于没有. &lt;/p&gt;
&lt;p&gt;不过这个方法套到我们这个projet的话也有问题: 那就是每个节点只能有一个&lt;code&gt;u_v&lt;/code&gt;, 所以每个节点只能最多访问一次.... 不过我们很快想到了办法: 把所有节点复制一个(复制"一层"), 然后每条边的话也进行复制, 同时加上那些连接各层的边. &lt;/p&gt;
&lt;p&gt;举个例子, 原来的一条边是: &lt;code&gt;(u, v)&lt;/code&gt;, 我们复制了一层, 这些新节点叫它们&lt;code&gt;u',v&lt;/code&gt;',... 那么在这个两层的图里, 我们要把原来的这条边变成4条: &lt;code&gt;(u, v)&lt;/code&gt;, &lt;code&gt;(u, v')&lt;/code&gt;, &lt;code&gt;(u', v)&lt;/code&gt; 和 &lt;code&gt;(u', v')&lt;/code&gt;. 这样就可以保证路径可以经过一个点两次了, 如果想要保证可以经过一个点K次, 只要做K层就好了(每条边变成K^2条). &lt;/p&gt;
&lt;p&gt;然后, &lt;code&gt;x&lt;/code&gt;也不需要了, 因为每条边的&lt;code&gt;y&lt;/code&gt;最大就是1. 但是还有一个问题是目标函数, 由于一条边变成了四条, 如果走四遍的话就多算了四次这条边的长度... 有两种解决办法: 一是类似前面的方法, 给每条边指定定一个indicatrice, 这样就不会重复了, 还有一种更简单的办法是, 在四条边里, 只取一条边的长度保持不变, 其他长度都设成0, 算法自然会优先走那条长度不是0的边(这个没有仔细证明, 不过貌似是这样的). 我们采用了第二个办法.... &lt;/p&gt;
&lt;p&gt;就这样废了好大功夫, 写好了两层节点的程序, 送去NEOS一跑.... 超时了(超过8h后NEOS会自动停止求解过程)... 后来我们发现即使是不多加新一层的程序, 也会超时. 那节PC里也说, 这种建模方法实际上计算效率比加入2^N个约束的建模还要差... &lt;/p&gt;
&lt;p&gt;所以总结一下就是: 问题还是没有解决...&lt;/p&gt;
&lt;h2&gt;绕过subtour问题&lt;/h2&gt;
&lt;p&gt;就在一筹莫展之际, Manu提议把搜索的范围缩小: 不用整个巴黎的数据, 只取起点附近的区域, 这样的话, 说不定我们原先的模型得到的结果会少一点connected components... 试了一下, 果然! 虽然没有强制要求路径的连通性, 得到的结果确实(几乎)只有一个联通分支! &lt;/p&gt;
&lt;p&gt;后来就想到了一个很聪明的办法: 用八倍的T作为时间限制, 让一辆车去跑, 由于时间很充分, 我们得到的解应该不太会出现多个联通分支, 然后一旦得到了这个路径(后来我们叫它"big path"), 只需要把它分成8段, 每辆车先从起点(巴黎谷歌)跑到每一段的开头, 然后沿着这条路跑就好了啊!! 虽然从巴黎谷歌跑到每一段的起点会稍微浪费一些时间, 但是这点损失其实微不足道!! 而且也不用跑8次LP这么麻烦了 -- 要是早点想到这个就好了!!&lt;/p&gt;
&lt;p&gt;而且很神奇的是, 把时间变成了8T以后, 我们的Lp模型计算的更快了: 原先要计算30分钟左右, 现在只要差不多3分钟就出结果了!! 这一点没太想明白, 可能是搜索的空间变小了??&lt;/p&gt;
&lt;p&gt;说写就写, 最短路径用Dijkstra算法就能得到了, 不一会就写出了这个把一条big path变成8条small path的程序. 然后我们一举得到了1957596分(离满分还差了两千米左右)!!&lt;/p&gt;
&lt;h1&gt;IV. 进一步优化&lt;/h1&gt;
&lt;p&gt;优化的话有两个方向: 第一个方向是修改那个程序代码, 使得每次走到big path某段起点的时候可以少走些路, 不过这个方向应该没什么前途: 程序写起来麻烦不说, 可以改进的空间也很有限, 因为big path一共也没有剩多少时间, 所以八辆车是不可能把big path走完的. 第二个方向则是设法优化big path的时间使用, 使得它在得到最长路径的同时使用尽量少的时间. &lt;/p&gt;
&lt;h2&gt;引入时间正则项&lt;/h2&gt;
&lt;p&gt;其实8T作为时间来说非常充裕, 但是我们的解里面, big path还是把时间用的差不多了: 因为时间根本没有出现在目标函数里. 所以, 可以把时间也作为目标函数加上去, 不过要注意最优先要优化的还是路径长度, 所以时间项前面要乘以一个非常小的数(比如0.000001), 类似做regularization. &lt;/p&gt;
&lt;p&gt;所以新的目标函数是: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./运筹的力量_用LP解决Google_2014_Hashcode/pasted_image003.png" /&gt;&lt;/p&gt;
&lt;p&gt;这样一运行, 我们的big path居然剩下了六千多秒的时间!!! 这些时间足够八辆车跑到各段的起点了!! 我们这样, 八辆车走完了big path所有的路程得到的结果离满分只差了7米, 而最后一辆车还有两千多秒没有走! &lt;/p&gt;
&lt;p&gt;检查了一下, 发现有一个7米长的路是唯一剩下没走过的路: 于是只要再让最后一辆车去走一下就好了(因为时间够用), 最终我们的方案走完了整个巴黎:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./运筹的力量_用LP解决Google_2014_Hashcode/pasted_image005.png" /&gt;&lt;/p&gt;
&lt;p&gt;等一下, 这里有点奇怪: 为什么优化得到的结果并不是最优的(没有走完所有的路程)? 我们通过后来手动走那条剩下的路都没有超时, 所以说其实肯定可以在8T的时间走遍所有街道的! 后来查了一下才发现, 原来Gurobi并不是返回最优解, 而是当当前可行解与最优解足够接近的时候就直接停止, 这个参数的名字叫mipgap, 更多参数可以参考这里: &lt;a href="http://www.gurobi.com/documentation/6.0/ampl-gurobi-guide/parameters"&gt;http://www.gurobi.com/documentation/6.0/ampl-gurobi-guide/parameters&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;这也就解释了为什么NEOS得到的解不是最优的, 不过还好, 通过最后手动添加那条没走的边, 还是走完了所有的街道. &lt;/p&gt;
&lt;p&gt;............&lt;/p&gt;
&lt;p&gt;只是作为强迫症的话觉得还是有点......不够完美.&lt;/p&gt;
&lt;h2&gt;直接优化时间&lt;/h2&gt;
&lt;p&gt;今晚, 机智的Manu想到了解决办法: 既然知道所有的街道都会被走遍, 直接不把它看成目标, 而是直接作为约束好了, 然后约束直接改成优化时间! &lt;/p&gt;
&lt;p&gt;要就经过所有街道的约束很简单, 那就是对任何街道&lt;code&gt;e&lt;/code&gt;, 都有: &lt;code&gt;y_e+y_e'&amp;gt;=1&lt;/code&gt;. 另外肯定所有街道都会经过, &lt;code&gt;x&lt;/code&gt;就没有必要存在了. &lt;/p&gt;
&lt;p&gt;LP模型表达为: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./运筹的力量_用LP解决Google_2014_Hashcode/pasted_image004.png" /&gt;&lt;/p&gt;
&lt;p&gt;用这样的模型, 我们的big path 省下了一万两千多秒, 所以我们的最终结果里, 最后的一辆车跑完以后还有9596秒没有用!!&lt;/p&gt;
&lt;p&gt;到这一步, 真的可以算是完美解决这个问题了, 而且强迫症也得救了. &lt;/p&gt;
&lt;p&gt;Yeah!  : )&lt;/p&gt;</summary><category term="LP"></category><category term="算法"></category></entry><entry><title>一个简单的python进度条</title><link href="http://x-wei.github.io/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84python%E8%BF%9B%E5%BA%A6%E6%9D%A1.html" rel="alternate"></link><updated>2014-08-14T00:00:00+02:00</updated><author><name>mx</name></author><id>http://x-wei.github.io/一个简单的python进度条.html</id><summary type="html">&lt;p&gt;在处理大量数的时候, 如果输出类似 "process i out of n files..." 这样的内容来指示进度的话, 虽然可以显示目前的进度(用来安慰等待的心情...)但有个问题是, 如果输出了太多行(比如一万行...), 就看不到前面的内容了... &lt;/p&gt;
&lt;p&gt;所以想找一个命令行下面的进度条, 其实python已经有了(不止一个)进度条的包了, 比如&lt;a href="https://pypi.python.org/pypi/progressbar/2.3-dev"&gt;progressbar&lt;/a&gt;, 但是不知为什么这个包在windows下面没有能做到刷新显示 -- 就是刷新进度的时候, 没有把原先那一行去掉, 而是在下面再输出了一行... (不过后来在linux下面使用这个包是没问题的, 好奇怪...)&lt;/p&gt;
&lt;p&gt;所以想办法自己写了一个, 发现要实现一个简单的进度条还是很简单的, 关键就是使用&lt;code&gt;\r&lt;/code&gt;, 这样会把光标移动到当前行的开头: 这样下次输出的时候就会把原先的内容冲掉了. &lt;/p&gt;
&lt;p&gt;代码只有不到二十行: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SimpleProgressBar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="c"&gt;# `x`: progress in percent ( between 0 and 100)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;pointer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="si"&gt;%d%%&lt;/span&gt;&lt;span class="s"&gt; [&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;]&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pointer&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用法也很简单, 先新建一个SimpleProgressBar对象, 在要更新进度条的时候, 调用update方法即可...&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;# An example of usage...&lt;/span&gt;
&lt;span class="n"&gt;pb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SimpleProgressBar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;301&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再吐槽一下windows, 不仅那个progressbar的包不好使, multiprocessing的包也不好使, 郁闷... &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[08-15补充]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;后来想到, 既然用&lt;code&gt;\r&lt;/code&gt;就可以实现刷新当前行, 还要用毛的进度条啊.... 直接这样写就好了:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;301&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;processing &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; out od &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; items...&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;301&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意print最后要加逗号 否则就换行了...&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>正则表达式入门简介</title><link href="http://x-wei.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B.html" rel="alternate"></link><updated>2014-08-01T00:00:00+02:00</updated><author><name>mx</name></author><id>http://x-wei.github.io/正则表达式入门简介.html</id><summary type="html">&lt;p&gt;以前虽然也用过正则表达式(比如那个饮水思源的&lt;a href="http://x-wei.github.io/%E6%B0%B4%E6%BA%90PPP%E6%9D%BF%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD%E5%99%A8.html"&gt;PPP版图片下载器&lt;/a&gt;...)但是那时候基本上是网上到处搜 然后把代码拿过来改, 没有系统的学过这个东西. 前一段实习一开始的时候要处理很大量的文本, 从文本里提取出需要的信息, 所以用到了不少的正则表达式, 也好好的学了一下, 现在回来进行一下总结. &lt;/p&gt;
&lt;h2&gt;什么是正则表达式&lt;/h2&gt;
&lt;p&gt;很多时候,我们需要在文本里寻找满足一种&lt;strong&gt;模式&lt;/strong&gt;(&lt;em&gt;pattern&lt;/em&gt;)的一段子字符串(substring), 注意是一种模式而不是某一个具体的字符串. 举个例子, 在一段文本里寻找这里面出现的所有的网址, 那么对应的模式就是: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"以&lt;code&gt;www.&lt;/code&gt;开头, 中间有一些东西(可以是字母也可以是数字等), 最后以 &lt;code&gt;.com/.org/.edu...&lt;/code&gt; 结尾的所有的字符串"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再比如, 要查找文本中出现的电话号码, 电话号码的格式是区号加横线再加号码, 那么模式就应该是:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"以3个或4个数字开头, 三个或四个数字之后跟一个横线, 横线后再跟7个或8个数字"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再再比如, 要查找出现的电子邮件地址, 那么模式大概是:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"以字母或数字或下划线开头, 之后跟着一个@符号, @符号以后一些用点分隔的字母或数字, 最后应该以.com/.org/.edu等结束"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以想象实际应用中会有描述起来更加罗嗦的模式, 而&lt;strong&gt;正则表达式就是用来描述这种"模式"的语法&lt;/strong&gt;, 使用正则表达式, 可以用很简短的代码表达很复杂的模式. 有人给正则表达式起了个别名叫"&lt;em&gt;字符串模板&lt;/em&gt;", 其实更贴切... &lt;/p&gt;
&lt;p&gt;还有, 后面总是会提到"某个正则表达式&lt;em&gt;exp&lt;/em&gt;匹配(match)了某个字符串&lt;em&gt;str&lt;/em&gt;", 这里说&lt;strong&gt;"匹配"&lt;/strong&gt;的意思其实是&lt;em&gt;"字符串str满足了正则表达式exp描述的那种模式"&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;关于正则表达式, &lt;a href="http://deerchao.net/tutorials/regex/regex.htm"&gt;这篇博客&lt;/a&gt;可以说是经典之作, 搜索"正则表达式"这篇文章几乎都是第一个被找到的. 每次我有问题都要再翻出来看一下这篇, 讲的非常好. &lt;/p&gt;
&lt;p&gt;另外强烈推荐一个非常赞的在线测试正则表达式的网站: &lt;a href="http://regex101.com/"&gt;http://regex101.com/&lt;/a&gt; 做得超级棒(具体怎么棒见后文).&lt;/p&gt;
&lt;h2&gt;匹配单个字符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;匹配某个&lt;em&gt;特定的&lt;/em&gt;字符:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只需要写出来就好了, 类似于记事本的查找功能. 
ex. 查找"abc"这个字符串, 正则表达式就是: &lt;code&gt;abc&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配&lt;em&gt;某一类&lt;/em&gt;字符:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如匹配数字, 只需要把候选的字符放进&lt;strong&gt;中括号&lt;/strong&gt;, 而且可以用横线表示一系列的字符:&lt;/p&gt;
&lt;p&gt;ex. 匹配一个数字: &lt;code&gt;[0-9]&lt;/code&gt;
ex. 匹配大写的一个字母: &lt;code&gt;[A-Z]&lt;/code&gt;
ex. 匹配一个数字或字母(大小写都可以): &lt;code&gt;[A-Za-z0-9]&lt;/code&gt;
ex. 匹配一个元音字母(aeiou中的一个): [aeiou]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配某一类以外的字符:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这一类字符前面加上&lt;code&gt;^&lt;/code&gt;, 起到的作用就是取这些字符的补集(&lt;strong&gt;"反义"&lt;/strong&gt;).
ex. 匹配一个不是数字的字符: &lt;code&gt;[^0-9]&lt;/code&gt;
ex. 匹配任意一个不是元音字母的字符: &lt;code&gt;[^aeiou]&lt;/code&gt;
ex. 匹配以b开头, 以d结尾的三个字母长的单词: &lt;code&gt;b[a-z]d&lt;/code&gt;, "bed", "bad"都满足这个条件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配正则表达式中用到的的特殊字符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如要匹配'^'这个字符, 由于这个字符是正则表达式里使用的有特殊含义的字符, 需要在前面加&lt;strong&gt;反斜杠转义&lt;/strong&gt;: &lt;code&gt;\^&lt;/code&gt;
类似的特殊字符还有不少:  &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt;,......&lt;/p&gt;
&lt;h2&gt;匹配任意字符&lt;/h2&gt;
&lt;p&gt;用的最多的是这一个:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配除了换行符以外的任意字符: &lt;code&gt;.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(在开启"单行模式"的时候, 可以连换行符一起匹配, 见后文.)&lt;/p&gt;
&lt;p&gt;然后, 在反斜杠后面加某些字母的时候有特殊含义(&lt;strong&gt;"元字符"&lt;/strong&gt;): &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配字母或数字或下划线或汉字: &lt;code&gt;\w&lt;/code&gt;(用前面的&lt;code&gt;[A-Za-z0-9]&lt;/code&gt;之类的方法也可以做到)&lt;/li&gt;
&lt;li&gt;匹配任意空白字符(空格或TAB): &lt;code&gt;\s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;匹配任意数字: &lt;code&gt;\d&lt;/code&gt;(用前面的&lt;code&gt;[0-9]&lt;/code&gt;也可以做到)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;把上面这些反斜杠加小写字母变成反斜杠加&lt;em&gt;大写字母&lt;/em&gt;的话, 成了取补集(类似前面那个&lt;code&gt;^&lt;/code&gt;的作用)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配任意不是字母，数字，下划线，汉字的字符: &lt;code&gt;\W&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;匹配任意不是空白符的字符: &lt;code&gt;\S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;匹配任意非数字的字符: &lt;code&gt;\D&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以如果要匹配, 包括换行符的话, 只需要把&lt;code&gt;\s \S&lt;/code&gt;一起用:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配所有字符, 包括换行符: &lt;code&gt;[\s\S]&lt;/code&gt; &lt;a href="http://bbs.csdn.net/topics/300041987"&gt;http://bbs.csdn.net/topics/300041987&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;匹配位置&lt;/h2&gt;
&lt;p&gt;有时候还要指定某些位置, 比如说: 要匹配网址, 网址要以"www."开头, 所以如果有个网址是: "www.abcwww.com" 的话, 有可能匹配成了中间那个"www.", 那么就有问题了. 所以要指定"www."要在一个字符的开头出现, 而不能是在中间(前面不能有字符). &lt;/p&gt;
&lt;p&gt;这种情况下我们就不是要匹配某个具体的字符串, 而是&lt;strong&gt;匹配一个位置&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配单词的开始或结束(&lt;em&gt;word boundary&lt;/em&gt;): &lt;code&gt;\b&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这就是我们前面说的情况, 只需要加上\b, 就不会匹配在某个单词中间出现的"www."了.
ex. 匹配网址开头的"www.": &lt;code&gt;\bwww\.&lt;/code&gt; &lt;a href="http://regex101.com/r/oZ6aK1/1"&gt;例子链接&lt;/a&gt; ⇐ 可以把最开始那个&lt;code&gt;\b&lt;/code&gt;去掉, 看看结果有什么区别. &lt;/p&gt;
&lt;p&gt;注意这个&lt;code&gt;\b&lt;/code&gt;可以是单词的开始, 也可以是单词的结束. 还是网址的例子, 如果一个网址是:"www.abcwww.qwert.coming.com"的话, 我们说"匹配以.com"结尾的字符串, 就有可能是匹配到了&lt;strong&gt;qwert.com&lt;/strong&gt;ing, 也会有问题, 所以我们应该在"com"后面加上一个&lt;code&gt;\b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;ex. 匹配网址结束处的".com": &lt;code&gt;\.com\b&lt;/code&gt;&lt;a href="http://regex101.com/r/oZ6aK1/2"&gt;例子链接&lt;/a&gt; ⇐ 同理可以看看去掉&lt;code&gt;\b&lt;/code&gt;以后有什么不同.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;然后这个元字符&lt;code&gt;\b&lt;/code&gt;变成大写以后也是反义, &lt;code&gt;\B&lt;/code&gt;匹配所有不是单词开头或结束的位置.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;匹配整个字符串的开头: &lt;code&gt;^&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意是整个字符串的开头, 而不是指每一行的开头! (但是在"多行模式"时可以代表每一行的开头, 见后面冠以正则表达式选项的讨论)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匹配字符串的结束: &lt;code&gt;$&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同样是指整个字符串的结束. &lt;/p&gt;
&lt;h2&gt;重复次数&lt;/h2&gt;
&lt;p&gt;这个和前面介绍的匹配字符配合起来(指定要匹配的字符, 再指定字符重复的次数), 就可以完成大部分的工作了.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符重复&lt;em&gt;(exactly)n次&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只需要把数字n放进&lt;strong&gt;大括号&lt;/strong&gt;里就可以了. 
ex. 找一个六位的数字, 那么就是0-9的数字重复6次: &lt;code&gt;[0-9]{6}&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重复&lt;em&gt;m到n次&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只需要在大括号里把m和n用逗号进行分隔.
ex. 找一个6到8位的数字: &lt;code&gt;[0-9]{6,8}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但是要重复m&lt;strong&gt;或&lt;/strong&gt;n次的话, 我没有找到好的写法, 可以用后面介绍的分支条件实现, 不过比较繁琐...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重复&lt;em&gt;大于等于n次&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(重复小于等于n次等价于0到m次)
大括号里面n后面加一个逗号:
ex. 找6位以上的数字: [0-9]{6,}&lt;/p&gt;
&lt;p&gt;平时用到的比较多的是要求&lt;em&gt;"重复大于等于1次"&lt;/em&gt;或者&lt;em&gt;"重复大于等于0次"&lt;/em&gt;, 由于上面这样的写法有的时候比较罗嗦, 所以有了下面的简写:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重复&lt;em&gt;大于等于1次&lt;/em&gt;: &lt;code&gt;+&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等价于 &lt;code&gt;{1,}&lt;/code&gt;
ex. &lt;code&gt;goo+gle&lt;/code&gt;, 可以匹配"google", "gooogle", "goooogle"等, 因为第二个o可以出现大于等于1次. 
(当然上面这个例子也可以在前后加上单词边界&lt;code&gt;\b&lt;/code&gt;, 以防止匹配到某个长单词的中间)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重复&lt;em&gt;大于等于0次&lt;/em&gt;: &lt;code&gt;*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等价于 &lt;code&gt;{0,}&lt;/code&gt;
ex. 匹配以a开头以t结尾的单词: &lt;code&gt;a[a-z]*t&lt;/code&gt; , "at", "attachment", "act"等都符合条件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重复一次或0次: &lt;code&gt;?&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等价于 &lt;code&gt;{0,1}&lt;/code&gt;
ex. 匹配"color"或者"colour": &lt;code&gt;colou?r&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;贪婪(greedy)模式/懒惰(lazy)模式&lt;/h2&gt;
&lt;p&gt;前面介绍的那些指定重复次数的部分, 由于有时是指定一个重复次数的范围, 而经常匹配到的重复的次数也是一个范围, 所以有"贪婪"和"懒惰"的区别.&lt;/p&gt;
&lt;p&gt;好像上一句话没有说清楚... 举个例子, 要匹配大于六位的数字, 我们的正则表达式是&lt;code&gt;[0-9]{6,}&lt;/code&gt;, 意思是要有六个或更多的重复次数. 那么对于一个字符串: "123456789", 一共有9位, 它既可以看作重复6次(取前6位), 也可以看作重复7次, 8次, 9次... 那么岂不是含义上出现歧义(ambiguous)了??&lt;/p&gt;
&lt;p&gt;而实际上, 我们写的表达式&lt;code&gt;[0-9]{6,}&lt;/code&gt;在这个例子里最终会匹配所有的9位, 这是因为我们写的这个表达式默认上是&lt;strong&gt;贪婪模式&lt;/strong&gt;的, 意思是匹配重复&amp;gt;=6次的的重复, 但是会&lt;em&gt;尽可能多重复&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;与之相反, &lt;strong&gt;懒惰模式&lt;/strong&gt;的意思是&lt;em&gt;尽可能少重复&lt;/em&gt;. &lt;strong&gt;正则表达式默认是贪婪模式&lt;/strong&gt;, 要开启懒惰模式只需要在重复次数的后面加上一个问号"&lt;code&gt;?&lt;/code&gt;".&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+?&lt;/code&gt; : 重复&amp;gt;=1次, 但是尽量少重复&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*?&lt;/code&gt; : 重复&amp;gt;=0次, 但是尽量少重复&lt;/li&gt;
&lt;li&gt;&lt;code&gt;??&lt;/code&gt; : 重复0或1次, 但是尽量少重复&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{n,}?&lt;/code&gt;: 重复&amp;gt;=n次, 但是尽量少重复&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{m,n}?&lt;/code&gt;: 重复m到n次, 但是尽量少重复&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再插一句, 这个"贪婪模式的开启标志"&lt;code&gt;?&lt;/code&gt; 和"重复次数的符号"&lt;code&gt;?&lt;/code&gt; 虽然都是问号, 但是由于放的位置不一样, 所以不会造成歧义, 因为"重复次数的符号"的问号是出现在"匹配字符"(比如&lt;code&gt;\w&lt;/code&gt;, &lt;code&gt;[0-9]&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;)的后面的, 而"贪婪模式的开启标志"的问号是出现在"重复次数"(如&lt;code&gt;{m,n}&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;)的后面的...&lt;/p&gt;
&lt;h2&gt;分支条件(alternative)&lt;/h2&gt;
&lt;p&gt;意思就是可以匹配两种模式的任意一种, 看例子:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ex1. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;中国的电话号码有的城市是三位区号加横线加八位号码(比如"021-54749110" ⇐ 这是上海一所学校的保卫处号码), 有的是四位区号加横线加七位或八位号码的(比如"0635-8238080" ⇐ 这是山东一所大学的保卫处, 以及"0531-88881234" ⇐ 这是山东台小么哥的号码==...). 要匹配这样的号码, 如果这样写:
&lt;code&gt;\d{3,4}-\d{7,8}&lt;/code&gt;
(别忘了&lt;code&gt;\d&lt;/code&gt;等价于&lt;code&gt;[0-9]&lt;/code&gt;)
那么其实是不对的, 因为我们不允许出现3位区号后面跟7位号码的情况出现, 所以这里其实是两种模式, 所以我们是要&lt;strong&gt;匹配这两种模式其中的任意一种&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;这种情况下, 只需要把两种情况分别写出来, 中间用&lt;code&gt;|&lt;/code&gt;分割即可:
&lt;code&gt;\d{3}-\d{8}|\d{4}-\d{7,8}&lt;/code&gt;
不过看起来有点乱了... 可以加上小括号这样显得更清楚一些: 
&lt;code&gt;(\d{3}-\d{8})|(\d{4}-\d{7,8})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;不过小括号在正则表达式里面除了让正则表达式(稍微)更容易读以外, 还有一个作用是后面提到的"分组"或者"捕获", 这个后面再说...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ex2.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前面说到过怎么匹配重复m&lt;strong&gt;或&lt;/strong&gt;n次的数字, 我没有找到更方便的方法, 只好用分支条件实现了:
&lt;code&gt;\d{m}|\d{n}&lt;/code&gt;
但是要注意, 这个时候会有和前面贪婪/懒惰类似的问题: 如果一串数字有9位长, 我要匹配6位或9位的数字, 那么应该匹配到哪里呢? &lt;/p&gt;
&lt;p&gt;其实这个时候取决于我们是写&lt;code&gt;\d{9}|\d{6}&lt;/code&gt;还是&lt;code&gt;\d{6}|\d{9}&lt;/code&gt;, 正则表达式有类似于编程语言里的"&lt;strong&gt;条件短路&lt;/strong&gt;"(shortcut)性质, 一旦第一个模式满足了, 就不会去寻找竖线后面的第二个模式了...&lt;/p&gt;
&lt;h2&gt;小括号: 对结果进行分组(group), "捕获"&lt;/h2&gt;
&lt;p&gt;先说一句别的, 前面介绍重复次数的部分, 介绍了怎么指定某个类型的&lt;em&gt;单个字符&lt;/em&gt;重复的次数, 要是想寻找某个特定字符组合的重复次数该怎么办呢? 只需要把要重复的部分用小括号括起来, 然后后面指定重复的次数就可以了...&lt;/p&gt;
&lt;p&gt;ex. 寻找好几个"bla"连着的字符串: &lt;code&gt;(bla)+&lt;/code&gt;, 这样"blablabla"之类的字符串就可以被匹配了. &lt;/p&gt;
&lt;p&gt;所以小括号的这种作用类似于小括号在一般编程语言的作用, 就是把一部分内容放在一起. 但是与此同时, 每一个小括号其实还"&lt;strong&gt;捕获&lt;/strong&gt;"了一个"&lt;strong&gt;分组&lt;/strong&gt;"(group). 意思就是在匹配到的字符串里(叫做一个"match"), 我们还可以得到它的一个子字符串. &lt;/p&gt;
&lt;p&gt;还是举电话号码的例子, 前面的方法我们可以得到一个类似"021-54749110"这样的匹配结果, 但是如果我们想&lt;em&gt;把区号和区号后的号码分别保存&lt;/em&gt;的话, 还需要再&lt;em&gt;在程序里&lt;/em&gt;对这个字符串做个处理: 比如把字符串的前三个截取出来保存为区号, 把第五个字符到最后的子字符串截取出来保存为号码... 这样会有问题, 因为我们也可能得到"0531-8881234"这样的结果... 于是我们只能先在得到的字符串里寻找"-", 然后再从"-出现的位置那里把字符串截成两段...... 总之这样的话在程序里还要进行很麻烦的后期处理, 非常不爽(c'est trop lourd!)......&lt;/p&gt;
&lt;p&gt;幸好我们可以使用正则表达式的分组功能, 在得到结果的字符串的同时, 还在不同的分组里放了对应的的子字符串,&lt;em&gt;这样在程序里只要得到每一个分组就可以了&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;而给字符串分组的方法也很简单, 就是简单的&lt;em&gt;给要分组的地方加上小括号括起来就好了&lt;/em&gt;. (当然, 可能你只是为了看得清楚才给表达式加小括号, 但是在正则表达式匹配字符串的时候也会帮你把它捕获到一个分组里.) 所以没加一对小括号就会在结果中增加一个分组, 分组的顺序是按照小括号出现的顺序排列的. &lt;/p&gt;
&lt;p&gt;所以在电话号码这个例子里, 我们可以写:
&lt;code&gt;(\d{3})-(\d{8})|(\d{4})-(\d{7,8})&lt;/code&gt;
&lt;a href="http://regex101.com/r/bS1uP4/3"&gt;例子链接&lt;/a&gt;
我喜欢reg101这个网站的原因就是它可以显示非常丰富的信息. 
在网站的右上角,有关于表达式的解释:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="正则表达式入门简介/pasted_image.png" /&gt;&lt;/p&gt;
&lt;p&gt;在右下角会显示捕获到的分组(groups):&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="正则表达式入门简介/pasted_image001.png" /&gt;&lt;/p&gt;
&lt;p&gt;(这里的分组编号可能有点问题, 后两个分组的编号应该是1和2的... 这是由于我们使用了分支条件造成的, 不知是bug还是feature...)&lt;/p&gt;
&lt;p&gt;然后关于怎么在程序里获得正则表达式的分组, 可以去看每一种编程语言的相关文档...... &lt;/p&gt;
&lt;h2&gt;正则表达式选项("模式")&lt;/h2&gt;
&lt;p&gt;使用正则表达式的时候, 还可以指定一些"模式"选项, 比如在reg101网站上, 表达式右边有一个选项窗口:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="正则表达式入门简介/pasted_image002.png" /&gt;&lt;/p&gt;
&lt;p&gt;当开启某些"模式"的时候, 正则表达式的匹配行为稍有不同. 其实上面的截图已经讲的很清楚了, 下面捡比较常用的说一下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局模式global, "g": 就是不止匹配第一个, 而是把所有的匹配都显示出来.&lt;/li&gt;
&lt;li&gt;扩展模式(或者"注释模式")extended, "x": 使用后正则表达式也可以换行, 可以随便加空格(将被忽略), 也可以使用注释(使用&lt;code&gt;#&lt;/code&gt;开始注释)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个是我经常用的选项, 有时候表达式写的很长很乱, 如果不能换行或者加注释的话, 下次看得时候就不知道是怎么回事了...
比如刚才那个电话的例子, 我们在开启了扩展模式以后, 可以写成这样:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;alternative&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://regex101.com/r/bS1uP4/4"&gt;例子链接&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多行模式multiline, "m": 前面"匹配位置"那一节提到了, 就是改变&lt;code&gt;^&lt;/code&gt;和&lt;code&gt;$&lt;/code&gt;的意思, 不让它们匹配整个字符串的开始和结束, 而是每一行的开始和结束.&lt;/li&gt;
&lt;li&gt;单行模式singleline, "s": 前面也提到了, 作用是让&lt;code&gt;.&lt;/code&gt;也匹配换行符...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(所以可见, &lt;em&gt;单行模式和多行模式根本不是相互排斥的关系&lt;/em&gt;....... 这名字起的不好...)&lt;/p&gt;
&lt;p&gt;关于怎么开启这些选项, 还是要看不同语言的文档... 
比如在python里, 只要在&lt;code&gt;re.compile()&lt;/code&gt;函数使用加入&lt;code&gt;re.X&lt;/code&gt;等参数, 见&lt;a href="https://docs.python.org/2/library/re.html#module-contents"&gt;文档&lt;/a&gt;...&lt;/p&gt;
&lt;h2&gt;其他内容&lt;/h2&gt;
&lt;p&gt;这里我只写了我用到的一些东西, 关于正则表达式还有很多没有提到的内容(所谓的"高级议题"?), 比如"零宽断言"以及"平衡组"等内容, 这些都在deerchao的那篇&lt;a href="http://deerchao.net/tutorials/regex/regex.htm"&gt;经典博客&lt;/a&gt;里提到了...&lt;/p&gt;
&lt;h2&gt;实际例子&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;例子1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要分析很长的文本, 文本的一部分包含了一趟航班的信息, 比如出发和到达的时间, 出发和到达的机场, 以及航班号等... 这些信息中间都包含在一长串字符中间. &lt;/p&gt;
&lt;p&gt;我们用正则表达式处理, 并且把不同的信息放在不同的分组里, 这样就方便了程序的处理. &lt;a href="http://regex101.com/r/bS1uP4/5"&gt;这里&lt;/a&gt;是我写的正则表达式.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例子2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再举个例子, 我想要现在&lt;a href="http://www.cs.waikato.ac.nz/ml/weka/mooc/dataminingwithweka/"&gt;这个页面&lt;/a&gt;的所有的东西, 可是用鼠标一个一个点击实在是太麻烦了, 所以可以写一个程序把这些链接都提取出来, 然后自动进行下载. &lt;/p&gt;
&lt;p&gt;所以需要分析这个页面的html文件, 右键 → 显示网页源代码就可以看到了, 虽然我不懂html的语法, 但是可以发现, 下载的链接都是这样的片段:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="download_link" href="https://drive.google.com/uc?export=download&amp;amp;id=0B-f7ZbfsS9-xUjhLaURQbWsxbjg" target="_blank"&gt;en&lt;/a&gt;&lt;/td&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就是说在&lt;code&gt;class="download_link"&lt;/code&gt;之后, &lt;code&gt;href=&lt;/code&gt;后面的用引号引起来的内容就是我们想要的下载链接了, 于是可以很快用正则表达式来提取它, 我写的表达式见&lt;a href="http://regex101.com/r/hN1lH1/1"&gt;这里&lt;/a&gt;.&lt;/p&gt;</summary><category term="regex"></category></entry><entry><title>pandas学习笔记</title><link href="http://x-wei.github.io/pandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html" rel="alternate"></link><updated>2014-07-22T00:00:00+02:00</updated><author><name>mx</name></author><id>http://x-wei.github.io/pandas学习笔记.html</id><summary type="html">&lt;p&gt;首先, 导入pandas
&lt;code&gt;import pandas as pd&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;以及开启pylab: IPython里输入&lt;code&gt;%pylab&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.bearrelroll.com/2013/05/python-pandas-tutorial/"&gt;http://www.bearrelroll.com/2013/05/python-pandas-tutorial/&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;基本操作&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://cloga.info/python/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/2013/09/17/pandas_intro/"&gt;http://cloga.info/python/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/2013/09/17/pandas_intro/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pandas和numpy的关系&lt;/strong&gt;: pandas是建立在numpy上面的, pandas可以处理不同类型的数据集合(heterogeneous data set: &lt;strong&gt;DataFrame&lt;/strong&gt;), numpy处理的是相同类型的数据集合(homogeneous data set: &lt;strong&gt;ndarray&lt;/strong&gt;)&lt;/p&gt;
&lt;h2&gt;读写csv文件&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;read_csv()&lt;/strong&gt;
&lt;code&gt;df=pd.read_csv('data.csv')&lt;/code&gt;
说一下数据类型的问题: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回类型数据帧(&lt;strong&gt;DataFrame&lt;/strong&gt;): &lt;code&gt;type(df) = pandas.core.frame.DataFrame&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;df.columns&lt;/code&gt;包含了所有列的标签(&lt;em&gt;字段名&lt;/em&gt;)
&lt;code&gt;df.index&lt;/code&gt;包含了所有行的标签(可能没有的话, 就是一系列递增的数字了)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;但是其中的每一列是&lt;strong&gt;Series&lt;/strong&gt;类型: &lt;code&gt;type(df.dep)=pandas.core.series.Series&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然后可以将Series转换为numpy的ndarray: &lt;code&gt;array(df.dep)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;to_csv()&lt;/strong&gt;
没啥好说的..
&lt;code&gt;df.to_csv('csvfilename')&lt;/code&gt;
要是不希望把index也作为一列写进csv文件的话, 就选择参数&lt;code&gt;index=False&lt;/code&gt;
&lt;a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_csv.html?highlight=to_csv#pandas.DataFrame.to_csv"&gt;http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_csv.html?highlight=to_csv#pandas.DataFrame.to_csv&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;indexing &amp;amp; slicing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;选择一列: &lt;code&gt;df['dep']&lt;/code&gt; 或者&lt;code&gt;df.dep&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择前3行(前三条记录): &lt;code&gt;df[:2]&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用标签选取数据&lt;/strong&gt;: &lt;code&gt;df.loc[行标签, 列标签]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选择前两列:
&lt;code&gt;df.loc[:,('one','two')]&lt;/code&gt;
或者用
&lt;code&gt;df.loc[:,df.columns[:2]]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用位置选取数据&lt;/strong&gt;: &lt;code&gt;df.iloc[行位置, 列位置]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;df.iloc[:,:2]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自动判断的切片&lt;/strong&gt;: &lt;code&gt;df.ix[行位置或行标签, 列位置或列标签]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以前面俩基本用不着了...&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ix&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;boolean indexing&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. 选择dep是'PAR'的记录
&lt;code&gt;hk[hk.dep == 'PAR'].head()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ex. 多个条件, 比如dep是'PAR', dst是'BHM':
&lt;code&gt;hk[(hk.dep == 'PAR')&amp;amp;(hk.dst=='BHM')].head()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;: 中括号里面的表达式, 每一个条件需要括号括起来, 中间的&lt;code&gt;&amp;amp;&lt;/code&gt;不能用&lt;code&gt;and&lt;/code&gt;, 等于号&lt;code&gt;==&lt;/code&gt;不能用&lt;code&gt;is&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;文档里的一个表格:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./pandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/pasted_image001.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设置小数精度&lt;/strong&gt;
&lt;a href="http://pandas.pydata.org/pandas-docs/stable/options.html?highlight=precision"&gt;http://pandas.pydata.org/pandas-docs/stable/options.html?highlight=precision&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置小数点后六位的精度: 
&lt;code&gt;pd.set_option('precision',7)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意六位精度的话要设置precision为7=6+1.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调整某一列的次序&lt;/strong&gt;
&lt;code&gt;df.reindex(columns=pd.Index(['x', 'y']).append(df.columns - ['x', 'y']))&lt;/code&gt;
&lt;a href="http://stackoverflow.com/questions/12329853/how-to-rearrange-pandas-column-sequence"&gt;http://stackoverflow.com/questions/12329853/how-to-rearrange-pandas-column-sequence&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;随机抽取几行&lt;/strong&gt;
    rand_idx = random.choice(df.index,9, replace=False) #要设置replace = False以防止重复!
    df.ix[rand_idx]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;两个df相merge&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个df的column都一样, index不重复(增加行):&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;pd.concat([df1,df2])&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个df的index一样, column不同(增加列)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;pd.concat([df1,df2], axis = 1)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;adding/deleting columns&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://pandas.pydata.org/pandas-docs/stable/dsintro.html#column-selection-addition-deletion"&gt;http://pandas.pydata.org/pandas-docs/stable/dsintro.html#column-selection-addition-deletion&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新建一列, 加到最后面:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;df['new_col']=xxx&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;想要把一列插进中间某一处, 使用df.insert:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;df.insert(1, 'bar', df['one'])&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;删除一列, 只需用 &lt;code&gt;del&lt;/code&gt; 关键字:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;del df['one_col']&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个Series组成一个dataframe:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;pd.concat([s1, s2], axis=1)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重命名一列:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;df=df.rename(columns = {'old_name':'new_name'})&lt;/code&gt;
或者:
&lt;code&gt;df.rename(columns = {'old_name':'new_name'}, inplace=True)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/20868394/changing-a-specific-column-name-in-pandas-dataframe"&gt;http://stackoverflow.com/questions/20868394/changing-a-specific-column-name-in-pandas-dataframe&lt;/a&gt;
&lt;a href="http://www.bearrelroll.com/2013/05/python-pandas-tutorial/"&gt;http://www.bearrelroll.com/2013/05/python-pandas-tutorial/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;apply() &amp;amp; map() &amp;amp; agg()&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;apply()&lt;/strong&gt;
对dataframe的内容进行批量处理, 这样要比循环来得快. 
&lt;code&gt;df.apply(func, axis=0,...)&lt;/code&gt;
&lt;code&gt;func&lt;/code&gt;: 定义的函数
&lt;code&gt;axis&lt;/code&gt;: =0的时候对列操作, =1的时候对行操作
ex.
&lt;code&gt;df.apply(self, func, axis=0,&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;map()&lt;/strong&gt;
和python内建的没啥区别
&lt;code&gt;df['one'].map(sqrt)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;groupby()&lt;/strong&gt;
按照某一列(&lt;em&gt;字段&lt;/em&gt;)分组, 得到一个&lt;code&gt;DataFrameGroupBy&lt;/code&gt;对象. 之后再对这个对象进行分组操作, 如:
    df.groupby(['A','B']).sum()##按照A、B两列的值分组求和
    groups = df.groupby('A')#按照A列的值分组求和
    groups['B'].sum()##按照A列的值分组求B组和
    groups['B'].count()##按照A列的值分组B组计数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;agg()&lt;/strong&gt;
对分组的结果再分别进行不同的操作... 参数是一个dict, 把每个字段映射到一个函数上来...... 说的不清楚, 直接看例子: 
    In [82]: df
    Out[82]: 
           one  two  three
    index               &lt;br /&gt;
    a        1    1      2
    b        2    2      4
    c        3    3      6
    d      NaN    4    NaN&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;83&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agg&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;three&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
     &lt;span class="n"&gt;two&lt;/span&gt;     &lt;span class="n"&gt;three&lt;/span&gt;
&lt;span class="n"&gt;one&lt;/span&gt;               
&lt;span class="mi"&gt;1&lt;/span&gt;      &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="mf"&gt;1.414214&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;      &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="mf"&gt;2.000000&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;      &lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="mf"&gt;2.449490&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;甚至还可以对每一列进行多个处理操作:
    In [100]: g.agg({'two': [sum],'three': [sqrt,exp]})
    Out[100]: 
         two     three          &lt;br /&gt;
         sum      sqrt         exp
    one                         &lt;br /&gt;
    1      1  1.414214    7.389056
    2      2  2.000000   54.598150
    3      3  2.449490  403.428793&lt;/p&gt;
&lt;p&gt;具体见: &lt;a href="http://stackoverflow.com/questions/14529838/apply-multiple-functions-to-multiple-groupby-columns"&gt;http://stackoverflow.com/questions/14529838/apply-multiple-functions-to-multiple-groupby-columns&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;统计出现频率&lt;/strong&gt;
方法1: 
&lt;code&gt;_hkhist=hk.groupby(groups).count().ix[:,0]#count of groupes&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;方法2:
&lt;code&gt;hk.groupby('dep').size()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;方法3:
(只适用于一列的情况)
&lt;code&gt;hk.dep.value_counts()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;把一列index转为column(不再作为index使用)&lt;/strong&gt;
&lt;a href="http://stackoverflow.com/questions/20461165/how-to-convert-pandas-index-in-a-dataframe-to-a-column"&gt;http://stackoverflow.com/questions/20461165/how-to-convert-pandas-index-in-a-dataframe-to-a-column&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;比如, 原来的dataframe是三层index的, column只有一列(名字叫做'0'):&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./pandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/pasted_image002.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;df.reset_index(level=2,inplace=True)&lt;/code&gt;
这样就可以把第三层的内容作为使用, 而不是作为index, 现在column有两列了, 再给两列命名一下:
&lt;code&gt;hist_hub.columns = ['hub','occurrence']&lt;/code&gt;
就得到了:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./pandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/pasted_image003.png" /&gt;&lt;/p&gt;
&lt;p&gt;关于level这个参数:
level : int, str, tuple, or list, default None
Only remove the given levels from the index. Removes all levels by default&lt;/p&gt;
&lt;h2&gt;Plotting&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://cloga.info/python/2014/02/23/Plotting_with_Pandas/"&gt;http://cloga.info/python/2014/02/23/Plotting_with_Pandas/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;统计出现次数, 画柱状图:&lt;/strong&gt;
    g=hk.groupby('dep')
    dd=g['dst'].count()
    dd.plot(kind='bar')&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./pandas%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/pasted_image.png" /&gt;
或者用pandas提供的:
&lt;a href="http://pandas.pydata.org/pandas-docs/stable/basics.html#value-counts-histogramming-mode"&gt;http://pandas.pydata.org/pandas-docs/stable/basics.html#value-counts-histogramming-mode&lt;/a&gt;
nb=hk['#vol_hacker']
hist=nb.value_counts()*100.0/len(hk)
hist=hist.sort_index()
hist.plot(kind='bar')&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;积累分布曲线&lt;/strong&gt;
&lt;a href="http://stackoverflow.com/questions/6326360/python-matplotlib-probability-plot-for-several-data-set"&gt;http://stackoverflow.com/questions/6326360/python-matplotlib-probability-plot-for-several-data-set&lt;/a&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scipy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cumfreq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numbins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;ro&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;或者用pandas提供的东西也能做吧:
&lt;a href="http://pandas.pydata.org/pandas-docs/stable/basics.html#discretization-and-quantiling"&gt;http://pandas.pydata.org/pandas-docs/stable/basics.html#discretization-and-quantiling&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;hist2d&lt;/strong&gt;
用pcolormesh
&lt;a href="http://www.physicsforums.com/showthread.php?t=653864"&gt;http://www.physicsforums.com/showthread.php?t=653864&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;貌似要转置!!
&lt;a href="http://stackoverflow.com/questions/24791614/numpy-pcolormesh-typeerror-dimensions-of-c-are-incompatible-with-x-and-or-y"&gt;http://stackoverflow.com/questions/24791614/numpy-pcolormesh-typeerror-dimensions-of-c-are-incompatible-with-x-and-or-y&lt;/a&gt;&lt;/p&gt;</summary><category term="pandas"></category><category term="python"></category></entry><entry><title>python pickle 的一个小问题</title><link href="http://x-wei.github.io/python%20pickle%20%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98.html" rel="alternate"></link><updated>2014-07-15T00:00:00+02:00</updated><author><name>mx</name></author><id>http://x-wei.github.io/python pickle 的一个小问题.html</id><summary type="html">&lt;p&gt;python的pickle/unpickle机制可以非常方便的保存一些计算的中间结果, 这一点java虽然也可以做到, 但是java里面的包的名字实在是长的让人记不住...&lt;/p&gt;
&lt;p&gt;不过今天在使用pickle的时候遇到了一个很奇怪的问题. &lt;/p&gt;
&lt;p&gt;是这样的, 原本写了一个程序&lt;code&gt;main.py&lt;/code&gt;, 这个程序里进行了一些计算并且pickle下了这些内容, 后来我觉得一个程序main.py写这么多实在太长了, 于是就把那些辅助函数以及class的定义通通放进了一个&lt;code&gt;util.py&lt;/code&gt;文件里. 并且在main.py的第一行写上: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;from util import *&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;按理说这应该没有问题, 和一个main文件时运行的效果相同的, 但是当我运行的时候却显示util.py里面这行unpickle的语句有错误:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;    &lt;span class="n"&gt;airport_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;airport_info.dict&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
    &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;module&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Airport&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中&lt;code&gt;Airport&lt;/code&gt;是我定义的一个类, 本来在main.py里面, 后来被我移动到了util.py里面...&lt;/p&gt;
&lt;p&gt;感觉很奇怪, 于是去&lt;a href="https://bbs.sjtu.edu.cn/frame2.html"&gt;水源&lt;/a&gt;求助, 果然fcfarseer学长就很快给了&lt;a href="https://bbs.sjtu.edu.cn/bbscon,board,Script,file,M.1405431916.A.html"&gt;回复&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在pickle一個對象的時候，pickle會記住這個對象的class是定義在哪個python
源文件裏，然後再unpickle的時候，pickle會自動import那個源文件以獲得class的定義。&lt;/p&gt;
&lt;p&gt;所以如果定義class的文件在這期間改過的話，就會拋出類似的錯誤。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以问题出在这里(我的理解): 原先我把数据pickle进文件的时候, &lt;code&gt;Airport这个class是定义在了main.py里面, 所以当我在util.py里面load数据的时候, pickle发现原来的main.py里面已经没有了 Airport这个class, 于是就出现了Error...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解决办法也不难, 只需要在&lt;code&gt;util.py&lt;/code&gt;里面再生成一下那些要load的数据文件, 之后再次unpickle的时候就会去&lt;code&gt;util.py&lt;/code&gt;而不是&lt;code&gt;main.py&lt;/code&gt;里找class的定义, 也就没有问题了!&lt;/p&gt;
&lt;p&gt;今天碰到的这个问题不是那么evident, 所以特地记一下.&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>A byte of Python 笔记</title><link href="http://x-wei.github.io/byte_of_python%E7%AC%94%E8%AE%B0.html" rel="alternate"></link><updated>2014-04-10T00:00:00+02:00</updated><author><name>mx</name></author><id>http://x-wei.github.io/byte_of_python笔记.html</id><summary type="html">&lt;p&gt;据说这本书是最好的入门读物, 况且只有100来页 (减掉前面后面那些扯淡的 不到100页...)&lt;/p&gt;
&lt;p&gt;那就用这本书过一下py的基本知识点吧! 看完以后收获不少, 把py涉及的很大一部分都讲到了. 这本书已经是够压缩的了, 不过我还是边看边自己再压缩了一遍(写在zim笔记里). &lt;/p&gt;
&lt;p&gt;我看的是1.20版本, 2004年的, 因为这个版本针对的是py2.x, 作者主页上现在的版本针对的是py3. 另外感觉没必要看中文翻译版, 因为这里用的英语比较简单, 而且有的时候中文翻译反而不如原文表达的恰当.&lt;/p&gt;
&lt;h1&gt;preface+ch1+ch2&lt;/h1&gt;
&lt;p&gt;扯淡...&lt;/p&gt;
&lt;h1&gt;ch3. First Steps&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There are two ways of using Python to run your program - using the interactive interpreter prompt or using a source file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anything to the right of the # symbol is a comment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;the shebang line&lt;/strong&gt; - whenever the first two characters of the source file are &lt;code&gt;#!&lt;/code&gt; followed by the location of a program, this tells your Linux/Unix system that this program should be run with this interpreter when you execute the program.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Note that you can always run the program on any platform by specifying the interpreter directly on the command line such as the command python helloworld.py .)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use the built-in help functionality.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;or example, run &lt;code&gt;help(str)&lt;/code&gt; - this displays the help for the str class which is used to store all text (strings) that you use in your program.&lt;/p&gt;
&lt;h1&gt;ch4. The Basics&lt;/h1&gt;
&lt;h2&gt;Literal Constants&lt;/h2&gt;
&lt;p&gt;It is called a literal because it is literal - you use its value literally. ex. number 2, or string "hello".&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;number&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Numbers in Python are of four types - integers, long integers, floating point and complex numbers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-Examples of floating point numbers (or floats for short) are 3.23 and 52.3E-4. The E notation indicates powers of 10. In this case, 52.3E-4 means 52.3 * 10-4.
-Examples of complex numbers are (-5+4j) and (2.3 - 4.6j)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;string&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;string可以用Single/Double/Triple Quotes括起来&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;escape sequence&lt;/em&gt;: \', \n, \t, 以及在行末作为续行符号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;raw string&lt;/strong&gt;: to specify some strings where no special processing such as escape sequences are handled, then what you need is to specify a raw string by prefixing r or R to the string. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex. &lt;code&gt;r"Newlines are indicated by \n"&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unicode text:  prefix u or U. For example, &lt;code&gt;u"This is a Unicode string."&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember to use Unicode strings when you are dealing with text files, especially when you know that the file will contain text written in languages other than English.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Strings are immutable:  once you have created a string, you cannot change it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;String literal concatenation: If you place two string literals side by side, they are automatically concatenated by Python. For example, '&lt;code&gt;What\'s' 'your name?&lt;/code&gt;' is automatically converted in to &lt;code&gt;"What's your name?".&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note for Regular Expression Users: Always use raw strings when dealing with regular expressions. Otherwise, a lot of backwhacking may be required. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Variables&lt;/h2&gt;
&lt;p&gt;顾名思义就是可以可以变的量...
Unlike literal constants, you need some method of accessing these variables &lt;em&gt;and hence you give them names&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identifier(标示符)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Identifiers&lt;/strong&gt; are names given to identify something. 
The first character of the identifier must be a letter of the alphabet (upper or lowercase) &lt;em&gt;or an underscore ('_')&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python refers to anything used in a program as an object.
Python is &lt;strong&gt;strongly object-oriented&lt;/strong&gt; in the sense that everything is an object &lt;em&gt;including numbers, strings and even functions&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Variables are used by just assigning them a value. No declaration or data type definition is needed/used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Logical and Physical Lines: Implicitly, Python encourages the use of a single statement per line which makes code more readable. If you want to specify more than one logical line on a single physical line, then you have to explicitly specify this using a semicolon (;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;explicit line joining: ex. 续行符\;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;implicit line joining: ex. 括号...&lt;/p&gt;
&lt;h2&gt;Indentation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Leading whitespace (spaces and tabs) at the beginning of the logical line is used to determine the indentation level of the logical line, which in turn is used to determine the grouping of statements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This means that statements which go together must have the same indentation. Each such set of state- ments is called a &lt;em&gt;block&lt;/em&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not use a mixture of tabs and spaces for the indentation as it does not work across different platforms properly. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ch5. Operators and Expressions&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;expressions&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An expression can be broken down into &lt;em&gt;operators&lt;/em&gt; and &lt;em&gt;operands&lt;/em&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一些oprators: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;**, //, &amp;lt;&amp;lt;, &amp;gt;&amp;gt;, &amp;amp;, |, ^, ~, not, and, or&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Operator Precedence: 优先级的一个表...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Associativity: &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Operators are usually associated from left to right i.e. operators with same precedence are evaluated in a left to right manner. For example, &lt;code&gt;2 + 3 + 4&lt;/code&gt; is evaluated as &lt;code&gt;(2 + 3) + 4&lt;/code&gt;. Some operators like assignment operators have right to left associativity i.e. &lt;code&gt;a = b = c&lt;/code&gt; is treated as &lt;code&gt;a = (b = c)&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;ch6. Control Flow&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;if&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;if-elif-else&lt;/code&gt; statement: This makes the program easier and reduces the amount of indentation required. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There is &lt;em&gt;no switch statement in Python:&lt;/em&gt; You can use an if..elif..else statement to do the same thing (and in some cases, use a dictionary to do it quickly)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;while&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember that you can have &lt;em&gt;an &lt;strong&gt;&lt;em&gt;else&lt;/em&gt;&lt;/strong&gt; clause for the while loop&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-The &lt;code&gt;for..in&lt;/code&gt; statement is another looping statement which &lt;em&gt;iterates&lt;/em&gt; over a sequence of objects i.e. go
through each item in a sequence, a &lt;em&gt;sequence&lt;/em&gt; is just an ordered collection of items.
-optional &lt;strong&gt;else&lt;/strong&gt; part  also.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;break&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;to break out of a loop statement i.e. stop the execution of a looping statement, even if the loop condition has not become False or the sequence of items has been completely iterated over.
-An important note is that if you break out of a for or while loop, &lt;em&gt;any corresponding loop else block is &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; executed.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;continue&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;used to tell Python to skip the rest of the statements in the current loop block and to continue to the &lt;em&gt;next iteration&lt;/em&gt; of the loop.&lt;/p&gt;
&lt;h1&gt;ch7. Functions&lt;/h1&gt;
&lt;p&gt;Functions are reusable pieces of programs. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;def func_name()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parameters:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note the terminology used - the names given in the function definition are called &lt;em&gt;parameters(行参)&lt;/em&gt; whereas the values you supply in the function call are called &lt;em&gt;arguments(实参)&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;scope&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;local variables:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All variables have the &lt;strong&gt;scope&lt;/strong&gt; of the block they are declared in starting from the point of definition of the name.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;global variables&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to assign a value to a name defined outside the function, then you have to tell Python that the name is not local, but it is global. We do this using the &lt;code&gt;global&lt;/code&gt; statement. &lt;/p&gt;
&lt;h2&gt;Default Argument Values&lt;/h2&gt;
&lt;p&gt;Default Argument Values默认参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can specify default argument values for parameters by following the parameter name in the function definition with the assignment operator (=) followed by the default value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note that the default argument value should be &lt;em&gt;immutable.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;you cannot have a parameter with a default argument value &lt;em&gt;before&lt;/em&gt; a parameter without a default argument value in the order of parameters declared in the function parameter list.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is because the values are &lt;em&gt;assigned to the parameters by position&lt;/em&gt;. For example, &lt;code&gt;def func(a, b=5)&lt;/code&gt; is valid, but &lt;code&gt;def func(a=5, b)&lt;/code&gt; is not valid.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keyword Arguments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have some functions with many parameters and you want to specify only some of them, then you can give values for such parameters by naming them - this is called keyword arguments - we &lt;em&gt;use the name (keyword) instead of the position&lt;/em&gt; to specify the arguments to the function.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;return&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;used to &lt;em&gt;return&lt;/em&gt; from a function i.e. break out of the function. We can optionally return a value from the function as well.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;return None&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;-a return statement without a value is equivalent to &lt;code&gt;return None&lt;/code&gt;. None is a special type in Python that represents nothingness. For example, it is used to indicate that a variable has no value if it has a value of None.
-Every function implicitly contains a return None statement at the end unless you have written your own return statement.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pass&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the &lt;code&gt;pass&lt;/code&gt; statement is used in Python to indicate an empty block of statements.&lt;/p&gt;
&lt;h2&gt;DocStrings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;A string on the first logical line of a function&lt;/em&gt; is the &lt;strong&gt;docstring&lt;/strong&gt; for that function (also apply to modules and classes). &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;func.__doc__&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The convention: a multi-line string where the first line starts with a capital letter and ends with a dot. Then the second line is blank followed by any detailed explanation starting from the third line. &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ch8. Modules&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;A module is basically &lt;strong&gt;a file&lt;/strong&gt;&lt;em&gt; containing all your functions and variables that you have defined&lt;/em&gt;. &lt;/li&gt;
&lt;li&gt;To reuse the module in other programs, the filename of the module must have a .py extension.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ex. sys module&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When Python executes the &lt;code&gt;import sys&lt;/code&gt; statement, it looks for the sys.py module in one of the directores listed in its &lt;code&gt;sys.path&lt;/code&gt; variable. If the file is found, then the statements in the main block of that module is run and then the module is made available for you to use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;sys.argv&lt;/code&gt; variable is a list of strings, contains the list of command line arguments i.e. the arguments passed to your program using the command line. 即程序执行时传给的参数列表.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;sys.path&lt;/code&gt; contains &lt;em&gt;the list of directory names where modules are imported&lt;/em&gt; from. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Observe that the first string in sys.path is empty - this empty string indicates that &lt;em&gt;the current directory&lt;/em&gt; is also part of the sys.path which is same as the &lt;code&gt;PYTHONPATH&lt;/code&gt; environment variable. This means that you can directly import modules located in the current directory. Otherwise, you will have to place your module in one of the directories listed in sys.path .&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Byte-compiled .pyc files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Importing a module is a relatively costly affair.
This .pyc file is useful when you import the module the next time from a different program - it will be much faster since part of the processing required in importing a module is already done. Also, these byte-compiled files are platform-independent. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;from..import &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to directly import the &lt;code&gt;argv&lt;/code&gt; variable into your program (to avoid typing the &lt;code&gt;sys.&lt;/code&gt; everytime for it), then you can use the &lt;code&gt;from sys import argv&lt;/code&gt; statement.
not recommended...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__name__&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Every Python module has it's &lt;code&gt;__name__&lt;/code&gt; defined and if this is '&lt;code&gt;__main__&lt;/code&gt;', it implies that the module is being run standalone by the user and we can do corresponding appropriate actions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every Python program is also a module. You just have to make sure it has a .py extension. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;dir() function&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can use the built-in dir function to &lt;em&gt;list the identifiers&lt;/em&gt; that a module defines. The identifiers are the &lt;strong&gt;functions, classes, variables and imported modules&lt;/strong&gt; defined in that module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you supply a module name to the dir() function, it returns the list of the names defined in that module. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;When no argument is applied to it, it returns the list of names defined in the current module.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ch9. Data Structures&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Data structures are structures which can hold some data together. In other words, they are used to store a collection of related data.&lt;/li&gt;
&lt;li&gt;3 built-in data structures in Python - &lt;strong&gt;list, tuple and dictionary&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;List [a,b,c]&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;a data structure that holds an ordered collection of items. &lt;/li&gt;
&lt;li&gt;a &lt;em&gt;mutable&lt;/em&gt; data type&lt;/li&gt;
&lt;li&gt;you can add any kind of object to a list including numbers and even other lists.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;indexing &lt;/em&gt;operator: &lt;code&gt;a_list[1]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;len(a_list)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a_list.append()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for..in&lt;/code&gt; loop to iterate through the items of the list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a_list.sort()&lt;/code&gt;: this method affects the list itself and does not return a modified list&lt;/li&gt;
&lt;li&gt;&lt;code&gt;del a_list[0]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Tuple (a,b,c)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Tuples are just like lists except that they are &lt;strong&gt;immutable&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Tuples are usually used in cases where a statement or a user-defined function can safely assume that the collection of values (i.e. the tuple of values) used will not change.&lt;/li&gt;
&lt;li&gt;can contain another tuple, another list......&lt;/li&gt;
&lt;li&gt;singleton: &lt;code&gt;t=(2,)&lt;/code&gt;(comma is necessary!)&lt;/li&gt;
&lt;li&gt;empth: t=()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;indexing: a_touple[0]&lt;/li&gt;
&lt;li&gt;len(a_tuple)&lt;/li&gt;
&lt;li&gt;used for output format:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;print '%s is %d years old' % (name, age)&lt;/code&gt;&lt;/p&gt;
&lt;h2 k1:v1_="k1:v1," k2:v2="k2:v2"&gt;Dictionary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;key-value mapping&lt;/li&gt;
&lt;li&gt;you can use only immutable objects (like strings) for the keys of a dictionary but you can use either immutable or mutable objects for the values of the dictionary. (This basically translates to say that you should use only simple objects for keys.)&lt;/li&gt;
&lt;li&gt;一个dict中的keys不必同样type, values也是! &lt;/li&gt;
&lt;li&gt;key/value pairs in a dictionary are &lt;em&gt;not ordered&lt;/em&gt; in any manner.&lt;/li&gt;
&lt;li&gt;instances/objects of the dict class.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;adding key-value pair by indexing: &lt;code&gt;dic[key]=val&lt;/code&gt;&lt;em&gt;(overwrite if key already exists!)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;deleting: &lt;code&gt;del dic[key]&lt;/code&gt;&lt;em&gt;(KeyError if key doesn't exist!)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dic.items()&lt;/code&gt;&lt;em&gt;返回一个list of tuples&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;dic.items()
[(k1,v1), (k2,v2)]
for k,v in dic.items:
    print k, v&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dic.keys()&lt;/code&gt;&lt;em&gt;返回keys的list&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;test: &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the &lt;code&gt;in&lt;/code&gt; operator: &lt;code&gt;if akey in dic&lt;/code&gt;
or even the &lt;code&gt;has_key&lt;/code&gt; method of the dict class: &lt;code&gt;if dic.has_key(k)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Sequences&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Lists, tuples and strings are examples of sequences&lt;/li&gt;
&lt;li&gt;Two of the main features of a sequence is the &lt;strong&gt;indexing&lt;/strong&gt; operation which allows us to fetch a particular item in the sequence directly and the &lt;strong&gt;slicing&lt;/strong&gt; operation which allows us to retrieve a slice of the sequence i.e. a part of the sequence.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The great thing about sequences is that you can access tuples, lists and strings all in the same way!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;indexing(seq can be List or Tuple or String):&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;seq&lt;code&gt;[2], seq[-1]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;slicing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;seq&lt;code&gt;[1:3]&lt;/code&gt; &lt;em&gt;(from 1 to 2!)&lt;/em&gt;
&lt;code&gt;seq[:]&lt;/code&gt; &lt;em&gt;(a whole copy of the list)&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What you need to remember is that if you want to make a copy of a list or such kinds of sequences or complex objects (not simple objects such as integers), then you have to use the slicing operation(&lt;code&gt;list[:]&lt;/code&gt;) to make a copy.&lt;/li&gt;
&lt;li&gt;If you just assign the variable name to another name, both of them will refer to the same object and this could lead to all sorts of trouble if you are not careful.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;String&lt;/h2&gt;
&lt;p&gt;methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;str.startswith('a')&lt;/code&gt; &lt;em&gt;return boolean&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str.find(substr)&lt;/code&gt; &lt;em&gt;return index of subster or -1 if not found&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;substr in str&lt;/code&gt; &lt;em&gt;return boolean&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str.join(strseq)&lt;/code&gt; &lt;em&gt;use str as delimiter to joint the items in strseq&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ch10. Problem Solving - Writing a Python Script&lt;/h1&gt;
&lt;p&gt;"a program which creates a backup of all my important files"&lt;/p&gt;
&lt;h2&gt;1st version&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Run the command using the &lt;code&gt;os.system&lt;/code&gt; function which runs the command as if it was run from the system i.e. in the shell - it returns 0 if the command was successfully, else it returns an error number.&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;swaroop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;byte&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;swaroop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;target_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;backup&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;target_dir&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;zip_command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;zip -qr &amp;#39;%s&amp;#39; %s&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zip_command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Successful&lt;/span&gt; &lt;span class="n"&gt;backup&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;
&lt;span class="nl"&gt;else:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Backup&lt;/span&gt; &lt;span class="n"&gt;FAILED&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2nd version&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;using the time as the name of the file within a directory with the current date as a directory within the main backup directory.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;os.sep&lt;/code&gt; variable - this gives the directory separator according to your operating system i.e. it will be '/' in Linux, Unix, it will be '\' in Windows and ':' in Mac OS.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3rd version&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;attaching a user-supplied comment to the name of the zip archive.&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Enter&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;entered&lt;/span&gt;
    &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="nl"&gt;else:&lt;/span&gt;
    &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
    &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;More Refinements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;allow extra files and directories to be passed to the script at the command line. We will get these from the sys.argv list and we can add them to our source list using the extend method provided by the list class.&lt;/li&gt;
&lt;li&gt;use of the tar command instead of the zip command. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One advantage is that when you use the tar command along with gzip, the backup is much faster and the backup created is also much smaller. If I need to use this archive in Windows, then WinZip handles such .tar.gz files easily as well.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tar = 'tar -cvzf %s %s -X /home/swaroop/excludes.txt' % (target, ' '.join(srcdir))&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The most preferred way of creating such kind of archives would be using the zipfile or tarfile module respectively.&lt;/li&gt;
&lt;li&gt;"Software is grown, not built"&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ch11. Object-Oriented Programming&lt;/h1&gt;
&lt;h2&gt;fields, methods&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;class: &lt;strong&gt;fields&lt;/strong&gt;, &lt;strong&gt;methods&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Fields are of two types - they can belong to each instance/object of the class or they can belong to the class itself. They are called &lt;strong&gt;instance variables&lt;/strong&gt; and &lt;strong&gt;class variables&lt;/strong&gt; respectively.&lt;/li&gt;
&lt;li&gt;ou must refer to the variables and methods of the same object using the &lt;code&gt;self&lt;/code&gt; variable only. This is called an &lt;em&gt;attribute reference&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;we refer to the class variable as &lt;code&gt;ClassName.var&lt;/code&gt; and not as &lt;code&gt;self.var&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;self&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Class methods have only one specific difference from ordinary functions - &lt;em&gt;they must have an extra first name that has to be added to the beginning of the parameter list&lt;/em&gt;, but you do do not give a value for this parameter when you call the method, Python will provide it. &lt;/li&gt;
&lt;li&gt;create an object/instance of this class using the name of the class followed by a pair of parentheses.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The &lt;strong&gt;init&lt;/strong&gt; method&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;__init__()&lt;/code&gt; method is run as soon as an object of a class is instantiated. The method is useful to do any initialization you want to do with your object. &lt;/li&gt;
&lt;li&gt;analogous to a constructor in C++, C# or Java.&lt;/li&gt;
&lt;li&gt;the same, __&lt;code&gt;del__()&lt;/code&gt; method: run when the object is no longer in use and there is no guarantee when that method will be run. If you want to explicitly do this, you just have to use the del statement.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;All class members (including the data members) are &lt;strong&gt;&lt;em&gt;public&lt;/em&gt;&lt;/strong&gt; and all the methods are &lt;strong&gt;&lt;em&gt;virtual&lt;/em&gt;&lt;/strong&gt; in Python.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;One exception: If you use data members with names using the double underscore prefix such as &lt;code&gt;__privatevar&lt;/code&gt;, Python uses name-mangling to effectively make it a private variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Inheritance&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ex:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Teacher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SchoolMember&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="err"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Represents&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;teacher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;salary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;SchoolMember&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;salary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salary&lt;/span&gt;
        &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Initialized&lt;/span&gt; &lt;span class="n"&gt;Teacher&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To use inheritance, we specify the base class names in a &lt;strong&gt;tuple&lt;/strong&gt; following the class name in the class definition. --&lt;em&gt;multiple inheritance.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;__init__&lt;/code&gt; method of the base class is explicitly called using the &lt;code&gt;self&lt;/code&gt; variable so that we can initialize the base class part of the object. This is very important to remember - &lt;em&gt;Python does not automatically call the constructor of the base class, you have to explicitly call it yourself.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ch12. Input/Output&lt;/h1&gt;
&lt;h2&gt;Files&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;open and use files for reading or writing by creating an object of the &lt;code&gt;file&lt;/code&gt; class and using its &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;readline&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt; methods appropriately to read from or write to the file. Then finally, when you are finished with the file, you call the &lt;code&gt;close&lt;/code&gt; method to tell Python that we are done using the file.&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;poem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;riting&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;poem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;write&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;close&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;poem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;specified&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;ead&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;assumed&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;returns&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;complete&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;including&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;newline&lt;/span&gt; &lt;span class="n"&gt;character&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Zero&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="n"&gt;indicates&lt;/span&gt; &lt;span class="n"&gt;EOF&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Notice&lt;/span&gt; &lt;span class="n"&gt;comma&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;avoid&lt;/span&gt; &lt;span class="n"&gt;automatic&lt;/span&gt; &lt;span class="n"&gt;newline&lt;/span&gt; &lt;span class="n"&gt;added&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;close&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Pickle&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Python provides a standard module called &lt;/em&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;em&gt; using which you can store any Python object in a file and then get it back later intact. This is called storing the object persistently.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;There is another module called &lt;code&gt;cPickle&lt;/code&gt; which functions exactly same as the &lt;code&gt;pickle&lt;/code&gt; module except that it is written in the C language and is (upto 1000 times) faster. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pickling &amp;amp; unpickling:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cPickle&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shoplistfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shoplist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shoplistfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;storedlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;storedlist&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To store an object in a file, first we open a file object in write mode and store the object into the open file by calling the &lt;code&gt;dump&lt;/code&gt; function of the pickle module. This process is called &lt;em&gt;pickling&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Next, we retrieve the object using the &lt;code&gt;load&lt;/code&gt; function of the pickle module which returns the object. This process is called &lt;em&gt;unpickling&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ch13. Exceptions&lt;/h1&gt;
&lt;h2&gt;Try..Except&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We can handle exceptions using the &lt;code&gt;try..except&lt;/code&gt; statement. We basically put our usual statements within the try-block and put all our error handlers in the except-block.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ex&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;
&lt;span class="nl"&gt;try:&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Enter&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;except&lt;/span&gt; &lt;span class="n"&gt;EOFError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;\&lt;/span&gt;&lt;span class="n"&gt;nWhy&lt;/span&gt; &lt;span class="n"&gt;did&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;EOF&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;me&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;
&lt;span class="nl"&gt;except:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;\&lt;/span&gt;&lt;span class="n"&gt;nSome&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt; &lt;span class="n"&gt;occurred&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;exiting&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;except&lt;/code&gt; clause can handle a single specified error or exception, or a parenthesized list of errors/exceptions. If no names of errors or exceptions are supplied, it will handle all errors and exceptions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;If any error or exception is not handled, then the default Python handler is called which just stops the execution of the program and prints a message.&lt;/li&gt;
&lt;li&gt;You can also have an &lt;code&gt;else&lt;/code&gt; clause associated with a &lt;code&gt;try..catch&lt;/code&gt; block. The &lt;code&gt;else&lt;/code&gt; clause is executed if no exception occurs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Raising Exceptions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;using the &lt;code&gt;raise&lt;/code&gt; statement. &lt;/li&gt;
&lt;li&gt;You also have to specify the name of the error/exception and the exception object that is to be thrown along with the exception. &lt;/li&gt;
&lt;li&gt;The error or exception that you can arise should be class which directly or indirectly is a derived class of the &lt;code&gt;Error&lt;/code&gt; or &lt;code&gt;Exception&lt;/code&gt; class respectively.&lt;/li&gt;
&lt;li&gt;ex.&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;ShortInputException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;defined&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;atleast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;
        &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atleast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;atleast&lt;/span&gt;

&lt;span class="nl"&gt;try:&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Enter&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;ShortInputException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;  &lt;span class="n"&gt;specify&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;thrown&lt;/span&gt;

&lt;span class="n"&gt;except&lt;/span&gt; &lt;span class="n"&gt;EOFError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;\&lt;/span&gt;&lt;span class="n"&gt;nWhy&lt;/span&gt; &lt;span class="n"&gt;did&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;EOF&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;me&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ShortInputException&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;ShortInputException&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
                &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;expecting&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;least&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atleast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nl"&gt;else:&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;raised&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Try..Finally&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What if you were reading a file and you wanted to close the file &lt;em&gt;whether or not an exception was raised&lt;/em&gt;?&lt;/li&gt;
&lt;li&gt;before the program exits, the finally clause is executed and the file is closed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ch14. The Python Standard Library&lt;/h1&gt;
&lt;h2&gt;sys module&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sys.argv&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;there is always at least one item in the &lt;code&gt;sys.argv&lt;/code&gt; list which is the name of the current program being run and is available as &lt;code&gt;sys.argv[0]&lt;/code&gt; . Other command line arguments follow this item.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sys.exit&lt;/code&gt; : to exit the running program.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;os module&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;os.getcwd()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;gets the current working directory i.e. the path of the directory from which the curent Python script is working.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;os.listdir()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.remove()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.system()&lt;/code&gt;: run a shell command.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.linesep&lt;/code&gt;: string gives the line terminator used in the current platform. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.path.split()&lt;/code&gt;: returns the directory name and file name of the path.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.path.isfile()&lt;/code&gt; and &lt;code&gt;os.path.isdir()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;ch15. More Python&lt;/h1&gt;
&lt;h2&gt;Special Methods&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Generally, special methods are used to mimic certain behavior. &lt;/li&gt;
&lt;li&gt;For example, if you want to use the &lt;code&gt;x[key]&lt;/code&gt; indexing operation for your class (just like you use for lists and tuples) then just implement the &lt;code&gt;__getitem__()&lt;/code&gt; method and your job is done.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__init__(self, ...)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__del__(self)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__str__(self)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Called when we use the &lt;code&gt;print&lt;/code&gt; statement with the object or when &lt;code&gt;str()&lt;/code&gt; is used.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__lt__(self, other)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Called when the &lt;em&gt;less than&lt;/em&gt; operator ( &amp;lt; ) is used. Similarly, there are special methods for all the operators (+, &amp;gt;, etc.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__getitem__(self, key)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Called when x[key] indexing operation is used.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__len__(self)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Called when the built-in &lt;code&gt;len()&lt;/code&gt; function is used for the sequence object.&lt;/p&gt;
&lt;h2&gt;List Comprehension&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;used to derive a new list from an existing list.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ex&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;listone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;listtwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;listone&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Here, we derive a new list by specifying the manipulation to be done (2*i) when some condition is satisfied (if i &amp;gt; 2).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Receiving Tuples and Lists in Functions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;receiving parameters to a function as a &lt;em&gt;tuple&lt;/em&gt; or a &lt;em&gt;dictionary&lt;/em&gt; using the &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;**&lt;/code&gt; prefix respectively. &lt;/li&gt;
&lt;li&gt;This is useful when taking variable number of arguments in the function.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;def powersum(power, *args):...&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Due to the * prefix on the args variable, all extra arguments passed to the function are stored in args as a tuple. If a ** prefix had been used instead, the extra parameters would be considered to be key/value pairs of a dictionary.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Lambda Forms&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;lambda&lt;/code&gt; statement is used to create new function objects and then return them &lt;em&gt;at runtime&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;ex. &lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;make_repeater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
&lt;span class="n"&gt;twice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_repeater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;twice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;twice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;output:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;    &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
    &lt;span class="n"&gt;wordword&lt;/span&gt;
    &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;lambda&lt;/code&gt; statement is used to create &lt;em&gt;the function object&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Essentially, &lt;em&gt;the lambda takes a parameter followed by a single expression only which becomes the body of the function and the value of this expression is returned by the new function.&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;Note that even a print statement cannot be used inside a lambda form, only &lt;em&gt;expressions&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The exec and eval statements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;exec&lt;/code&gt; statement is used to execute Python statements which are stored in a string or file.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;eval&lt;/code&gt; statement is used to evaluate valid Python expressions which are stored in a string. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The assert statement&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;to assert that something is true. &lt;/li&gt;
&lt;li&gt;For example, if you are very sure that you will have at least one element in a list you are using and want to check this, and raise an error if it is not true, then assert statement is ideal in this situation. &lt;/li&gt;
&lt;li&gt;When the assert statement fails, an AssertionError is raised.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The repr function or Backticks(`)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;to obtain a canonical string representation of the object.&lt;/li&gt;
&lt;li&gt;you will have &lt;code&gt;eval(repr(object)) == object&lt;/code&gt; most of the time.&lt;/li&gt;
&lt;li&gt;Basically, the repr function or the backticks are used to obtain a printable representation of the object.&lt;/li&gt;
&lt;li&gt;can control what your objects return for the repr function by defining the __&lt;code&gt;repr__&lt;/code&gt; method in your class.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category></entry><entry><title>linux下安装并使用java开发opencv的配置</title><link href="http://x-wei.github.io/linux%E4%B8%8B%E5%AE%89%E8%A3%85%E5%B9%B6%E4%BD%BF%E7%94%A8java%E5%BC%80%E5%8F%91opencv%E7%9A%84%E9%85%8D%E7%BD%AE.html" rel="alternate"></link><updated>2014-02-10T00:00:00+01:00</updated><author><name>mx</name></author><id>http://x-wei.github.io/linux下安装并使用java开发opencv的配置.html</id><summary type="html">&lt;p&gt;今天花了四个小时, 终于在linux下把eclipse下java开发opencv给搞定了... 至于为什么花这么久的时间... 且听我慢慢讲... &lt;/p&gt;
&lt;h2&gt;linux编译安装opencv&lt;/h2&gt;
&lt;p&gt;首先, linux下安装opencv其实不麻烦的, 参考文档即可完成:
&lt;a href="http://docs.opencv.org/trunk/doc/tutorials/introduction/linux_install/linux_install.html"&gt;http://docs.opencv.org/trunk/doc/tutorials/introduction/linux_install/linux_install.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大致有以下几个步骤:&lt;/p&gt;
&lt;p&gt;1) 安装gcc以及cmake等等乱七八糟的软件(不过ubuntu下默认差不多都有了吧...)&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;essential&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;cmake&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2) 下载opencv-2.4.8.zip并解压缩&lt;/p&gt;
&lt;p&gt;3) 新建一个build文件夹&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;opencv&lt;/span&gt;
&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4) 在终端里输入: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;cmake&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="n"&gt;CMAKE_BUILD_TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;RELEASE&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="n"&gt;CMAKE_INSTALL_PREFIX&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;
&lt;span class="n"&gt;make&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;make命令会花费几十分钟时间...
然后&lt;strong&gt;理论上&lt;/strong&gt;就结束了... 如果不用java开发的话 就OK了 比如 可以运行sample文件夹下的python代码...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是&lt;/strong&gt;, 如果要使用java开发的话 需要接着这样做.....&lt;/p&gt;
&lt;h2&gt;安装opencv-java&lt;/h2&gt;
&lt;p&gt;这一步非常DT, 因为官网上还有一个文档, 专门讲怎么用java开发的...
&lt;a href="http://docs.opencv.org/doc/tutorials/introduction/desktop_java/java_dev_intro.html"&gt;http://docs.opencv.org/doc/tutorials/introduction/desktop_java/java_dev_intro.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1) 首先, 需要安装ant: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;ant&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2) 其次 需要运行cmake, 关键是cmake的参数, 官网给的是这样的: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;JAVA_HOME&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;jvm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;oracle&lt;/span&gt;&lt;span class="err"&gt;#这句不加应该也可以的&lt;/span&gt;
&lt;span class="n"&gt;cmake&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;DBUILD_SHARED_LIBS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;OFF&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意看输出的, 如果"To be built"里面有java这一项的话, 就&lt;strong&gt;应该&lt;/strong&gt;是OK的.... 接下来只要&lt;code&gt;make -j8&lt;/code&gt; 就可以了...&lt;/p&gt;
&lt;p&gt;最坑爹的地方来了, 以这样的参数运行cmake以后, 运行&lt;code&gt;make -j8&lt;/code&gt;总是不成功, 说有错误.....&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./linux下安装并使用java开发opencv的配置/pasted_image.png" /&gt;&lt;/p&gt;
&lt;p&gt;查了半天, 发现这是一个BUG:
&lt;a href="http://code.opencv.org/issues/2859"&gt;http://code.opencv.org/issues/2859&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;那么试一试加上参数: &lt;code&gt;-DBUILD_TESTS=OFF&lt;/code&gt; 吧...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以cmake的参数要这样写才可以&lt;/strong&gt;: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -DBUILD_TESTS=OFF ..&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3) 用上面那样的参数运行cmake以后, 再: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;j8&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样就可以成功make了...&lt;/p&gt;
&lt;h2&gt;如何判断是否安装成功?&lt;/h2&gt;
&lt;p&gt;以上操作结束后, 看看build文件夹, bin目录下是不是有一个&lt;code&gt;opencv-248.jar&lt;/code&gt;文件:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./linux下安装并使用java开发opencv的配置/pasted_image001.png" /&gt;&lt;/p&gt;
&lt;p&gt;如果有的话 就说明成功安装了opencv的java组件... &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;!!注意!!&lt;/strong&gt;
&lt;strong&gt;不能用windows下opencv安装目录下的那个opencv-248.jar&lt;/strong&gt;!! 
刚才生成那个jar和windows下的jar不一样的!! (我查了MD5码... 其实看文件大小也能看出来!!)&lt;/p&gt;
&lt;h2&gt;Eclipse下的配置&lt;/h2&gt;
&lt;p&gt;这里有一篇非常好的帖子, 写的非常到位, 我就不重复了, 链接:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://exintopro.net/blog/2013/10/02/setting-up-eclipse-for-using-opencv-java-in-ubuntu/"&gt;http://exintopro.net/blog/2013/10/02/setting-up-eclipse-for-using-opencv-java-in-ubuntu/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个帖子虽然很好, 但是没有介绍编译的那一部分, 由于安装java组件时的编译过程和官网给的不一样, 所以才导致我废了半天的时间啊!......&lt;/p&gt;</summary><category term="eclipse"></category><category term="java"></category><category term="opencv"></category></entry><entry><title>java线程小结</title><link href="http://x-wei.github.io/java%E7%BA%BF%E7%A8%8B%E5%B0%8F%E7%BB%93.html" rel="alternate"></link><updated>2013-11-29T00:00:00+01:00</updated><author><name>mx</name></author><id>http://x-wei.github.io/java线程小结.html</id><summary type="html">&lt;p&gt;INF422的TD2, 这节TD是要做一个多线程筛选质数的程序, 关于java的多线程, 以前用过但是不知道啥意思, 在这里总结下. &lt;/p&gt;
&lt;h2&gt;创建进程&lt;/h2&gt;
&lt;p&gt;为了实现多线程, 需要定义一个新的class, 有两种方法: 
&lt;strong&gt;或者继承自&lt;/strong&gt;&lt;code&gt;Thread&lt;/code&gt;&lt;strong&gt;类, 或者实现&lt;/strong&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;strong&gt;接口&lt;/strong&gt;(关键是重载run()方法). &lt;/p&gt;
&lt;h3&gt;继承自Thread类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;写法1: 定义一个继承自Thread的内部类--&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;类名&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;方法&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;方法&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;
&lt;span class="err"&gt;…&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
&lt;span class="c1"&gt;// …&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;属性&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;
&lt;span class="err"&gt;属性&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;
&lt;span class="err"&gt;…&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;或者用下面种&lt;strong&gt;内联(inline)&lt;/strong&gt;的写法, 不用给这个类起名字了(不过还要给这个实例取名字): &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;实例名&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后让进程开始, 就是: 
&lt;code&gt;t.start();&lt;/code&gt;
如果用&lt;code&gt;t.run()&lt;/code&gt;的话, 则依然是并行执行的, 可能达不到多线程效果...&lt;/p&gt;
&lt;h3&gt;实现Runnable接口&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;方法1, 代码: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;类名&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;方法&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;方法&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;
&lt;span class="err"&gt;…&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="c1"&gt;// other code…&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;属性&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;
&lt;span class="err"&gt;属性&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;
&lt;span class="err"&gt;…&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法2, 内联写法:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;实例名&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;android上需要注意的一点&lt;/h2&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;"Android modifies the user interface and handles input events from &lt;strong&gt;one single&lt;/strong&gt; user interface thread. This thread is also called &lt;strong&gt;the main thread&lt;/strong&gt;."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Android collects all events in a queue and processed an instance of the Looper class.
&lt;img alt="" src="./java线程小结/pasted_image.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;所以注意要修改用户交互的组件(View, Toast, ect.)的时候, 需要在main Thread里面操作, 否则运行时会出错!!&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;那么, 当其他线程进行计算完成以后, 要刷新屏幕的显示时, 需要告知main Thread 进行更新显示:&lt;/p&gt;
&lt;p&gt;"Ajouter un nouvel objet comportant une méthode run() mettant à jour le nombre d'entier premiers (nouvel objet implémentant l'interface Runnable). À la fin du crible, le thread de calcul devra alors envoyer un message (ce nouvel objet) au thread principal pour mettre à jour l'affichage graphique. Cette mise à jour doit être faite via un appel à la méthode post() d'une instance de la classe Handler (l'objet Handler doit être instancié dans le thread principal)."&lt;/p&gt;
&lt;p&gt;Bref, 要做到多线程计算, 计算结果显示在屏幕上, 需要:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;添加一个Runnable实例("一个实现了Runnable接口的类的实例"), 重载run()方法实现calcul&lt;/li&gt;
&lt;li&gt;&lt;em&gt;一个&lt;/em&gt;&lt;a href="http://developer.android.com/reference/android/os/Handler.html"&gt;Handler&lt;/a&gt;&lt;em&gt;实例, 然后调用这个Handler的post()方法.&lt;/em&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;看看文档里是咋说的: &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;public final boolean post (Runnable r)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Added in API level 1
Causes the Runnable r to be added to the message queue. The runnable will be run on the thread to which this handler is attached.&lt;/p&gt;
&lt;p&gt;Parameters
r   The Runnable that will be executed.
Returns
Returns true if the Runnable was successfully placed in to the message queue. Returns false on failure, usually because the looper processing the message queue is exiting.&lt;/p&gt;
&lt;p&gt;意思是&lt;code&gt;handler.post(r)&lt;/code&gt;会把r(一个Runnable实例)加入message queue中去, &lt;em&gt;这个Runnable会在这个handler关联的Thread中执行&lt;/em&gt;. 所以只要handler关联的是main Thread, 就可以在这个Runnalbe里面写graphic的代码也不会出错了. &lt;/p&gt;
&lt;p&gt;如果在Activity类的声明里声明handler为一个属性: 
&lt;code&gt;private Handler handler = new Handler();&lt;/code&gt;
这个构造函数没有参数, 根据文档, "Default constructor associates this handler with the Looper for the current thread." 所以这个handler关联到了current thread, 也就是main Thread.....&lt;/p&gt;
&lt;h2&gt;例子&lt;/h2&gt;
&lt;p&gt;所以, 多线程计算, 计算结束后修改屏幕显示的话, 需要以下__三个步骤__(比上面的俩步骤多了一个, 不知道是否还可以简化): &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在主线程里声明handler, (声明成Activity的一个属性): &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;private Handler handler = new Handler();&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;写一个用于修改屏幕显示的Runnable r(也声明成一个属性了):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//code to update graphic display...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再写一个进行计算的Thread t, 在计算结束后, 用handler.post(r)实现刷新显示的效果: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//...code for calculating...&lt;/span&gt;
&lt;span class="c1"&gt;//结束计算以后, 刷新屏幕:&lt;/span&gt;
&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后在onCreate()函数里, 让Thread t 启动起来: &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;t.start();&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需要让t一直循环(监视某个flag), 当flag变为true的时候, 进行计算.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了达到这个效果, Thread t里面的run()方法需要这样写:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="c1"&gt;//...do the calculation...&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;   
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Process, Thread和Runnable的区别?&lt;/h2&gt;
&lt;p&gt;线程(Thread)是指进程(Process)中的一个执行流程，一个进程中可以运行多个线程。比如java.exe进程中可以运行很多线程。线程总是属于某个进程，进程中的多个线程共享进程的内存。&lt;/p&gt;
&lt;p&gt;参考链接: 
&lt;a href="http://www.vogella.com/articles/AndroidBackgroundProcessing/article.html"&gt;http://www.vogella.com/articles/AndroidBackgroundProcessing/article.html&lt;/a&gt;
&lt;a href="http://www.cnblogs.com/rollenholt/archive/2011/08/28/2156357.html"&gt;http://www.cnblogs.com/rollenholt/archive/2011/08/28/2156357.html&lt;/a&gt;
&lt;a href="http://developer.android.com/reference/android/os/Handler.html"&gt;http://developer.android.com/reference/android/os/Handler.html&lt;/a&gt;
&lt;a href="http://lavasoft.blog.51cto.com/62575/99150"&gt;http://lavasoft.blog.51cto.com/62575/99150&lt;/a&gt;&lt;/p&gt;</summary><category term="android"></category><category term="java"></category></entry><entry><title>ADT环境搭建</title><link href="http://x-wei.github.io/ADT%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html" rel="alternate"></link><updated>2013-11-08T00:00:00+01:00</updated><author><name>mx</name></author><id>http://x-wei.github.io/ADT环境搭建.html</id><summary type="html">&lt;p&gt;这学期INF422, 第一节课就是android安装调试环境的搭建(居然要一节课?), 这里总结一下.&lt;/p&gt;
&lt;h3&gt;第一步: 下载bundle&lt;/h3&gt;
&lt;p&gt;下载&lt;a href="http://developer.android.com/sdk/index.html"&gt;ADT-Bundle&lt;/a&gt;
解压缩以后啥都有了, 包含一个eclipse...&lt;/p&gt;
&lt;h3&gt;第二步: 修改环境变量&lt;/h3&gt;
&lt;p&gt;linux下的环境变量放在&lt;code&gt;.bashrc文件&lt;/code&gt;, 加入下面一行: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;PATH=$PATH:&amp;lt;dir&amp;gt;/sdk/tools/:&amp;lt;dir&amp;gt;/sdk/platform-tools/:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;&amp;lt;dir&amp;gt;&lt;/code&gt;是放置SDK的目录地址.&lt;/p&gt;
&lt;p&gt;测试一下好不好使, 在终端中输入&lt;code&gt;android&lt;/code&gt;, 看是否会弹出SDK manager&lt;/p&gt;
&lt;h3&gt;第三步: 新建一个virtual machine&lt;/h3&gt;
&lt;p&gt;可以用eclipse的AVDmanager做, 也可以用命令行做. &lt;/p&gt;
&lt;p&gt;输入:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;android list targets&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;找到想要的target(我们要4.1.2)的那个id(一个数字), 然后, 运行命令: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;android create avd -t &amp;lt;target_id&amp;gt; -n inf422 --abi armeabi-v7a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样就生成了一个名叫"inf422"的虚拟机&lt;/p&gt;
&lt;h3&gt;第四步: 关联到自定义的镜像&lt;/h3&gt;
&lt;p&gt;inf422这门课提供了一个修改过的android镜像, 在&lt;a href="http://www.enseignement.polytechnique.fr/informatique/INF422/ramdisk.img"&gt;这里&lt;/a&gt;和&lt;a href="http://www.enseignement.polytechnique.fr/informatique/INF422/kernel-qemu"&gt;这里&lt;/a&gt;下载, 下载到本地的目录上了以后, 运行: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;emulator @inf422 -ramdisk &amp;lt;IMAGES&amp;gt;/ramdisk.img -kernel &amp;lt;IMAGES&amp;gt;/kernel-qemu&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;IMAGES&gt;是刚刚存放那俩镜像文件的目录. &lt;/p&gt;
&lt;h3&gt;第五步: telnet连接虚拟机&lt;/h3&gt;
&lt;p&gt;课程里用的emulator使用telnet服务器, 且是在虚拟机的23端口接收信息. 先重定向一下端口, 定向到localhost的4444端口:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;adb forward tcp:4444 tcp:23&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样, 以后要登录模拟器emulator的时候, 只需要输入: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;telnet localhost 4444&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(用户名是root, 不要密码)&lt;/p&gt;
&lt;h2&gt;第六步: 用两种方法进入虚拟机&lt;/h2&gt;
&lt;p&gt;刚才的4444端口是进入emulator用的, 而打开虚拟机的时候, 窗口标题是一个数字再加虚拟机的名字(我的显示的是"5554:inf422"), 这个5554是另外一个端口, 用于用shell方式登陆, 登陆后可以使用shell命令查看文件或者进行一些操作. &lt;/p&gt;
&lt;p&gt;而与之对应, 从4444端口登陆, 则是进入emulator的控制console&lt;/p&gt;
&lt;p&gt;&lt;em&gt;两种方法和AVD交流:&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;console: linux命令, 命令行&lt;/li&gt;
&lt;li&gt;emulator: 发送命令产生一些事件(电话, 短信, GPS等)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第二种方式可以模拟一些手机事件, 很有用... 使用help命令查看emulator怎么使用&lt;/p&gt;</summary><category term="android"></category><category term="inf422"></category></entry><entry><title>android开发视频教程(重制版) 第一季 课程笔记</title><link href="http://x-wei.github.io/android%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E7%AC%AC%E4%B8%80%E5%AD%A3%E7%AC%94%E8%AE%B0.html" rel="alternate"></link><updated>2013-07-31T00:00:00+02:00</updated><author><name>mx</name></author><id>http://x-wei.github.io/android开发教程第一季笔记.html</id><summary type="html">&lt;h1&gt;S01E02: 开发环境搭建&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;直接去 developer.android.com/sdk/ 下载bundle解压即可, 里面包含eclipse&lt;/li&gt;
&lt;li&gt;新建一个模拟器: 内部存储一般64MB足矣:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="./android开发教程第一季笔记/pasted_image002.png" /&gt;&lt;/p&gt;
&lt;h1&gt;S01E03: android项目目录结构&lt;/h1&gt;
&lt;h4&gt;第一个android程序&lt;/h4&gt;
&lt;p&gt;new--&amp;gt;android application&lt;/p&gt;
&lt;h4&gt;目录结构&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="./android开发教程第一季笔记/pasted_image003.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;com.example.helloworld这个包名一般为网址倒着写, android是按照包名来区分不同APP的&lt;/li&gt;
&lt;li&gt;src/目录下存放java程序&lt;/li&gt;
&lt;li&gt;gen/目录下存放系统自动生成的文件, R.java里给每一个控件或变量赋予一个id, 千万__不要手动修改R,.java内容__!!&lt;/li&gt;
&lt;li&gt;assets/目录下和res/目录下都可以放各种外部文件(ex. 图片), 但是assets下的文件不会在R.java中生成id&lt;/li&gt;
&lt;li&gt;res/layout/ 存放布局文件(xml格式)&lt;/li&gt;
&lt;li&gt;AndroidManifest.xml用于统筹&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;S01E04: 技术结构&lt;/h1&gt;
&lt;h4&gt;四层结构图&lt;/h4&gt;
&lt;p&gt;开发位于最上层application
&lt;img alt="" src="./android开发教程第一季笔记/pasted_image004.png" /&gt;&lt;/p&gt;
&lt;h4&gt;基于组件的应用程序开发&lt;/h4&gt;
&lt;p&gt;搭积木&lt;/p&gt;
&lt;h4&gt;常见组件&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;activity(负责用户交互); &lt;/li&gt;
&lt;li&gt;service(后台处理数据); &lt;/li&gt;
&lt;li&gt;Content Provider(对外提供数据); &lt;/li&gt;
&lt;li&gt;BroadcastReceiver(接收broadcast)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;S01E05: activity初步&lt;/h1&gt;
&lt;h4&gt;Activity启动基本流程&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="./android开发教程第一季笔记/pasted_image006.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AndroidManifest.xml里面指定, 程序运行后执行MainActivity.java&lt;/li&gt;
&lt;li&gt;MainActivity.java的onCreate()函数里setContentView(R.layout.activity_main); 读取activity_main.xml文件并显示&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Activity与布局文件&lt;/h4&gt;
&lt;p&gt;一一对应 (eclipse编辑器里有图形化预览界面)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./android开发教程第一季笔记/pasted_image007.png" /&gt;&lt;/p&gt;
&lt;h4&gt;在Activity当中获取代表控件对象&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先在activity_main.xml里定义控件时, 为其指定一个id: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;@+id/textView1&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+id&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;表示新建一个&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;→ 自动在R.java里生成一个id:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;textView1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0x7f080003&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;→ 之后在MainActivity.java里, 先声明成员变量:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;private TextView tv&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;→ 在onCreate()中, 通过id获得这个控件对象:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;tv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TextView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;findViewById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;textView1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//有向下转型: TextView是View的子类&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;→ 之后就可以调用tv的各种方法了,具体见SDK里的文档i(android.widget.TextView), 从而实现再java程序里动态修改控件属性.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;S01E06: View&lt;/h1&gt;
&lt;h4&gt;View的基本概念&lt;/h4&gt;
&lt;p&gt;View是一个控件?...&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./android开发教程第一季笔记/pasted_image008.png" /&gt;&lt;/p&gt;
&lt;h4&gt;为一个View绑定监听器&lt;/h4&gt;
&lt;p&gt;(我就认为View是一个控件了)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;java程序里获取控件代表的对象: findViewById()方法&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;bt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;findViewById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;定义一个&lt;strong&gt;内部类&lt;/strong&gt; 实现监听器接口:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// **使用一个内部类定义监听器**&lt;/span&gt;
&lt;span class="c1"&gt;// Button的监听器 实现OnClickListener接口, OnClickListener接口是处理点击事件的&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;ButtonListener&lt;/span&gt; &lt;span class="n"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;OnClickListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
&lt;span class="c1"&gt;// 实现该接口的抽象方法onClick&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//do something......&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="c1"&gt;// end 内部类ButtonListener&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;onCreate()里生成一个监听器对象, 并为控件绑定该监听器&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;ButtonListener&lt;/span&gt; &lt;span class="n"&gt;bl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ButtonListener&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;// 生成一个监听器对象&lt;/span&gt;
&lt;span class="n"&gt;bt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setOnClickListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// **这句话把监听器和事件联系在一起了** 点击这个按钮 就会执行它的onclick方法&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个监听器可以绑定给多个控件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;另法&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以直接写在setOnClickListener参数里, 不用给内部类起名字: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;    &lt;span class="n"&gt;bt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setOnClickListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;OnClickListener&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//do something......&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;S01E07: 布局&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;所谓的控件布局方法,就是指控制控件在Activity当中的位置、大小、颜色以及其他控件样式属性的方法。&lt;/li&gt;
&lt;li&gt;布局可以用xml布局文件(ex. /res/layout/activity_main.xml) 也可以在java文件里完成控件布局&lt;/li&gt;
&lt;li&gt;最常用: 线性布局LinearLayout, 相对布局RelativeLayout&lt;/li&gt;
&lt;li&gt;先暂时用线性布局LinearLayout, 最简单&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;S01E08: 距离单位; 边距&lt;/h1&gt;
&lt;h4&gt;距离单位: px, dp, sp&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;px&lt;/strong&gt;=像素点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用px指定控件大小, 则不同分辨率手机显示结果不同, 非常麻烦.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dpi计算公式:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="./android开发教程第一季笔记/pasted_image009.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dp&lt;/strong&gt;=dip(Device Independent pixels) 是设备无关的像素单位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;换算公式&lt;code&gt;px = dp * (dpi / 160)&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;在320*480的屏幕上, dp与px相等 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总之一般指定控件大小就用dp&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;sp&lt;/strong&gt;=scaled pixels 可改变大小的像素单位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当用户修改手机显示字体时,sp会随之改变&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sp单位通常用于指定字体的大小&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;内外边距: margin, padding&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;margin: 控件离其他控件的距离&lt;/li&gt;
&lt;li&gt;padding: 控件内容离控件边框的距离&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="./android开发教程第一季笔记/pasted_image010.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置内边距与外边距:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;layout_margin, layout_marginTop, ...
padding, paddingTop, ...&lt;/p&gt;
&lt;h2&gt;S01E09: CheckBox多选框&lt;/h2&gt;
&lt;p&gt;效果: 
&lt;img alt="" src="./android开发教程第一季笔记/pasted_image011.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;布局文件里使用&lt;CheckBox/&gt;标签&lt;/li&gt;
&lt;li&gt;OnClickListener与OnCheckedChangeListener监听器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt; 这俩监听器是有一定区别的, OnClickListener必须是用户点击才能触发, OnCheckedChangeListener则是只要状态改变了(即使是由程序里改变的)就会触发&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以几个CheckBox绑定上同一个监听器&lt;/li&gt;
&lt;li&gt;OnClickListener接口的方法: public void onClick(View v) 有一个&lt;strong&gt;参数View v&lt;/strong&gt;, 指的是是哪个控件被点击了, &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在onClick()中要处理这个控件时, 使用:&lt;code&gt;CheckBox cb = (CheckBox) v;&lt;/code&gt;
得到这个控件对象, 或者通过其&lt;code&gt;id: v.getId()&lt;/code&gt;也可以&lt;/p&gt;
&lt;h2&gt;S01E10: 单选框RadioButton&lt;/h2&gt;
&lt;p&gt;效果: &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./android开发教程第一季笔记/pasted_image013.png" /&gt;&lt;/p&gt;
&lt;h4&gt;RadioGroup&lt;/h4&gt;
&lt;p&gt;单选按钮RadioButton需要放在一个RadioGroup中&lt;/p&gt;
&lt;p&gt;xml代码:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt; &lt;span class="nt"&gt;&amp;lt;RadioGroup&lt;/span&gt;
    &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/radioGroupId&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0dp&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_gravity=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;center&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:orientation=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;vertical&amp;quot;&lt;/span&gt; 
    &lt;span class="na"&gt;android:layout_weight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;RadioButton&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/radioButton_h&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;homme&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;RadioButton&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/radioButton_f&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;femmee&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/RadioGroup&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- 像RadioGroup这样写的xml标签可以拥有子标签, 而像RadioButton这种则不能 →&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;RadioGroup的OnCheckedChangeListener&lt;/h4&gt;
&lt;p&gt;有俩参数... (RadioGroup group, int checkedId)&lt;/p&gt;
&lt;p&gt;直接上代码吧: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;RadioGroupListener&lt;/span&gt; &lt;span class="n"&gt;implements&lt;/span&gt;
&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RadioGroup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OnCheckedChangeListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
&lt;span class="c1"&gt;// 注意看这俩参数!&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onCheckedChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RadioGroup&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;checkedId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="c1"&gt;// checkedId是被选择的哪个RadioButton的Id (而不是什么序号)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkedId&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;radioButton_h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;// 用两种方法得到想要的id: 1. 使用R中定义的&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;tv3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Homme!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;rb_h2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setChecked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkedId&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;rb_f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getId&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="c1"&gt;// 2. 使用getid()方法&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;tv3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Femme!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;rb_f2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setChecked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;S01E11: 显示图片ImageView&lt;/h1&gt;
&lt;h4&gt;插图的方法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;把图片放在./res/drawable 里面(有好几个分辨率的drawable, 随便一个...), ex. 放在了./res/drawable-hdpi/pic.jpg&lt;/li&gt;
&lt;li&gt;→ 会在R.java里生成其&lt;code&gt;id: pic&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在xml中使用&lt;ImageView/&gt;标签&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;引用放好的图: 
&lt;code&gt;android:src="@drawable/pic"&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;ScaleType&lt;/h4&gt;
&lt;p&gt;ScaleType属性控制图片缩放的尺寸, 有几个可选: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fitcenter等比例缩放并居中显示; &lt;/li&gt;
&lt;li&gt;fitstart靠上显示; &lt;/li&gt;
&lt;li&gt;center 若图片较大则把中央部分截取出来显示,不缩放若图片小则直接居中显示, 也不缩放 &lt;/li&gt;
&lt;li&gt;centerCrop 缩放并进行裁剪以适应ImiageView&lt;/li&gt;
&lt;li&gt;centerInside 要是图片大就缩放放进去, 图片小就不缩放直接放进去&lt;/li&gt;
&lt;li&gt;Fit_XY缩放成和ImageView一样大&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;代码片段: &lt;/strong&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ImageView&lt;/span&gt;
    &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/imageView1Id&amp;quot;&lt;/span&gt;
    &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;layout_width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;60dp&amp;quot;&lt;/span&gt;
    &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;layout_height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;70dp&amp;quot;&lt;/span&gt;
    &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;background&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#FF0000&amp;quot;&lt;/span&gt;
    &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;scaleType&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fitCenter&amp;quot;&lt;/span&gt;
    &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;layout_weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
    &lt;span class="nl"&gt;android:&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@drawable/pic&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;@drawable/pic&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;是对应于&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;实际上图片也可以放在&lt;/span&gt;&lt;span class="n"&gt;assets&lt;/span&gt;&lt;span class="err"&gt;文件夹&lt;/span&gt; &lt;span class="err"&gt;或者网络上&lt;/span&gt; &lt;span class="err"&gt;或者&lt;/span&gt;&lt;span class="n"&gt;SD&lt;/span&gt;&lt;span class="err"&gt;卡上&lt;/span&gt; &lt;span class="err"&gt;都可以&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;不过以后再用&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;S01E12: 线性布局深入&lt;/h1&gt;
&lt;h4&gt;线性布局嵌套&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在LinearLayout里面再加入LinearLayout&lt;/li&gt;
&lt;li&gt;"直接父/子控件"&lt;/li&gt;
&lt;li&gt;嵌套层数没有限制&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;layout_weight&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;子控件并未占满父控件的所有空间时才有用&lt;/li&gt;
&lt;li&gt;layout_weight的值用于指定&lt;strong&gt;空闲空间的&lt;/strong&gt;分配__比例__: weight都是1的话--是按比例平分父控件的__剩余(!!!)__空间, 而不是整个父控件被按比例分配!&lt;/li&gt;
&lt;li&gt;如果想让父控件按比例分配: 很简单, __把宽度改为0dp__即可(那么父控件剩余空间=父控件总空间!)&lt;/li&gt;
&lt;li&gt;使用了线性布局嵌套以及weight属性, 已经可以制作一些相对较复杂的布局了&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;S01E13: 相对布局-I&lt;/h1&gt;
&lt;h4&gt;相对布局def&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;相对布局是通过指定当前控件__与兄弟控件或者是父控件之间的相对位置__,从而达到控制控件位置的目的  &lt;/li&gt;
&lt;li&gt;实现同样界面, 用相对布局比用线性布局简单--&lt;strong&gt;UI性能&lt;/strong&gt;更好些&lt;/li&gt;
&lt;li&gt;UI性能: 布局嵌套越多, 性能越差!!...&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;基本思路&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;未指定位置时: 默认往左上角放(可能会重叠!)&lt;/li&gt;
&lt;li&gt;可以先放一个控件, 然后第二个控件指定其相对位置&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;实现方法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;android:layout_below/layout_above等等等等... 放置在其左(右)边; 属性的值都是其他控件的id&lt;/li&gt;
&lt;li&gt;android:id="@+id/tvv1"是创建一个新id; android:layout_toRightOf="@id/tvv1"则是引用已有的id(没有加号)&lt;/li&gt;
&lt;li&gt;android:layout_alignLeft/Right等等等等..... 左(右)对齐; 属性的值都是其他控件的id  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;S01E14: 相对布局II&lt;/h1&gt;
&lt;h4&gt;对齐到基准线&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;基准线:为了保证印刷字母的整齐而划定的线 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="./android开发教程第一季笔记/pasted_image.png" /&gt;&lt;/p&gt;
&lt;p&gt;第三条线就是所谓的基准线(baseline)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ex. 两个TextView__的基准线__相互对齐&lt;/li&gt;
&lt;li&gt;作用: 当俩TextView的字体大小不相同时...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./android开发教程第一季笔记/pasted_image001.png" /&gt;&lt;/p&gt;
&lt;h4&gt;和父控件对齐&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;android:layout_alignParentLeft/Right等等... 属性的值为true/false(因为只有一个直接父控件)&lt;/li&gt;
&lt;li&gt;android:layout_centerInParent/layout_centerHorizontal等等...&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;S01E15: 相对布局III&lt;/h1&gt;
&lt;h4&gt;RelativeLayout布局的新属性(Android 4.2)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;android:layout_alignStart/End等 值是其他控件的id, 头部和尾部对齐&lt;/li&gt;
&lt;li&gt;android:layout_alignParentStart/End, 值是true/false&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;相对布局小练习&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="./android开发教程第一季笔记/pasted_image014.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码片段:&lt;/strong&gt; &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt; &lt;span class="nt"&gt;&amp;lt;RelativeLayout&lt;/span&gt;
            &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/RL0&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fill_parent&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fill_parent&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;
                &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/tv1&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:layout_centerHorizontal=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:gravity=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;center&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;login...&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:textSize=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;16sp&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;EditText&lt;/span&gt;
                &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/editText1&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:layout_below=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@id/tv1&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:layout_centerHorizontal=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:ems=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:hint=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;username&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;requestFocus&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/EditText&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;EditText&lt;/span&gt;
                &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/editText2&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:layout_below=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@id/editText1&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:layout_centerHorizontal=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:ems=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:hint=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:inputType=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;textPassword&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt;
                &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/button1&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:layout_alignParentRight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:layout_below=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/editText2&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;login&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt;
                &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/button2&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:layout_below=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/editText2&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:layout_toLeftOf=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/button1&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cancel&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;(file:///%3E)&lt;/span&gt;
 &lt;span class="err"&gt;&amp;lt;/RelativeLayout&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;S01E16: 时间和日期 TimePicker/DatePicker&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;TimePicker/&gt; &lt;DatePicker/&gt;标签&lt;/li&gt;
&lt;li&gt;文档: android.widget.TimePicker/android.widget.DatePicker&lt;/li&gt;
&lt;li&gt;OnTimeChangedListener的onTimeChanged函数: public void onTimeChanged(TimePicker view, int hourOfDay, int minute) 仨参数&lt;/li&gt;
&lt;li&gt;getCurrentHour(); getCurrentMinute(); getMonth(); getDayOfMonth()等函数, 同理有set函数......&lt;/li&gt;
&lt;li&gt;注意月份是从零算起!!&lt;/li&gt;
&lt;li&gt;setIs24HourView() 切换24小时显示&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;S01E17: 进度条ProgressBar&lt;/h1&gt;
&lt;h4&gt;各种进度条&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="./android开发教程第一季笔记/pasted_image015.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./android开发教程第一季笔记/pasted_image016.png" /&gt;&lt;/p&gt;
&lt;h4&gt;进度条的属性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;风格Style: 转圈圈: 垂直风格(默认); 一条线的进度条: Horizontal&lt;/li&gt;
&lt;li&gt;最大值: max&lt;/li&gt;
&lt;li&gt;当前进度:progress&lt;/li&gt;
&lt;li&gt;次要进度的值:SecondaryProgress (ex.次要进度: 解压缩文件时, 在线看视频时...)&lt;/li&gt;
&lt;li&gt;isIndeterminate()断进度条时不时不明确的(打酱油的, 比如转圈圈), 同理有set方法, 不过只能对水平风格适用.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;S01E18: SeekBar和RatingBar&lt;/h1&gt;
&lt;h4&gt;SeekBar&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="./android开发教程第一季笔记/pasted_image017.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;属性: max/progress/&lt;/li&gt;
&lt;li&gt;监听器接口OnSeekBarChangeListener有三个函数要重写: &lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;SeekBarListener&lt;/span&gt; &lt;span class="n"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;OnSeekBarChangeListener&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;

&lt;span class="cm"&gt;* seekBar 该对象指的是触发了监听器的SeekBar对象&lt;/span&gt;
&lt;span class="cm"&gt;* progress 指的是当前SeekBar的进度&lt;/span&gt;
&lt;span class="cm"&gt;* fromUser 指是不是用户手动改变的进度&lt;/span&gt;

&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onProgressChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SeekBar&lt;/span&gt; &lt;span class="n"&gt;SeekBar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;fromUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;progress:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;progress&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,fromUser:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fromUser&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onStartTrackingTouch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SeekBar&lt;/span&gt; &lt;span class="n"&gt;seekBar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;onStart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onStopTrackingTouch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SeekBar&lt;/span&gt; &lt;span class="n"&gt;seekBar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;onStop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;RatingBar&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="./android开发教程第一季笔记/pasted_image018.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;属性: numStars(星星个数), progress, stepSize(步进)&lt;/li&gt;
&lt;li&gt;监听器代码:&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;RatingBarListener&lt;/span&gt; &lt;span class="n"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;OnRatingBarChangeListener&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onRatingChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RatingBar&lt;/span&gt; &lt;span class="n"&gt;ratingBar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;rating&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;fromUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rating:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rating&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;,fromUser:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fromUser&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;</summary><category term="android"></category></entry><entry><title>ssh远程登录学校机房电脑</title><link href="http://x-wei.github.io/ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E5%AD%A6%E6%A0%A1%E6%9C%BA%E6%88%BF%E7%94%B5%E8%84%91.html" rel="alternate"></link><updated>2013-07-02T00:00:00+02:00</updated><author><name>mx</name></author><id>http://x-wei.github.io/ssh远程登录学校机房电脑.html</id><summary type="html">&lt;p&gt;X&lt;a href="http://www.enseignement.polytechnique.fr/profs/informatique/Philippe.Chassignet/MOYENS/stations.html"&gt;机房的电脑&lt;/a&gt;配置还是很高的, 所以...&lt;/p&gt;
&lt;p&gt;远程登录的命令是: 
    ssh -X nom.prenom@truite.polytechnique.fr&lt;/p&gt;
&lt;p&gt;(-X命令表示允许使用X程序.)&lt;/p&gt;
&lt;p&gt;登录进去以后, 可以在终端里输入命令, 比如查看系统板本: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt;  &lt;span class="n"&gt;lsb_release&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;LSB&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ia32&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;noarch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;graphics&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ia32&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;graphics&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;noarch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;printing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ia32&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;printing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;noarch&lt;/span&gt;
&lt;span class="n"&gt;Distributor&lt;/span&gt; &lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="nl"&gt;Description:&lt;/span&gt;    &lt;span class="n"&gt;CentOS&lt;/span&gt;
&lt;span class="nl"&gt;Release:&lt;/span&gt;    &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="nl"&gt;Codename:&lt;/span&gt;   &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;机房是centOS, 高效稳定. &lt;/p&gt;
&lt;p&gt;然后可以在终端输入命令来启动程序, 比如&lt;code&gt;eclipse &amp;amp;,&lt;/code&gt;就会在你这边的电脑显示出来eclipse的窗口 (加"&amp;amp;"是可以使多个程序同时启动).&lt;/p&gt;
&lt;p&gt;另外, 远程拷贝到本地:
    scp xing.wei@france.polytechnique.fr:/users/eleves-b/x2012/xing.wei/  /home/wx
几个常用的程序: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;eclipse&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;
&lt;span class="n"&gt;scilab&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; 
&lt;span class="n"&gt;firefox&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可惜不知道咋能显示远程的桌面, 不过这也差不多够了, 以后用eclipse或者scilab这类比较"大"的程序, 直接用机房的工作站做好了...&lt;/p&gt;</summary><category term="shell"></category></entry><entry><title>网页图片自动适应浏览器宽度</title><link href="http://x-wei.github.io/%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E9%80%82%E5%BA%94%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%BD%E5%BA%A6.html" rel="alternate"></link><updated>2013-03-28T20:36:00+01:00</updated><author><name>mx</name></author><id>http://x-wei.github.io/网页图片自动适应浏览器宽度.html</id><summary type="html">&lt;p&gt;眼看三月又要结束了, blog还没有更新, 拿来以前写在zim里的一条笔记充数... &lt;/p&gt;
&lt;p&gt;有了zim以后, 几乎不再用office了, 常用它编辑一些富文本, 比如加粗, 下划线, 斜体什么的, 有快捷键操作, 很方便, 插图也很简单. zim是我认为的神器(神器=小巧+强大)之一. &lt;/p&gt;
&lt;p&gt;有时候用zim写好的笔记给别人看时, 直接按"ctrl+p"就可以打印成网页的格式了, 非常方便(而且得承认, 单论富文本的显示效果, 网页格式 &amp;gt; pdf格式 &amp;gt; doc格式). 只是有一点不太好, 就是有时插入的照片很大, 在浏览器里查看的时候显示的还是原尺寸图像, 非常方便...&lt;/p&gt;
&lt;p&gt;查了一下, 其实只要在html文件关于插入图片那一行加入&lt;code&gt;width="100%" height="100%" style="z-index:-100"&lt;/code&gt;就可以了.&lt;/p&gt;
&lt;p&gt;比如, 在zim生成的html文件里, 这样替换就可以了: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;img src="./xxx网页_files/IMG_1186.JPG" alt="" &amp;gt;&amp;lt;br&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;⇒&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;img src="./xxx网页_files/IMG_1186.JPG" alt="" width="100%" height="100%" style="z-index:-100"&amp;gt;&amp;lt;br&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即进行替换:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;" alt=""&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;⇒&lt;/p&gt;
&lt;p&gt;&lt;code&gt;" alt="" width="100%" height="100%" style="z-index:-100"&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个我倒是时常用到, 比如给家人发最近活动的照片时 , 可以用zim写上一些文字作为照片的注释, 然后生成网页文件然后打包发掉...&lt;/p&gt;
&lt;p&gt;OK, 水文结束...&lt;/p&gt;</summary></entry><entry><title>水源PPP板图片下载器</title><link href="http://x-wei.github.io/%E6%B0%B4%E6%BA%90PPP%E6%9D%BF%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD%E5%99%A8.html" rel="alternate"></link><updated>2012-06-07T20:14:00+02:00</updated><author><name>mx</name></author><id>http://x-wei.github.io/水源PPP板图片下载器.html</id><summary type="html">&lt;p&gt;这个其实是三月份的时候做的, 当时刚刚学会用urllib和正则表达式做一些爬虫, 于是结合人民群众的需要, 写了个小脚本(福利~) &lt;/p&gt;
&lt;p&gt;不过现在我还只是会照葫芦画瓢那样用urllib, 没什么长进...&lt;/p&gt;
&lt;p&gt;github地址: &lt;a href="https://github.com/X-Wei/yssy_ppp_pic_downloader"&gt;https://github.com/X-Wei/yssy_ppp_pic_downloader&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;p&gt;功能就是下载水源ppperson板里帖子的图片, 并且每个帖子一个文件夹放好. 通过修改main函数可以选择下载最近一页的帖子还是下载全部帖子(或者最近几页的帖子)&lt;/p&gt;
&lt;p&gt;原理很简单, 分析网页的html代码, 用正则表达式找出图片的地址然后下载到本地. 当时我已经写了两三个简单的爬虫, 所以这个写得蛮快, 而且只用50行就搞定了...&lt;/p&gt;
&lt;p&gt;不会用多线程, 只能一张一张下载, 帖子数目实在太多了, 我让它跑了一晚上, 第二天跑完, 下载了8个G的图, 几千个文件夹(囧)......&lt;/p&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;p&gt;不过还是遇到了一些问题, 比较老的帖子会有些图片404, 这时或者这个帖子对应的文件夹为空, 或者里面的图片其实不是图片, 而是出错信息的html代码(虽然看后缀是个图片). 我需要把那些不是图片的文件删掉, 而且要删掉所有的空文件夹. &lt;/p&gt;
&lt;p&gt;删除不是图片的文件(其实应该是删除纯文本文件), 在水源发贴问, 用shell命令(perl)做到了(虽然不明白为什么这样写...):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find yssy_ppp/ -type f | perl -ne 'chomp;unlink "$_" if -T $_'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;关于删除空目录, 发现&lt;code&gt;rmdir&lt;/code&gt;命令就已经可以了, 会删除空文件夹, 非空文件夹不会删除(虽然会显示警告).&lt;/p&gt;
&lt;p&gt;python里面调用shell命令只需要:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;os.system("shell_command")&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;所以, 只需要在程序的最后加上两行:
    os.system('''find yssy_ppp/ -type f | perl -ne 'chomp;unlink "$&lt;em&gt;" if -T $&lt;/em&gt;' ''')
    os.system('rmdir yssy_ppp/*')&lt;/p&gt;
&lt;p&gt;虽然终端里运行时最后会因为那个&lt;code&gt;rmdir&lt;/code&gt;命令出一堆警告, 但是既然功能实现了就懒得改了...&lt;/p&gt;
&lt;p&gt;3.&lt;/p&gt;
&lt;p&gt;还写(改写)过一个人人相册下载的脚本, 不过需要改进, 不知毕业前能不能搞定......&lt;/p&gt;</summary><category term="git"></category><category term="python"></category><category term="shell"></category></entry><entry><title>用pandoc自由转换markdown与html格式</title><link href="http://x-wei.github.io/%E7%94%A8pandoc%E8%87%AA%E7%94%B1%E8%BD%AC%E6%8D%A2markdown%E4%B8%8Ehtml%E6%A0%BC%E5%BC%8F.html" rel="alternate"></link><updated>2012-06-07T00:00:00+02:00</updated><author><name>mx</name></author><id>http://x-wei.github.io/用pandoc自由转换markdown与html格式.html</id><summary type="html">&lt;p&gt;markdown虽然写起来方便, 但是要预览的话还要用ReText打开, 而且ReText好像是Qt程序, 打开文件时不如别的编辑器那么流畅. 所以想找一个可以把markdown文件变成html格式的工具.&lt;/p&gt;
&lt;p&gt;我甚至搜了很久"markdown2html"(github上居然可以搜到好几个项目...) 而没有注意到, 在终端输入"html2markdown"时显示的警告:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;html2markdown&lt;/span&gt;
&lt;span class="err"&gt;程序“&lt;/span&gt;&lt;span class="n"&gt;html2markdown&lt;/span&gt;&lt;span class="err"&gt;”尚未安装。&lt;/span&gt;  &lt;span class="err"&gt;您可以使用以下命令安装：&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pandoc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;后来安装了pandoc(&lt;code&gt;sudo apt-get install pandoc&lt;/code&gt;), 其实只要看看帮助就知道咋用了: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pandoc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;
&lt;span class="n"&gt;pandoc&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;OPTIONS&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;FILES&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Input&lt;/span&gt; &lt;span class="n"&gt;formats&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;native&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;latex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;latex&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;lhs&lt;/span&gt;
&lt;span class="n"&gt;Output&lt;/span&gt; &lt;span class="n"&gt;formats&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;native&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;docbook&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opendocument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;odt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;latex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;latex&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;texinfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;man&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;lhs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mediawiki&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rtf&lt;/span&gt;
&lt;span class="nl"&gt;Options:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;FORMAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;FORMAT&lt;/span&gt;  &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FORMAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FORMAT&lt;/span&gt;                    
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;FORMAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;FORMAT&lt;/span&gt;  &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FORMAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FORMAT&lt;/span&gt;                     
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;                    &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;standalone&lt;/span&gt;                                    
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;FILENAME&lt;/span&gt;           &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FILENAME&lt;/span&gt;                               
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;                    &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;preserve&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tabs&lt;/span&gt;                                 
                        &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;tab&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TABSTOP&lt;/span&gt;                              
                        &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;strict&lt;/span&gt;                                        
                        &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;reference&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;links&lt;/span&gt;                               
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;                    &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;                                     
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;                    &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;smart&lt;/span&gt;                                         
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;               &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;latexmathml&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;asciimathml&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;        
                        &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;mathml&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                                  
                        &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;mimetex&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                                 
                        &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;jsmath&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                                  
                        &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;gladtex&lt;/span&gt;                                       
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;                    &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;incremental&lt;/span&gt;                                   
                        &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;xetex&lt;/span&gt;                                         
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;                    &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sections&lt;/span&gt;                               
                        &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;wrap&lt;/span&gt;                                       
                        &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;sanitize&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;                                 
                        &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;obfuscation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;javascript&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;references&lt;/span&gt;  
                        &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;STRING&lt;/span&gt;                              
                        &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;indented&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;STRING&lt;/span&gt;                  
                        &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;toc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;contents&lt;/span&gt;                      
                        &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;LEVEL&lt;/span&gt;                       
                        &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FILENAME&lt;/span&gt;                             
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="n"&gt;FILENAME&lt;/span&gt;           &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FILENAME&lt;/span&gt;                             
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;                &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;                                       
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="n"&gt;FILENAME&lt;/span&gt;           &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FILENAME&lt;/span&gt;                    
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="n"&gt;FILENAME&lt;/span&gt;           &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FILENAME&lt;/span&gt;                  
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;FILENAME&lt;/span&gt;           &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;after&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FILENAME&lt;/span&gt;                   
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;FILENAME&lt;/span&gt;           &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FILENAME&lt;/span&gt;                        
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;STRING&lt;/span&gt;             &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;STRING&lt;/span&gt;                           
                        &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;reference&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;odt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FILENAME&lt;/span&gt;                        
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="n"&gt;FORMAT&lt;/span&gt;             &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FORMAT&lt;/span&gt;                 
                        &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DIRECTORY&lt;/span&gt;                            
                        &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;                                     
                        &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;ignore&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;                                   
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;                    &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;                                       
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;                    &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;真是more than I've expected! markdown/rst/html/latex之间可以互转!&lt;/p&gt;
&lt;p&gt;使用pandoc命令就可以在随便转换了, 示例, 把demo.md输出成demo.html:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$pandoc -f markdown -t html -o demo.html demo.md&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者直接:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$pandoc -f markdown -t html -o demo.html demo.md&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我觉得这个实在是很有用的一条命令~&lt;/p&gt;</summary><category term="markdown"></category></entry><entry><title>交大beamer模板</title><link href="http://x-wei.github.io/beamer_template.html" rel="alternate"></link><updated>2012-06-02T00:00:00+02:00</updated><author><name>mx</name></author><id>http://x-wei.github.io/beamer_template.html</id><summary type="html">&lt;p&gt;毕设完了, 把答辩时用的beamer模板拿出来分享下.&lt;/p&gt;
&lt;p&gt;github项目地址:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/X-Wei/aBeamerTemplate4SJTU"&gt;https://github.com/X-Wei/aBeamerTemplate4SJTU&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我是tex菜鸟, 基本是遇见什么问题然后上网搜一通找到解决方案... 这个模板自然也是参考的别人的了...&lt;/p&gt;
&lt;p&gt;参考自&lt;a href="http://yixf.name/2011/06/21/%E4%BD%BF%E7%94%A8xetex%E7%9A%84beamer%E6%A8%A1%E7%89%88/"&gt;Yixf’s blog&lt;/a&gt;, 我只是修改了一下主题, 换了一下交大的图标, 并且做了一些常用功能的例子...&lt;/p&gt;
&lt;p&gt;效果截图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./beamer_template/Screenshot.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用xelatex编译生成, latex估计不行, xelatex的配置参考&lt;a href="http://x-wei.github.com/xelatex_zh.html"&gt;这里&lt;/a&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑内容直接修改beame_body.tex即可, 改变设置一般在beamer_header.tex里&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我用的是文泉驿的字体, 可以修改beamer_header.tex改变字体设置, 查看已安装的中文字体的命令为: &lt;code&gt;fc-list :lang=zh-cn&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;个人一点感觉: 用tex写ppt有时也会因为少些括号或者什么地方没注意老编译不过, 所以用tex写也不一定能比用powerpoint方便, 不论啥工具, 只要能&lt;strong&gt;get things done&lt;/strong&gt;,就是好工具~&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary><category term="tex"></category><category term="git"></category></entry><entry><title>关于用pelican写博客的三点tips</title><link href="http://x-wei.github.io/%E5%85%B3%E4%BA%8E%E7%94%A8pelican%E5%86%99%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%89%E7%82%B9tips.html" rel="alternate"></link><updated>2012-05-27T00:00:00+02:00</updated><author><name>mx</name></author><id>http://x-wei.github.io/关于用pelican写博客的三点tips.html</id><summary type="html">&lt;h1&gt;1.插入视频&lt;/h1&gt;
&lt;p&gt;效果就像校内网日志那样, 可以内嵌的视频.&lt;/p&gt;
&lt;p&gt;其实很简单, 只需要把html代码放进markdown源文件就行了! 而视频的html代码在视频网站上一般都会提供:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./关于用pelican写博客的两点tips/pasted_image.png" /&gt;&lt;/p&gt;
&lt;p&gt;复制下来放进源文件即可&lt;/p&gt;
&lt;h1&gt;2.删除线&lt;/h1&gt;
&lt;p&gt;markdown不支持删除线? 反正我没有在教程里找到... 但是删除线确实是个有用的功能, 在zim里记笔记的时候我就经常使用.
但是好像听说markdown是支持html内容的, 那么, 是不是直接加html的删除线代码就行了呢? 果然~!&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;s&amp;gt;&lt;/span&gt;文本&lt;span class="nt"&gt;&amp;lt;/s&amp;gt;&lt;/span&gt;
or
&lt;span class="nt"&gt;&amp;lt;strike&amp;gt;&lt;/span&gt;文本&lt;span class="nt"&gt;&amp;lt;/strike&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;嗯, 更复杂的html样式如果markdown没有的话也可以用这种方法弄~&lt;/p&gt;
&lt;h1&gt;3.给博客加入分享按钮&lt;/h1&gt;
&lt;p&gt;这个也是用网上找的html代码, 然后修改了一下主题(pelican-themes/bs5)中的一个html文件, 不过我水平太菜, 改了好久也没能让分享按钮处于标题下方...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2012-05-31补充&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原先那个分享的按钮不好看也不很好用, 我借鉴了&lt;a href="http://www.ubuntusoft.com/"&gt;ubuntusoft&lt;/a&gt;网站上的分享按钮和回顶部按钮, 查看了下网页代码, 原来是用的百度分享以及友荐按钮, 修改主题文件&lt;code&gt;./pelican-themes/bs6/templates/base.html&lt;/code&gt;,在&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;后面加上这几行:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;lt;!-- Baidu Button BEGIN --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bdshare_js&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;type=slide&amp;amp;img=6&amp;amp;pos=right&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bdshell_js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        var bds_config = {&amp;quot;bdTop&amp;quot;:289};
        document.getElementById(&amp;quot;bdshell_js&amp;quot;).src = &amp;quot;http://bdimg.share.baidu.com/static/js/shell_v2.js?cdnversion=&amp;quot; + new Date().getHours();
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- Baidu Button END --&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- UJian Button BEGIN --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://v1.ujian.cc/code/ujian.js?type=slide&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- UJian Button END --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;网页就变成了现在的样子, 嗯, 现在就比较满意了...&lt;/p&gt;</summary><category term="pelican"></category><category term="markdown"></category></entry><entry><title>打乱文本的行</title><link href="http://x-wei.github.io/%E6%89%93%E4%B9%B1%E6%96%87%E6%9C%AC%E7%9A%84%E8%A1%8C.html" rel="alternate"></link><updated>2012-05-01T00:00:00+02:00</updated><author><name>mx</name></author><id>http://x-wei.github.io/打乱文本的行.html</id><summary type="html">&lt;p&gt;今天cbl问了我一个问题: 怎样打乱一个文本文件的所有行??&lt;/p&gt;
&lt;p&gt;仔细一想, 确实有难度... 因为那个文本文件居然有1G, 用python读进内存再打乱的思路估计不行啊... 那么awk, shell什么的有没有解决方法? 搜到了一些帖子, 但是稍微复杂一点的shell脚本我也看不懂(弱爆了)...&lt;/p&gt;
&lt;p&gt;我甚至想大概vim会提供这个功能吧, 没想到在搜的时候居然搜到了一个现成的shell命令: &lt;strong&gt;shuf&lt;/strong&gt;!!&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;shuf&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;
&lt;span class="err"&gt;用法：&lt;/span&gt; &lt;span class="n"&gt;shuf&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;选项&lt;/span&gt;&lt;span class="p"&gt;]...&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;文件&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="err"&gt;　或者&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;shuf&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;选项&lt;/span&gt;&lt;span class="p"&gt;]...&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;参数&lt;/span&gt;&lt;span class="p"&gt;]...&lt;/span&gt;
&lt;span class="err"&gt;　或者&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;shuf&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;LO&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;HI&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;选项&lt;/span&gt;&lt;span class="p"&gt;]...&lt;/span&gt;
&lt;span class="err"&gt;把输入行按随机顺序输出到标准输出。&lt;/span&gt;

&lt;span class="err"&gt;长选项必须使用的参数对于短选项时也是必需使用的。&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;            &lt;span class="err"&gt;将每个参数视为输入行&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;LO&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;HI&lt;/span&gt;   &lt;span class="err"&gt;将&lt;/span&gt;&lt;span class="n"&gt;LO&lt;/span&gt; &lt;span class="err"&gt;到&lt;/span&gt;&lt;span class="n"&gt;HI&lt;/span&gt; &lt;span class="err"&gt;的每个数字视为输入行&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;行数&lt;/span&gt;       &lt;span class="err"&gt;最多输出指定的行数&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;文件&lt;/span&gt;       &lt;span class="err"&gt;将结果输出到指定文件而非标准输出&lt;/span&gt;
      &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;文件&lt;/span&gt;    &lt;span class="err"&gt;从指定文件获得随机比特&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;terminated&lt;/span&gt; &lt;span class="err"&gt;以&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="err"&gt;结束行而非新行&lt;/span&gt;
      &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;        &lt;span class="err"&gt;显示此帮助信息并退出&lt;/span&gt;
      &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;     &lt;span class="err"&gt;显示版本信息并退出&lt;/span&gt;

&lt;span class="err"&gt;如果没有指定文件，或者文件为&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;，则从标准输入读取。&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;请向&lt;/span&gt;&lt;span class="n"&gt;bug&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;coreutils&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gnu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;mailto&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;请向&lt;/span&gt;&lt;span class="n"&gt;bug&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;coreutils&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gnu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;报告&lt;/span&gt;&lt;span class="n"&gt;shuf&lt;/span&gt; &lt;span class="err"&gt;的错误&lt;/span&gt;
&lt;span class="n"&gt;GNU&lt;/span&gt; &lt;span class="n"&gt;coreutils&lt;/span&gt; &lt;span class="err"&gt;项目主页：&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//www.gnu.org/software/coreutils/&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;GNU&lt;/span&gt; &lt;span class="err"&gt;软件一般性帮助：&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//www.gnu.org/gethelp/&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;请向&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//translationproject.org/team/zh_CN.html&amp;gt;&amp;gt; 报告shuf 的翻译错误&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;太好了吧! 用一个小的文本文件一试, 果然是可以的! 
&lt;code&gt;shuf [filename]&lt;/code&gt;
另外, 加上-o参数, 可以指定输出到一个新文件(估计用shell的输出重定向方法也可以吧):
&lt;code&gt;shuf [filename] -o [output_filename]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对了, 我搜到的网址是&lt;a href="http://os.51cto.com/art/201103/246525.htm"&gt;这里&lt;/a&gt;, 介绍了一些非主流的命令. 比如另一条命令: &lt;code&gt;tac&lt;/code&gt;(&lt;code&gt;cat&lt;/code&gt;的反转), 作用是先输出文件的末端, 也很有意思.&lt;/p&gt;</summary><category term="shell"></category></entry><entry><title>用pelican在github上创建自己的博客!</title><link href="http://x-wei.github.io/pelican_github_blog.html" rel="alternate"></link><updated>2012-04-13T00:00:00+02:00</updated><author><name>mx</name></author><id>http://x-wei.github.io/pelican_github_blog.html</id><summary type="html">&lt;p&gt;折腾了许久, 终于把&lt;a href="http://x-wei.github.com"&gt;我的博客&lt;/a&gt;搞得差不多了, 在此写一个总结, 以免自己以后忘了, 并且给和我一样菜的人提供一点参考....&lt;/p&gt;
&lt;h2&gt;先扯点别的&lt;/h2&gt;
&lt;p&gt;其实啊, 很早就想要建立自己的博客, 把值得分享的东西拿出来放到网上, 但是又不屑于使用网易, 百度等提供的现成服务, 技术又很菜... 于是一直拖着. zim的出现让我很欣喜--zim可以写类似于博客的东西(不过是给自己看的~), 记录有价值的内容. 但是怎么把我的一些总结放到网上?? 我先后考虑了这些东西:&lt;/p&gt;
&lt;p&gt;googlesite--&amp;gt;wordpress--&amp;gt;jekyll+github--&amp;gt;pelican+github&lt;/p&gt;
&lt;p&gt;googlesite是个很好的工具, &lt;strong&gt;很容易上手&lt;/strong&gt;(google好赞...), 我曾经用它做过一个个人页面. 但是这种傻瓜工具的缺点就是: 没法自己定制... 当我发现googlesite的bolg页面不支持标签云的时候, 就决定不用它了... 况且googlesite在国内需要修改一下host才能访问... &lt;/p&gt;
&lt;p&gt;然后是wordpress, 这个似乎目前也是最流行的网页制作工具, 我看到了很多很多大牛小牛使用WP搭建的自己的网站, 而且都是自己的顶级域名, 看上去就灰常霸气~ 当我终于有空折腾, 兴冲冲地研究WP时, 却发现&lt;strong&gt;顶级域名注册都是要交钱的&lt;/strong&gt;, 还要弄什么vpn...这... 大概不适合我...&lt;/p&gt;
&lt;p&gt;在我纠结的时候, 请教了&lt;a href="http://www.dofine.me/"&gt;dofine&lt;/a&gt;同学, 他推荐我使用&lt;a href="http://help.github.com/pages/"&gt;github pages&lt;/a&gt;(后来证明这是非常正确的~). 早就听说git大名, 只是我太菜了... 不知能不能搞定啊... 还好可以随时询问dofine同学(有时我的问题很弱智, 他还是很耐心的回答, 真好~). github page弄好后, 要按装jekyll作为&lt;strong&gt;静态页面&lt;/strong&gt;的生成工具. 在使用zim的时候, 我就对轻量级标记语言非常喜欢, jekyll可以使用Markdown格式(比zim的wiki语法还要简洁), 所以说应该是非常好的选择. &lt;strong&gt;但是我在jekyll的安装这一步卡住了&lt;/strong&gt;... 由于我用的是ubuntu10.04, 安装各种报错... 更新了rubygem之后以为成功了, 但是运行jekyll还是不行... 折腾了两天后, 我决定暂时放弃了...&lt;/p&gt;
&lt;p&gt;就在纠结之时, 报着试一试的态度, 在&lt;a href="https://bbs.sjtu.edu.cn/file/bbs/index/index.htm"&gt;yssy&lt;/a&gt; 的gnu/linux版上问了一下, 得到了 &lt;a href="http://farseerfc.github.com/"&gt;farseerfc&lt;/a&gt; 学长非常热情耐心的回答. 他建议我&lt;a href="http://farseerfc.github.com/try-pelican-zhs.html"&gt;采用pelican&lt;/a&gt;来生成静态页面, 这是一个法国人用python写的程序. 我很容易就安装好了, 然后又折腾了许久, 现在终于基本搞定...... 感觉pelican还是相当不错的选择, 配置好了之后就可以安心写文章了...&lt;/p&gt;
&lt;h2&gt;第一步: 生成github page&lt;/h2&gt;
&lt;p&gt;第一步要做的就是注册github, 生成一个自己的二级域名(比如我的x-wei.github.com). 注册和配置SSH密钥过程&lt;a href="http://help.github.com/linux-set-up-git/"&gt;help page&lt;/a&gt;写得很清楚, 虽然我连SSH是什么都搞不清, 按它说的一步一步做, 很容易就搞定了.&lt;/p&gt;
&lt;p&gt;然后要新建一个repo(中文翻译成"依赖"?), 注意&lt;strong&gt;这个repo需要命名成: your_id.github.com&lt;/strong&gt;, 所以一个id只能生成一个啦... 生成这个repo后会有提示, 运行一下mkdir, git init什么的就OK了.&lt;/p&gt;
&lt;p&gt;这样, 建立好了your_id.github.com的repo之后, 只要把一个index.html文件上传到master分支, 就可以访问your_id.github.com看到那个index.html文件了~&lt;/p&gt;
&lt;h2&gt;第二步: 安装和使用pelican&lt;/h2&gt;
&lt;p&gt;pelican的安装需要用到pip:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$sudo apt-get install python-pip&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后再用pip安装pelican:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$sudo pip install pelican&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样, 安装就完成了~&lt;/p&gt;
&lt;p&gt;pelican的使用很简单, 这是帮助信息:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;
&lt;span class="nl"&gt;usage:&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;THEME&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;MARKUP&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;SETTINGS&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
               &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
               &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;tool&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;restructured&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;positional&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;path&lt;/span&gt;                  &lt;span class="n"&gt;Path&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;

&lt;span class="n"&gt;optional&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;            &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;THEME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;THEME&lt;/span&gt;
                        &lt;span class="n"&gt;Path&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;theme&lt;/span&gt; &lt;span class="n"&gt;templates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt;
                        &lt;span class="n"&gt;specified&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;itwill&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;included&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt;
                        &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt;
                        &lt;span class="n"&gt;Where&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;generated&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;specified&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;output&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt;
                        &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;MARKUP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;markup&lt;/span&gt; &lt;span class="n"&gt;MARKUP&lt;/span&gt;
                        &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;markup&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rst&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt; &lt;span class="n"&gt;Please&lt;/span&gt;
                        &lt;span class="n"&gt;indicate&lt;/span&gt; &lt;span class="n"&gt;them&lt;/span&gt; &lt;span class="n"&gt;separated&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;commas&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;SETTINGS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="n"&gt;SETTINGS&lt;/span&gt;
                        &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Default&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;
                        &lt;span class="n"&gt;Delete&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;         &lt;span class="n"&gt;Show&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;quiet&lt;/span&gt;           &lt;span class="n"&gt;Show&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;critical&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;           &lt;span class="n"&gt;Show&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;including&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;
  &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;             &lt;span class="n"&gt;Print&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;autoreload&lt;/span&gt;      &lt;span class="n"&gt;Relaunch&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;modification&lt;/span&gt; &lt;span class="n"&gt;occurs&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;
                        &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;contentfiles&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;额, 其实那些参数可以先无视(直接用默认参数)... 那么用法就很简单了: &lt;strong&gt;$pelican [path]&lt;/strong&gt;, 其中, path是放置markdown或rst文件的目录. 如果手头有几篇.md文件或.rst文件, 那么只要:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$pelican [.md/.rst文件所在目录]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;就会看到效果了... 大概会在一个'output'目录里, 打开index.html就可以看到生成的页面, 只要把这些生成的文件push到github的master分支, 你的博客就建好了~~&lt;/p&gt;
&lt;p&gt;另外, 把.md文件分别放在几个子目录, 那么生成的页面显示属于不同分类的文章了~&lt;/p&gt;
&lt;p&gt;关于pelican的配置, 待会再说, 先说说git的上传...&lt;/p&gt;
&lt;h2&gt;第三步: 编辑.md/.rst文件&lt;/h2&gt;
&lt;p&gt;markdown和rst都是非常优秀的轻量级标记语言, 可以很方便的写出整洁漂亮的笔记, 编写博客文章只要写成一个一个的.md或.rst文件然后交给pelican就OK了.&lt;/p&gt;
&lt;p&gt;关于这两种格式的语法, 其实我自己还不太熟悉呢... 网上有不少教程, 比如这个&lt;a href="http://wowubuntu.com/markdown/"&gt;markdown的教程&lt;/a&gt;和&lt;a href="http://readthedocs.org/docs/beinggeekbook/en/latest/rst.html"&gt;这个ReST教程&lt;/a&gt;...&lt;/p&gt;
&lt;p&gt;需要注意的是, 在文章的开头要指定一下博客的信息: 博客标题, 时间, 标签... pelican的帮助页面各提供了一个示例(我稍微修改了一下):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;.rst示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;super&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="cp"&gt;##############&lt;/span&gt;

&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2010&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tag1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag2&lt;/span&gt;
&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;yeah&lt;/span&gt; &lt;span class="c1"&gt;//如果把这个rst文件放在posts/下的子目录的话, 那么这一行可以省略, 默认把子文件夹名作为分类&lt;/span&gt;
&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Alexis&lt;/span&gt; &lt;span class="n"&gt;Metaireau&lt;/span&gt; &lt;span class="c1"&gt;//由于settings文件已经指定了作者. 这一行可以省略&lt;/span&gt;
&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="c1"&gt;//这个是指定生成页面的名称, 比如这个是指定生成的页面名字是&amp;quot;test-blog.html&amp;quot;&lt;/span&gt;

&lt;span class="err"&gt;这里写博客内容&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;.md示例&lt;/strong&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2010&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt;
&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tag1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag2&lt;/span&gt;

&lt;span class="err"&gt;这里写博客内容&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;另: 关于编辑器&lt;/strong&gt;
编辑这类文件时最好能够预览效果, linux下用&lt;a href="http://wowubuntu.com/retext.html"&gt;ReText&lt;/a&gt;即可~ &lt;/p&gt;
&lt;h2&gt;第四步: 把生成的文件上传到github&lt;/h2&gt;
&lt;p&gt;以前没用过git, 所以这个让我困惑了很长时间... &lt;/p&gt;
&lt;p&gt;首先, 应该在your_id.github.com页面下有一个.git文件夹(大概是git init生成的吧), 然后, 把生成好了的那些文件(比如上一步的output文件夹里的东西)放在这个目录下, 依次运行以下三个命令:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;am&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;your commit message&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;额 是的, 需要三条命令才能完成上传... 另外, 貌似这样会覆盖掉原先的那些文件, 不必担心, github有history功能(我的理解 可能跟快照有点类似吧), 原先的东西应该可以找回来...&lt;/p&gt;
&lt;p&gt;push完成后, 你的注册邮箱会收到邮件"page built successful", 如果是第一次生成的话, 最多等10分钟, 你就可以访问your_id.github.com看到效果啦~~&lt;/p&gt;
&lt;h2&gt;第五步: pelican的进一步配置&lt;/h2&gt;
&lt;p&gt;如果按照默认的参数, 直接$pelican path的话, 估计不会得到让你满意的页面--至少网站名字要改一下吧!! 还有, 默认的主题没有标签云, 反正我比较想要这个功能... &lt;/p&gt;
&lt;p&gt;farseerfc给了一个&lt;a href="https://github.com/farseerfc/farseerfc.github.com/blob/master/settings.py"&gt;settings.py&lt;/a&gt;配置文件, 各个变量的名字含义应该比较清楚, 或者看pelican的&lt;a href="http://readthedocs.org/docs/pelican/en/2.8/settings.html"&gt;帮助页面&lt;/a&gt;, 这个页面也提供了一个示例配置文件. 可以在这俩配置文件基础上进行修改... 修改完成了之后, 运行pelican时加上-s参数指定settings.py作为配置文件:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$pelican -s settings.py [.md/.rst文件所在目录]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我是从farseerfc的配置文件改的, 大概是这个样子:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="o"&gt;-*-&lt;/span&gt; &lt;span class="nx"&gt;coding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;utf&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;-*-&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;TIMEZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Asia/Shanghai&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;zhs&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;X. Wei&amp;#39;s Blog&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;X.Wei&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xweisblog&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;GITHUB_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;https://github.com/X-Wei&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="vi"&gt;#github&lt;/span&gt;&lt;span class="err"&gt;链接&lt;/span&gt;
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;http://x-wei.github.com&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;GOOGLE_ANALYTICS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UA-30756331-1&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;#谷歌站点分析&lt;/span&gt;
&lt;span class="n"&gt;TAG_FEED&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;feeds/%s.atom.xml&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_PAGINATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="err"&gt;#默认每一页有多少篇文章&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_CATEGORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;misc&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;OUTPUT_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;#需要把输出路径从默认的&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;output&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;改成根目录&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;your_id.github.com&lt;/span&gt;&lt;span class="err"&gt;目录&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="err"&gt;因为&lt;/span&gt;&lt;span class="nx"&gt;githubpage&lt;/span&gt;&lt;span class="err"&gt;需要把&lt;/span&gt;&lt;span class="nx"&gt;index.html&lt;/span&gt;&lt;span class="err"&gt;上传到&lt;/span&gt;&lt;span class="nx"&gt;repo&lt;/span&gt;&lt;span class="err"&gt;的&lt;/span&gt;&lt;span class="nx"&gt;master&lt;/span&gt;&lt;span class="err"&gt;分支的根目录才可以&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="n"&gt;PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;posts&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;#这个是指定放置&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;md&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;.rst&lt;/span&gt;&lt;span class="err"&gt;文件的目录&lt;/span&gt;

&lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dofine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;http://www.dofine.me&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;farseerfc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;http://farseerfc.github.com/&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;#友情链接~&lt;/span&gt;

&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;github&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;https://github.com/x-wei&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;#社交网络链接&lt;/span&gt;
          &lt;span class="err"&gt;#~&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;twitter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;http://twitter.com/farseerfc&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="err"&gt;#~&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;facebook&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;http://www.facebook.com/farseerfc&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="err"&gt;#~&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;weibo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;http://weibo.com/farseerfc&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="err"&gt;#~&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;renren&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;http://www.renren.com/farseer&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;


&lt;span class="err"&gt;#这个是&lt;/span&gt;&lt;span class="nx"&gt;farseerfc&lt;/span&gt;&lt;span class="err"&gt;同学自己加的&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;可以显示他的新浪微博内容&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;有微博的话可以把这些加上~&lt;/span&gt;
&lt;span class="err"&gt;#~&lt;/span&gt; &lt;span class="n"&gt;TWITTER_USERNAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;farseerfc&amp;#39;&lt;/span&gt;
&lt;span class="err"&gt;#~&lt;/span&gt; &lt;span class="n"&gt;SIDEBAR_CUSTOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;r&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;#~ &amp;lt;li class=&amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;nav&lt;/span&gt;&lt;span class="na"&gt;-header&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;gt;&amp;lt;h4&amp;gt;&amp;lt;i class=&amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="na"&gt;-list-alt&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;Weibo&amp;lt;/h4&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;#~ &amp;lt;iframe width=&amp;quot;&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; height=&amp;quot;&lt;/span&gt;&lt;span class="mi"&gt;550&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; class=&amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;share_self&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;  frameborder=&amp;quot;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; scrolling=&amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;no&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &lt;/span&gt;
&lt;span class="s2"&gt;#~ src=&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//widget.weibo.com/weiboshow/index.php?language=&amp;amp;width=0&amp;amp;height=550&amp;amp;fansRow=1&amp;amp;ptype=1&amp;amp;speed=0&amp;amp;skin=2&amp;amp;isTitle=1&amp;amp;noborder=1&amp;amp;isWeibo=1&amp;amp;isFans=1&amp;amp;uid=1862842353&amp;amp;verifier=b193b9de&amp;amp;dpc=1&amp;gt;&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;#~&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;iframe&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;#~&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="s2"&gt;#google自定义搜索(大概是站内搜索吧)&lt;/span&gt;
&lt;span class="s2"&gt;#~ GOOGLE_CUSTOM_SEARCH_SIDEBAR = &amp;quot;&lt;/span&gt;&lt;span class="mi"&gt;001578481551708017171&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;axpo6yvtdyg&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;#~ GOOGLE_CUSTOM_SEARCH_NAVBAR = &amp;quot;&lt;/span&gt;&lt;span class="mi"&gt;001578481551708017171&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;hxkva69brmg&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由于配置文件里已经包含了PATH和OUTPUT_PATH什么的, 所以运行只要:&lt;code&gt;$pelican -s settings.py&lt;/code&gt;即可~&lt;/p&gt;
&lt;p&gt;然后, 关于主题模板, 可以使用-t参数指定主题. pelican目前主题在&lt;a href="https://github.com/farseerfc/pelican-themes"&gt;github&lt;/a&gt;上, 可以用$git clone &lt;a href="https://github.com/farseerfc/pelican-themes"&gt;https://github.com/farseerfc/pelican-themes&lt;/a&gt; 下载, 然后使用主题的话就是:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$pelican -s settings.py -t [主题所在目录] [.md/.rst文件所在目录]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果想生成后就预览一下, 那就写:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$pelican -s settings.py -t [主题所在目录] [.md/.rst文件所在目录] | xdg-open index.html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;个人感觉还是bootstrap2主题比较好... 目前由于pelican使用的人不多, 所以主题也就那十几个... &lt;/p&gt;
&lt;h2&gt;再罗嗦一下: 关于一些问题的解决方法&lt;/h2&gt;
&lt;p&gt;这几天折腾pelican很久很久, 发现以下几个问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不支持多层分类?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;--这个目前没法解决, 不过既然有标签功能, 分类不能多层也无所谓啦...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装后不支持Markdown语法?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个是因为Markdown没有与pelican包一起安装(pelican默认的还是支持rst格式), 安装上Markdown包就行了:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$sudo pip install Markdown&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何插图?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里不是讨论markdown语法如何插图, 而是怎么让生成的网页有图片. 其实很简单, 把.md文件里引用的图片复制一份到static目录即可~ (其实剪切也是可以的, 只不过那样的话编辑预览时就看不见图片了...)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中文tag不支持?(事后证明其实是支持的, 是我搞得不支持了...)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pelican2.8(当前版本)是支持中文tag的! 我一开始直接git clone了3.0的源码, 然后不支持了... 需要重装pelican:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;uninstall&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;不支持中文文件名(&lt;strong&gt;2012-04-25: XXXXX!! 可以啊, 谁说不可以...&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个我没解决, 无所谓, 起一个英文文件名(.md文件以及Slug最好都用英文吧)好了, 毕竟博客标题(Title)是可以用中文的~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OK, 就写这些吧... (累死了...)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(我发现几乎所有文章都是从zim里搬来的, so, 以后就不在文章最后标注"imported from zim"了...)&lt;/p&gt;</summary><category term="pelican"></category><category term="git"></category></entry><entry><title>tex插入程序代码--so easy~</title><link href="http://x-wei.github.io/tex_insert_code.html" rel="alternate"></link><updated>2012-03-03T00:00:00+01:00</updated><author><name>mx</name></author><id>http://x-wei.github.io/tex_insert_code.html</id><summary type="html">&lt;p&gt;这个问题... 我本来想用python解决的...&lt;/p&gt;
&lt;p&gt;但是显然应该先搜一下吧... 果然, 早就有人解决了(其实是tex的常用命令里就有的), 比如&lt;a href="http://hi.baidu.com/xuelicheng/blog/item/194c844a22d2452a09f7ef8a.html"&gt;这里&lt;/a&gt;...&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;usepackage&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;listings&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;lstset&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="err"&gt;这条命令可以让&lt;/span&gt;&lt;span class="n"&gt;LaTeX&lt;/span&gt;&lt;span class="err"&gt;排版时将&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="err"&gt;键字突出显示&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;lstset&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;breaklines&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="err"&gt;这条命令可以让&lt;/span&gt;&lt;span class="n"&gt;LaTeX&lt;/span&gt;&lt;span class="err"&gt;自动将长的代码行换行排版&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;lstset&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;extendedchars&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="err"&gt;这一条命令可以解决代码跨页时，章节标题，页眉等汉字不显示的问题&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;lstlisting&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;paste&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;lstlisting&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;很简单的... 不过比较长的代码换行显示不是很爽(貌似不换行也不是办法啊)... 另外没有颜色高亮哎...&lt;/p&gt;
&lt;p&gt;嗯, 貌似&lt;a href="http://bbs.chinatex.org/forum.php?mod=viewthread&amp;amp;tid=3692"&gt;这里&lt;/a&gt;的介绍更详细...
还有这个人的&lt;a href="http://aifreedom.com/technology/170"&gt;博客&lt;/a&gt;...
&lt;a href="http://blog.sina.com.cn/s/blog_5e16f1770100o9ef.html"&gt;这篇文章&lt;/a&gt;是针对python的高亮...&lt;/p&gt;
&lt;p&gt;总结一下, 这样比较好:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;article&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;listings&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;xcolor&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;xeCJK&lt;span class="nb"&gt;}&lt;/span&gt;  &lt;span class="c"&gt;%必须加xeCJK包&lt;/span&gt;
&lt;span class="k"&gt;\setCJKmainfont&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;WenQuanYi Micro Hei&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\lstset&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;numbers=left,
numberstyle=&lt;span class="k"&gt;\tiny&lt;/span&gt;,
keywordstyle=&lt;span class="k"&gt;\color&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;blue!70&lt;span class="nb"&gt;}&lt;/span&gt;, commentstyle=&lt;span class="k"&gt;\color&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;red!50!green!50!blue!50&lt;span class="nb"&gt;}&lt;/span&gt;,
frame=shadowbox,
rulesepcolor=&lt;span class="k"&gt;\color&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;red!20!green!20!blue!20&lt;span class="nb"&gt;}&lt;/span&gt;,
breaklines=true,
extendedchars=true
&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;lstlisting&lt;span class="nb"&gt;}&lt;/span&gt;[language=&lt;span class="nb"&gt;{&lt;/span&gt;Python&lt;span class="nb"&gt;}&lt;/span&gt;]
&lt;span class="c"&gt;%这里插入代码~&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;lstlisting&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;附件: 我做的一个简单实例
&lt;a href="./tex_insert_code/insertcode2.tex"&gt;./insertcode2.tex&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;imported from zim&lt;/strong&gt;&lt;/p&gt;</summary><category term="tex"></category></entry><entry><title>xelatex--linux下tex中文的完全解决!</title><link href="http://x-wei.github.io/xelatex_zh.html" rel="alternate"></link><updated>2012-02-27T00:00:00+01:00</updated><author><name>mx</name></author><id>http://x-wei.github.io/xelatex_zh.html</id><summary type="html">&lt;p&gt;前几天校内上看见了这个&lt;a href="http://page.renren.com/601024697/note/806581340?ref=share"&gt;latex中文指南&lt;/a&gt;, 想试一试...&lt;/p&gt;
&lt;p&gt;可是貌似不给力(or我没做对)安装了texlive之后还是不能编译它的测试源文件...&lt;/p&gt;
&lt;p&gt;搜索发现了&lt;a href="http://blog.sina.com.cn/s/blog_4c20fe7b0100vjbj.html"&gt;这样一篇&lt;/a&gt;非常强大的文章... 这货直接把他的源文件放上去了... 不过这样的话他的文章可读性就不好了...&lt;/p&gt;
&lt;p&gt;要进行的操作:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;texlive&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xetex&lt;/span&gt; &lt;span class="n"&gt;latex&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cjk&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xcjk&lt;/span&gt; &lt;span class="n"&gt;texlive&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;latex&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;recommended&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其实好像这样之后就可以用中文了(按博客里的意思), 可惜我用的geany开始使用latex编译的, 老是报错...&lt;/p&gt;
&lt;p&gt;其实应该用命令行 xelatex xx.tex就应该好使了...&lt;/p&gt;
&lt;p&gt;然后我又按照博客里的提示安装了Gummi...... 一个可以在右面看到效果的texIDE... 还是不行, 因为默认的编译器都是latex不是xelatex...&lt;/p&gt;
&lt;p&gt;当然我最终发现了要用xelatex, 那么老是用命令行也不大方便... gummi里面找到了设置:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./xelatex_zh/pasted_image.png" /&gt;&lt;/p&gt;
&lt;p&gt;这样就好了...&lt;/p&gt;
&lt;p&gt;但是我现在已经非常喜欢geany了, 不想因为tex再单独用一个编辑环境... 还好找到了geany里面的设置: 生成--&amp;gt;设置生成命令, 在里面添加一个xelatex就行啦!~ 嗯 还是geany亲切~!&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./xelatex_zh/pasted_image001.png" /&gt;&lt;/p&gt;
&lt;p&gt;最后把源文件生成好的pdf也放进来吧...
&lt;a href="./xelatex_zh/xelatex_test.tex"&gt;./xelatex_test.tex&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="./xelatex_zh/xelatex%20%E5%8F%8A%E4%B8%AD%E6%96%87%20Gummi%20%E5%9C%A8%20ubuntu%20%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE.pdf"&gt;./xelatex 及中文 Gummi 在 ubuntu 上的配置.pdf&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;imported from zim&lt;/strong&gt; &lt;/p&gt;</summary><category term="tex"></category><category term="中文乱码"></category></entry><entry><title>用du命令查看各目录大小</title><link href="http://x-wei.github.io/use_du_shell.html" rel="alternate"></link><updated>2012-02-14T00:00:00+01:00</updated><author><name>mx</name></author><id>http://x-wei.github.io/use_du_shell.html</id><summary type="html">&lt;p&gt;du用来计算目录的磁盘用量. 具体的参数可以用man或者--help, 这里不贴了(其实我也没仔细看...). 今天看见水源上有人说 用 -sh这个参数比较好:&lt;/p&gt;
&lt;p&gt;-s: 只计算各个目录的总用量(就是说不要递归操作) 后面跟着&lt;em&gt;或者.&lt;/em&gt;就可以查看各个目录的大小了.
-h: 易于查看的方式&lt;/p&gt;
&lt;p&gt;比如~/目录经常不知道为什么空间在减少, 那就运行:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;du -sh ~/*&lt;/code&gt; 以及 &lt;code&gt;du -sh /.*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;即可&lt;/p&gt;
&lt;p&gt;有时候文件夹比较多的情况, 还是不容易发现那个文件夹占用了大部分空间, 这时用sort命令对du的结果进行排序就行了!
参考了&lt;a href="http://www.xn--b0t733db8c.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/12950504311.html"&gt;这里&lt;/a&gt;, 顺便学会了: 两条一起执行是用"|"进行分割的.&lt;/p&gt;
&lt;p&gt;所以命令为:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;du&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sm&lt;/span&gt; &lt;span class="o"&gt;~/*&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意这时du不能用-h参数, 因为这样的话文件可能是以M为单位也可能是以k为单位, 而sort的时候只看前面的数字值, 不看单位. 用-m参数, 表示让所有结果以M为单位显示.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;imported from zim&lt;/strong&gt;&lt;/p&gt;</summary><category term="shell"></category></entry></feed>